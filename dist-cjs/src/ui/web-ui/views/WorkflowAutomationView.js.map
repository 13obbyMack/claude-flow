{"version":3,"sources":["../../../../../src/ui/web-ui/views/WorkflowAutomationView.js"],"sourcesContent":["/**\n * Workflow & Automation View - Interface for workflow and automation tools\n * Handles workflow creation, automation rules, pipelines, scheduling, and SPARC modes\n */\n\nclass WorkflowAutomationView {\n  constructor(container, eventBus, viewConfig) {\n    this.container = container;\n    this.eventBus = eventBus;\n    this.viewConfig = viewConfig;\n    this.componentLibrary = null;\n    this.workflows = new Map();\n    this.pipelines = new Map();\n    this.automationRules = new Map();\n    this.scheduledTasks = new Map();\n    this.currentTab = 'overview';\n    this.isInitialized = false;\n    this.draggedElement = null;\n    this.dropZones = new Set();\n  }\n\n  /**\n   * Initialize the workflow & automation view\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    // Get component library from event bus\n    this.eventBus.emit('component-library:get', (library) => {\n      this.componentLibrary = library;\n    });\n\n    // Setup event handlers\n    this.setupEventHandlers();\n\n    this.isInitialized = true;\n  }\n\n  /**\n   * Render the view with given parameters\n   */\n  async render(params = {}) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.createWorkflowInterface();\n    } else {\n      // Terminal mode\n      this.renderTerminalMode(params);\n    }\n  }\n\n  /**\n   * Create workflow interface for browser\n   */\n  createWorkflowInterface() {\n    // Create tab container\n    const tabs = [\n      { label: '📊 Overview', content: this.createOverviewTab() },\n      { label: '🔄 Workflows', content: this.createWorkflowsTab() },\n      { label: '⚡ Automation', content: this.createAutomationTab() },\n      { label: '🚀 Pipelines', content: this.createPipelinesTab() },\n      { label: '📅 Scheduler', content: this.createSchedulerTab() },\n      { label: '🎯 SPARC Modes', content: this.createSparcModesTab() },\n      { label: '📦 Batch & Parallel', content: this.createBatchTab() },\n    ];\n\n    if (this.componentLibrary) {\n      const tabContainer = this.componentLibrary.getComponent('TabContainer')(tabs);\n      this.container.appendChild(tabContainer.element);\n    } else {\n      // Fallback without component library\n      this.createFallbackInterface();\n    }\n  }\n\n  /**\n   * Create overview tab content\n   */\n  createOverviewTab() {\n    return `\n      <div class=\"workflow-overview\">\n        <div class=\"stats-grid\">\n          <div id=\"workflows-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">🔄</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">0</div>\n              <div class=\"stat-label\">Active Workflows</div>\n            </div>\n          </div>\n          <div id=\"pipelines-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">🚀</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">0</div>\n              <div class=\"stat-label\">Running Pipelines</div>\n            </div>\n          </div>\n          <div id=\"rules-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">⚡</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">0</div>\n              <div class=\"stat-label\">Automation Rules</div>\n            </div>\n          </div>\n          <div id=\"scheduled-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">📅</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">0</div>\n              <div class=\"stat-label\">Scheduled Tasks</div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"workflow-tools\">\n          <h3>🔧 Quick Actions</h3>\n          <div class=\"tool-buttons\">\n            <button onclick=\"this.createNewWorkflow()\" class=\"workflow-btn primary\">\n              🔄 Create Workflow\n            </button>\n            <button onclick=\"this.setupAutomation()\" class=\"workflow-btn secondary\">\n              ⚡ Setup Automation\n            </button>\n            <button onclick=\"this.createPipeline()\" class=\"workflow-btn secondary\">\n              🚀 New Pipeline\n            </button>\n            <button onclick=\"this.runSparcMode()\" class=\"workflow-btn secondary\">\n              🎯 Run SPARC Mode\n            </button>\n          </div>\n        </div>\n\n        <div class=\"recent-activity\">\n          <h3>📈 Recent Activity</h3>\n          <div id=\"workflow-activity-log\" class=\"activity-list\">\n            <div class=\"activity-item\">\n              <span class=\"activity-time\">--:--</span>\n              <span class=\"activity-desc\">No recent activity</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create workflows tab content with visual builder\n   */\n  createWorkflowsTab() {\n    return `\n      <div class=\"workflow-management\">\n        <div class=\"workflow-builder\">\n          <h3>🔄 Visual Workflow Builder</h3>\n          \n          <div class=\"builder-container\">\n            <div class=\"builder-sidebar\">\n              <h4>📦 Workflow Components</h4>\n              <div class=\"component-palette\">\n                <div class=\"draggable-component\" draggable=\"true\" data-type=\"trigger\">\n                  <span class=\"component-icon\">🎯</span>\n                  <span class=\"component-label\">Trigger</span>\n                </div>\n                <div class=\"draggable-component\" draggable=\"true\" data-type=\"action\">\n                  <span class=\"component-icon\">⚡</span>\n                  <span class=\"component-label\">Action</span>\n                </div>\n                <div class=\"draggable-component\" draggable=\"true\" data-type=\"condition\">\n                  <span class=\"component-icon\">🔀</span>\n                  <span class=\"component-label\">Condition</span>\n                </div>\n                <div class=\"draggable-component\" draggable=\"true\" data-type=\"loop\">\n                  <span class=\"component-icon\">🔁</span>\n                  <span class=\"component-label\">Loop</span>\n                </div>\n                <div class=\"draggable-component\" draggable=\"true\" data-type=\"parallel\">\n                  <span class=\"component-icon\">🔀</span>\n                  <span class=\"component-label\">Parallel</span>\n                </div>\n                <div class=\"draggable-component\" draggable=\"true\" data-type=\"sparc\">\n                  <span class=\"component-icon\">🎯</span>\n                  <span class=\"component-label\">SPARC Mode</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"builder-canvas\" id=\"workflow-canvas\">\n              <div class=\"canvas-grid\">\n                <div class=\"drop-zone\" data-position=\"start\">\n                  <span class=\"drop-hint\">Drop to start workflow</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"builder-properties\">\n              <h4>⚙️ Properties</h4>\n              <div id=\"component-properties\" class=\"properties-panel\">\n                <p class=\"properties-hint\">Select a component to configure</p>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"workflow-controls\">\n            <button onclick=\"this.saveWorkflow()\" class=\"workflow-btn primary\">\n              💾 Save Workflow\n            </button>\n            <button onclick=\"this.testWorkflow()\" class=\"workflow-btn secondary\">\n              🧪 Test Run\n            </button>\n            <button onclick=\"this.exportWorkflow()\" class=\"workflow-btn secondary\">\n              📥 Export\n            </button>\n            <button onclick=\"this.clearCanvas()\" class=\"workflow-btn danger\">\n              🗑️ Clear\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"workflow-list\">\n          <h3>📋 Saved Workflows</h3>\n          <div id=\"workflows-list\" class=\"workflows-grid\">\n            <!-- Workflow cards will be populated here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create automation tab content\n   */\n  createAutomationTab() {\n    return `\n      <div class=\"automation-management\">\n        <div class=\"automation-rules\">\n          <h3>⚡ Automation Rules</h3>\n          \n          <div class=\"rule-builder\">\n            <h4>Create New Rule</h4>\n            \n            <div class=\"form-group\">\n              <label>Rule Name:</label>\n              <input type=\"text\" id=\"rule-name\" placeholder=\"Enter rule name...\">\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Trigger Event:</label>\n              <select id=\"trigger-event\">\n                <option value=\"\">Select trigger...</option>\n                <option value=\"file_change\">File Change</option>\n                <option value=\"task_complete\">Task Complete</option>\n                <option value=\"error_detected\">Error Detected</option>\n                <option value=\"schedule\">Scheduled Time</option>\n                <option value=\"webhook\">Webhook</option>\n                <option value=\"github_event\">GitHub Event</option>\n                <option value=\"memory_threshold\">Memory Threshold</option>\n              </select>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Conditions (optional):</label>\n              <textarea id=\"rule-conditions\" placeholder=\"Define conditions in JSON format...\"></textarea>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Actions:</label>\n              <div class=\"action-builder\">\n                <div id=\"rule-actions\" class=\"actions-list\">\n                  <!-- Actions will be added here -->\n                </div>\n                <button onclick=\"this.addRuleAction()\" class=\"workflow-btn small\">\n                  ➕ Add Action\n                </button>\n              </div>\n            </div>\n            \n            <button onclick=\"this.createAutomationRule()\" class=\"workflow-btn primary\">\n              ⚡ Create Rule\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"automation-list\">\n          <h3>📋 Active Rules</h3>\n          <div id=\"automation-rules-list\" class=\"rules-grid\">\n            <!-- Automation rules will be populated here -->\n          </div>\n        </div>\n        \n        <div class=\"trigger-setup\">\n          <h3>🎯 Event Triggers</h3>\n          \n          <div class=\"trigger-form\">\n            <div class=\"form-group\">\n              <label>Events to Monitor:</label>\n              <div class=\"event-checkboxes\">\n                <label><input type=\"checkbox\" value=\"file_created\"> File Created</label>\n                <label><input type=\"checkbox\" value=\"file_modified\"> File Modified</label>\n                <label><input type=\"checkbox\" value=\"git_push\"> Git Push</label>\n                <label><input type=\"checkbox\" value=\"pr_opened\"> PR Opened</label>\n                <label><input type=\"checkbox\" value=\"issue_created\"> Issue Created</label>\n                <label><input type=\"checkbox\" value=\"test_failed\"> Test Failed</label>\n                <label><input type=\"checkbox\" value=\"build_complete\"> Build Complete</label>\n              </div>\n            </div>\n            \n            <button onclick=\"this.setupEventTriggers()\" class=\"workflow-btn primary\">\n              🎯 Setup Triggers\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create pipelines tab content\n   */\n  createPipelinesTab() {\n    return `\n      <div class=\"pipeline-management\">\n        <div class=\"pipeline-builder\">\n          <h3>🚀 CI/CD Pipeline Builder</h3>\n          \n          <div class=\"pipeline-form\">\n            <div class=\"form-group\">\n              <label>Pipeline Name:</label>\n              <input type=\"text\" id=\"pipeline-name\" placeholder=\"Enter pipeline name...\">\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Pipeline Type:</label>\n              <select id=\"pipeline-type\">\n                <option value=\"ci\">Continuous Integration</option>\n                <option value=\"cd\">Continuous Deployment</option>\n                <option value=\"ci_cd\">CI/CD</option>\n                <option value=\"custom\">Custom</option>\n              </select>\n            </div>\n            \n            <div class=\"pipeline-stages\">\n              <h4>Pipeline Stages</h4>\n              <div id=\"pipeline-stages-list\" class=\"stages-list\">\n                <div class=\"pipeline-stage\">\n                  <input type=\"text\" placeholder=\"Stage name...\" value=\"Build\">\n                  <textarea placeholder=\"Stage commands...\">npm install\nnpm run build</textarea>\n                </div>\n                <div class=\"pipeline-stage\">\n                  <input type=\"text\" placeholder=\"Stage name...\" value=\"Test\">\n                  <textarea placeholder=\"Stage commands...\">npm test\nnpm run lint</textarea>\n                </div>\n              </div>\n              <button onclick=\"this.addPipelineStage()\" class=\"workflow-btn small\">\n                ➕ Add Stage\n              </button>\n            </div>\n            \n            <button onclick=\"this.createPipeline()\" class=\"workflow-btn primary\">\n              🚀 Create Pipeline\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"pipeline-monitor\">\n          <h3>📊 Pipeline Monitor</h3>\n          <div id=\"pipeline-monitor-grid\" class=\"monitor-grid\">\n            <!-- Pipeline status cards will be populated here -->\n          </div>\n        </div>\n        \n        <div class=\"pipeline-history\">\n          <h3>📋 Execution History</h3>\n          <div id=\"pipeline-history-list\" class=\"history-list\">\n            <!-- Pipeline execution history will be populated here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create scheduler tab content\n   */\n  createSchedulerTab() {\n    return `\n      <div class=\"scheduler-management\">\n        <div class=\"schedule-creator\">\n          <h3>📅 Task Scheduler</h3>\n          \n          <div class=\"schedule-form\">\n            <div class=\"form-group\">\n              <label>Task Name:</label>\n              <input type=\"text\" id=\"schedule-task-name\" placeholder=\"Enter task name...\">\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Task Type:</label>\n              <select id=\"schedule-task-type\">\n                <option value=\"workflow\">Execute Workflow</option>\n                <option value=\"pipeline\">Run Pipeline</option>\n                <option value=\"sparc\">SPARC Mode</option>\n                <option value=\"script\">Run Script</option>\n                <option value=\"backup\">Backup</option>\n                <option value=\"cleanup\">Cleanup</option>\n              </select>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Schedule Type:</label>\n              <select id=\"schedule-type\" onchange=\"this.updateScheduleOptions()\">\n                <option value=\"once\">Once</option>\n                <option value=\"recurring\">Recurring</option>\n                <option value=\"cron\">Cron Expression</option>\n              </select>\n            </div>\n            \n            <div id=\"schedule-options\" class=\"schedule-options\">\n              <div class=\"form-group\">\n                <label>Date & Time:</label>\n                <input type=\"datetime-local\" id=\"schedule-datetime\">\n              </div>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Task Configuration:</label>\n              <textarea id=\"schedule-config\" placeholder=\"Task configuration in JSON format...\"></textarea>\n            </div>\n            \n            <button onclick=\"this.createScheduledTask()\" class=\"workflow-btn primary\">\n              📅 Schedule Task\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"schedule-calendar\">\n          <h3>📆 Schedule Calendar</h3>\n          <div id=\"schedule-calendar-view\" class=\"calendar-view\">\n            <!-- Calendar view will be rendered here -->\n          </div>\n        </div>\n        \n        <div class=\"scheduled-tasks\">\n          <h3>📋 Scheduled Tasks</h3>\n          <div id=\"scheduled-tasks-list\" class=\"tasks-grid\">\n            <!-- Scheduled tasks will be populated here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create SPARC modes tab content\n   */\n  createSparcModesTab() {\n    return `\n      <div class=\"sparc-modes-management\">\n        <div class=\"sparc-launcher\">\n          <h3>🎯 SPARC Development Modes</h3>\n          \n          <div class=\"sparc-form\">\n            <div class=\"form-group\">\n              <label>Select SPARC Mode:</label>\n              <select id=\"sparc-mode\" onchange=\"this.updateSparcDescription()\">\n                <option value=\"\">Choose a mode...</option>\n                <option value=\"architect\">🏗️ Architect - System Design</option>\n                <option value=\"code\">💻 Code - Implementation</option>\n                <option value=\"tdd\">🧪 TDD - Test-Driven Development</option>\n                <option value=\"debug\">🐛 Debug - Issue Resolution</option>\n                <option value=\"security-review\">🔒 Security Review</option>\n                <option value=\"docs-writer\">📝 Documentation Writer</option>\n                <option value=\"integration\">🔗 Integration Specialist</option>\n                <option value=\"monitoring\">📊 Post-Deployment Monitoring</option>\n                <option value=\"optimization\">⚡ Refinement & Optimization</option>\n                <option value=\"devops\">🔧 DevOps Engineer</option>\n                <option value=\"mcp\">🎛️ MCP Tool Specialist</option>\n                <option value=\"swarm\">🐝 Swarm Orchestrator</option>\n                <option value=\"ask\">❓ Interactive Assistant</option>\n                <option value=\"tutorial\">🎓 Tutorial Creator</option>\n                <option value=\"generic\">🔨 Generic Task Handler</option>\n              </select>\n            </div>\n            \n            <div id=\"sparc-description\" class=\"sparc-description\">\n              <p>Select a SPARC mode to see its description and capabilities.</p>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Task Description:</label>\n              <textarea id=\"sparc-task\" placeholder=\"Describe the task you want to accomplish...\"></textarea>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Options:</label>\n              <div class=\"sparc-options\">\n                <label><input type=\"checkbox\" id=\"sparc-parallel\"> Run in Parallel</label>\n                <label><input type=\"checkbox\" id=\"sparc-non-interactive\"> Non-Interactive Mode</label>\n                <label><input type=\"checkbox\" id=\"sparc-memory\"> Use Memory Context</label>\n              </div>\n            </div>\n            \n            <button onclick=\"this.executeSparcMode()\" class=\"workflow-btn primary\">\n              🚀 Execute SPARC Mode\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"sparc-orchestration\">\n          <h3>🎭 Multi-Mode Orchestration</h3>\n          \n          <div class=\"orchestration-builder\">\n            <h4>Boomerang Pattern</h4>\n            <p>Create an iterative development flow where results from one phase inform the next.</p>\n            \n            <div class=\"boomerang-phases\">\n              <div class=\"phase-item\">\n                <span class=\"phase-number\">1</span>\n                <select class=\"phase-mode\">\n                  <option value=\"ask\">Research Phase</option>\n                </select>\n              </div>\n              <div class=\"phase-arrow\">→</div>\n              <div class=\"phase-item\">\n                <span class=\"phase-number\">2</span>\n                <select class=\"phase-mode\">\n                  <option value=\"architect\">Design Phase</option>\n                </select>\n              </div>\n              <div class=\"phase-arrow\">→</div>\n              <div class=\"phase-item\">\n                <span class=\"phase-number\">3</span>\n                <select class=\"phase-mode\">\n                  <option value=\"code\">Implementation Phase</option>\n                </select>\n              </div>\n              <div class=\"phase-arrow\">→</div>\n              <div class=\"phase-item\">\n                <span class=\"phase-number\">4</span>\n                <select class=\"phase-mode\">\n                  <option value=\"tdd\">Testing Phase</option>\n                </select>\n              </div>\n              <div class=\"phase-arrow\">→</div>\n              <div class=\"phase-item\">\n                <span class=\"phase-number\">5</span>\n                <select class=\"phase-mode\">\n                  <option value=\"optimization\">Refinement Phase</option>\n                </select>\n              </div>\n              <div class=\"phase-arrow\">↩️</div>\n            </div>\n            \n            <button onclick=\"this.executeBoomerangPattern()\" class=\"workflow-btn primary\">\n              🔄 Execute Boomerang Pattern\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"sparc-history\">\n          <h3>📋 SPARC Execution History</h3>\n          <div id=\"sparc-history-list\" class=\"history-list\">\n            <!-- SPARC execution history will be populated here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create batch & parallel tab content\n   */\n  createBatchTab() {\n    return `\n      <div class=\"batch-parallel-management\">\n        <div class=\"batch-processor\">\n          <h3>📦 Batch Processing</h3>\n          \n          <div class=\"batch-form\">\n            <div class=\"form-group\">\n              <label>Batch Operation:</label>\n              <select id=\"batch-operation\">\n                <option value=\"\">Select operation...</option>\n                <option value=\"file_process\">File Processing</option>\n                <option value=\"data_transform\">Data Transformation</option>\n                <option value=\"code_refactor\">Code Refactoring</option>\n                <option value=\"test_execution\">Test Execution</option>\n                <option value=\"deployment\">Deployment</option>\n                <option value=\"custom\">Custom Operation</option>\n              </select>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Items to Process:</label>\n              <textarea id=\"batch-items\" placeholder=\"Enter items to process (one per line)...\"></textarea>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Batch Size:</label>\n              <input type=\"number\" id=\"batch-size\" value=\"10\" min=\"1\" max=\"100\">\n            </div>\n            \n            <button onclick=\"this.executeBatchProcess()\" class=\"workflow-btn primary\">\n              📦 Execute Batch\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"parallel-executor\">\n          <h3>⚡ Parallel Execution</h3>\n          \n          <div class=\"parallel-form\">\n            <div class=\"form-group\">\n              <label>Parallel Tasks:</label>\n              <div id=\"parallel-tasks-list\" class=\"parallel-tasks\">\n                <div class=\"parallel-task-item\">\n                  <input type=\"text\" placeholder=\"Task description...\" class=\"task-input\">\n                  <select class=\"task-type\">\n                    <option value=\"workflow\">Workflow</option>\n                    <option value=\"sparc\">SPARC Mode</option>\n                    <option value=\"script\">Script</option>\n                  </select>\n                </div>\n              </div>\n              <button onclick=\"this.addParallelTask()\" class=\"workflow-btn small\">\n                ➕ Add Task\n              </button>\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Max Parallel:</label>\n              <input type=\"number\" id=\"max-parallel\" value=\"3\" min=\"1\" max=\"10\">\n            </div>\n            \n            <button onclick=\"this.executeParallelTasks()\" class=\"workflow-btn primary\">\n              ⚡ Execute Parallel\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"execution-monitor\">\n          <h3>📊 Execution Monitor</h3>\n          <div id=\"execution-monitor-grid\" class=\"monitor-grid\">\n            <!-- Execution status will be displayed here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create fallback interface without component library\n   */\n  createFallbackInterface() {\n    this.container.innerHTML = `\n      <div class=\"workflow-automation-fallback\">\n        <h2>🔄 Workflow & Automation Tools</h2>\n        <p>Comprehensive workflow automation with 11 integrated tools</p>\n        \n        <div class=\"tool-sections\">\n          <div class=\"tool-section\">\n            <h3>🔄 Workflow Management</h3>\n            <button onclick=\"this.quickAction('workflow_create')\">Create Workflow</button>\n            <button onclick=\"this.quickAction('workflow_execute')\">Execute Workflow</button>\n            <button onclick=\"this.quickAction('workflow_template')\">Manage Templates</button>\n            <button onclick=\"this.quickAction('workflow_export')\">Export Workflow</button>\n          </div>\n          \n          <div class=\"tool-section\">\n            <h3>⚡ Automation & Pipelines</h3>\n            <button onclick=\"this.quickAction('automation_setup')\">Setup Automation</button>\n            <button onclick=\"this.quickAction('pipeline_create')\">Create Pipeline</button>\n            <button onclick=\"this.quickAction('trigger_setup')\">Configure Triggers</button>\n            <button onclick=\"this.quickAction('scheduler_manage')\">Manage Scheduler</button>\n          </div>\n          \n          <div class=\"tool-section\">\n            <h3>🎯 Execution Modes</h3>\n            <button onclick=\"this.quickAction('sparc_mode')\">SPARC Modes</button>\n            <button onclick=\"this.quickAction('batch_process')\">Batch Processing</button>\n            <button onclick=\"this.quickAction('parallel_execute')\">Parallel Execution</button>\n            <button onclick=\"this.quickAction('task_orchestrate')\">Task Orchestration</button>\n          </div>\n        </div>\n        \n        <div id=\"workflow-output\" class=\"output-area\">\n          <h3>📊 Output</h3>\n          <pre id=\"output-content\">Ready for workflow operations...</pre>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render terminal mode\n   */\n  renderTerminalMode(params) {\n    console.log('\\n🔄 Workflow & Automation Tools');\n    console.log('═'.repeat(50));\n    console.log('Available Tools (11):');\n    console.log('  🔄 workflow_create  - Create custom workflows');\n    console.log('  ▶️ workflow_execute - Execute workflows');\n    console.log('  ⚡ automation_setup - Setup automation rules');\n    console.log('  🚀 pipeline_create  - Create CI/CD pipelines');\n    console.log('  📅 scheduler_manage - Manage task scheduling');\n    console.log('  🎯 trigger_setup    - Configure event triggers');\n    console.log('  📋 workflow_template- Manage templates');\n    console.log('  📦 batch_process    - Batch processing');\n    console.log('  ⚡ parallel_execute - Parallel execution');\n    console.log('  🎯 sparc_mode       - SPARC development modes');\n    console.log('  🎭 task_orchestrate - Task orchestration');\n    console.log('═'.repeat(50));\n\n    if (params.tool) {\n      console.log(`\\n🔧 Executing: ${params.tool}`);\n      this.quickAction(params.tool, params);\n    }\n  }\n\n  /**\n   * Quick action handler\n   */\n  async quickAction(toolName, params = {}) {\n    try {\n      console.log(`🔧 Executing ${toolName}...`);\n\n      // Emit tool execution event\n      this.eventBus.emit('tool:execute', {\n        tool: toolName,\n        params: params,\n        source: 'workflow-view',\n      });\n\n      // Handle specific tool actions\n      switch (toolName) {\n        case 'workflow_create':\n          await this.handleWorkflowCreate(params);\n          break;\n        case 'automation_setup':\n          await this.handleAutomationSetup(params);\n          break;\n        case 'sparc_mode':\n          await this.handleSparcMode(params);\n          break;\n        default:\n          console.log(`Tool ${toolName} executed`);\n      }\n    } catch (error) {\n      console.error(`❌ Error executing ${toolName}:`, error);\n    }\n  }\n\n  /**\n   * Handle workflow creation\n   */\n  async handleWorkflowCreate(params) {\n    const workflowParams = {\n      name: params.name || 'New Workflow',\n      steps: params.steps || [],\n      triggers: params.triggers || [],\n    };\n\n    console.log('🔄 Creating workflow with parameters:', workflowParams);\n\n    // Update UI if in browser mode\n    if (this.container) {\n      const listEl = document.getElementById('workflows-list');\n      if (listEl) {\n        const workflowCard = this.createWorkflowCard(workflowParams);\n        listEl.appendChild(workflowCard);\n      }\n    }\n  }\n\n  /**\n   * Handle automation setup\n   */\n  async handleAutomationSetup(params) {\n    const automationParams = {\n      rules: params.rules || [],\n    };\n\n    console.log('⚡ Setting up automation with parameters:', automationParams);\n\n    // Update UI if in browser mode\n    if (this.container) {\n      const listEl = document.getElementById('automation-rules-list');\n      if (listEl) {\n        const ruleCard = this.createRuleCard(automationParams);\n        listEl.appendChild(ruleCard);\n      }\n    }\n  }\n\n  /**\n   * Handle SPARC mode execution\n   */\n  async handleSparcMode(params) {\n    const sparcParams = {\n      mode: params.mode || 'code',\n      task_description: params.task_description || 'Build feature',\n      options: params.options || {},\n    };\n\n    console.log('🎯 Executing SPARC mode with parameters:', sparcParams);\n\n    // Update UI if in browser mode\n    if (this.container) {\n      const historyEl = document.getElementById('sparc-history-list');\n      if (historyEl) {\n        const historyItem = this.createSparcHistoryItem(sparcParams);\n        historyEl.appendChild(historyItem);\n      }\n    }\n  }\n\n  /**\n   * Create workflow card element\n   */\n  createWorkflowCard(workflow) {\n    const card = document.createElement('div');\n    card.className = 'workflow-card';\n    card.innerHTML = `\n      <div class=\"workflow-header\">\n        <h4>${workflow.name}</h4>\n        <span class=\"workflow-status\">Active</span>\n      </div>\n      <div class=\"workflow-stats\">\n        <span>${workflow.steps.length} steps</span>\n        <span>${workflow.triggers.length} triggers</span>\n      </div>\n      <div class=\"workflow-actions\">\n        <button class=\"workflow-btn small\">Execute</button>\n        <button class=\"workflow-btn small\">Edit</button>\n      </div>\n    `;\n    return card;\n  }\n\n  /**\n   * Create rule card element\n   */\n  createRuleCard(rule) {\n    const card = document.createElement('div');\n    card.className = 'rule-card';\n    card.innerHTML = `\n      <div class=\"rule-header\">\n        <h4>Automation Rule</h4>\n        <span class=\"rule-status\">Active</span>\n      </div>\n      <div class=\"rule-info\">\n        <span>${rule.rules.length} conditions</span>\n      </div>\n      <div class=\"rule-actions\">\n        <button class=\"workflow-btn small\">Toggle</button>\n        <button class=\"workflow-btn small\">Edit</button>\n      </div>\n    `;\n    return card;\n  }\n\n  /**\n   * Create SPARC history item\n   */\n  createSparcHistoryItem(execution) {\n    const item = document.createElement('div');\n    item.className = 'history-item';\n    item.innerHTML = `\n      <span class=\"history-time\">${new Date().toLocaleTimeString()}</span>\n      <span class=\"history-mode\">${execution.mode}</span>\n      <span class=\"history-task\">${execution.task_description.substring(0, 50)}...</span>\n    `;\n    return item;\n  }\n\n  /**\n   * Initialize drag and drop for workflow builder\n   */\n  initializeDragDrop() {\n    if (!this.container) return;\n\n    // Setup draggable components\n    const draggables = this.container.querySelectorAll('.draggable-component');\n    draggables.forEach((draggable) => {\n      draggable.addEventListener('dragstart', this.handleDragStart.bind(this));\n      draggable.addEventListener('dragend', this.handleDragEnd.bind(this));\n    });\n\n    // Setup drop zones\n    const canvas = document.getElementById('workflow-canvas');\n    if (canvas) {\n      canvas.addEventListener('dragover', this.handleDragOver.bind(this));\n      canvas.addEventListener('drop', this.handleDrop.bind(this));\n    }\n  }\n\n  /**\n   * Handle drag start\n   */\n  handleDragStart(e) {\n    this.draggedElement = e.target;\n    e.target.classList.add('dragging');\n    e.dataTransfer.effectAllowed = 'copy';\n    e.dataTransfer.setData('componentType', e.target.dataset.type);\n  }\n\n  /**\n   * Handle drag end\n   */\n  handleDragEnd(e) {\n    e.target.classList.remove('dragging');\n    this.draggedElement = null;\n  }\n\n  /**\n   * Handle drag over\n   */\n  handleDragOver(e) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  }\n\n  /**\n   * Handle drop\n   */\n  handleDrop(e) {\n    e.preventDefault();\n    const componentType = e.dataTransfer.getData('componentType');\n    this.addWorkflowComponent(componentType, e);\n  }\n\n  /**\n   * Add workflow component to canvas\n   */\n  addWorkflowComponent(type, event) {\n    const canvas = document.getElementById('workflow-canvas');\n    if (!canvas) return;\n\n    const component = document.createElement('div');\n    component.className = 'workflow-component';\n    component.dataset.type = type;\n\n    const icons = {\n      trigger: '🎯',\n      action: '⚡',\n      condition: '🔀',\n      loop: '🔁',\n      parallel: '🔀',\n      sparc: '🎯',\n    };\n\n    component.innerHTML = `\n      <div class=\"component-header\">\n        <span class=\"component-icon\">${icons[type]}</span>\n        <span class=\"component-type\">${type}</span>\n      </div>\n      <div class=\"component-body\">\n        <input type=\"text\" placeholder=\"Configure ${type}...\" class=\"component-config\">\n      </div>\n      <div class=\"component-connectors\">\n        <div class=\"connector input\"></div>\n        <div class=\"connector output\"></div>\n      </div>\n    `;\n\n    canvas.appendChild(component);\n  }\n\n  /**\n   * Update SPARC mode description\n   */\n  updateSparcDescription() {\n    const modeSelect = document.getElementById('sparc-mode');\n    const descriptionEl = document.getElementById('sparc-description');\n\n    if (!modeSelect || !descriptionEl) return;\n\n    const descriptions = {\n      architect: '🏗️ Design system architecture and create technical specifications',\n      code: '💻 Implement features with clean, maintainable code',\n      tdd: '🧪 Write tests first, then implement functionality',\n      debug: '🐛 Identify and fix bugs systematically',\n      'security-review': '🔒 Analyze code for security vulnerabilities',\n      'docs-writer': '📝 Create comprehensive documentation',\n      integration: '🔗 Connect systems and APIs seamlessly',\n      monitoring: '📊 Setup monitoring and observability',\n      optimization: '⚡ Improve performance and efficiency',\n      devops: '🔧 Automate deployment and infrastructure',\n      mcp: '🎛️ Integrate MCP tools and protocols',\n      swarm: '🐝 Orchestrate multi-agent workflows',\n      ask: '❓ Interactive problem-solving assistant',\n      tutorial: '🎓 Create step-by-step tutorials',\n      generic: '🔨 Handle any development task',\n    };\n\n    const selectedMode = modeSelect.value;\n    descriptionEl.innerHTML = `<p>${descriptions[selectedMode] || 'Select a SPARC mode to see its description.'}</p>`;\n  }\n\n  /**\n   * Setup event handlers\n   */\n  setupEventHandlers() {\n    // Listen for tool results\n    this.eventBus.on('tool:executed', (data) => {\n      if (data.source === 'workflow-view') {\n        this.handleToolResult(data);\n      }\n    });\n\n    // Listen for real-time updates\n    this.eventBus.on('ui:real-time:update', () => {\n      this.updateStats();\n    });\n\n    // Listen for theme changes\n    this.eventBus.on('ui:theme:changed', (theme) => {\n      this.updateTheme(theme);\n    });\n\n    // Initialize drag and drop when view is rendered\n    this.eventBus.on('view:rendered', () => {\n      this.initializeDragDrop();\n    });\n  }\n\n  /**\n   * Handle tool execution results\n   */\n  handleToolResult(data) {\n    console.log(`✅ Tool ${data.tool} completed:`, data.result);\n\n    // Update UI based on result\n    if (this.container) {\n      this.updateUIWithResult(data.tool, data.result);\n    }\n  }\n\n  /**\n   * Update UI with tool results\n   */\n  updateUIWithResult(toolName, result) {\n    // Update activity log\n    const activityLog = document.getElementById('workflow-activity-log');\n    if (activityLog) {\n      const activityItem = document.createElement('div');\n      activityItem.className = 'activity-item';\n      activityItem.innerHTML = `\n        <span class=\"activity-time\">${new Date().toLocaleTimeString()}</span>\n        <span class=\"activity-desc\">${toolName} executed successfully</span>\n      `;\n      activityLog.insertBefore(activityItem, activityLog.firstChild);\n    }\n  }\n\n  /**\n   * Update statistics\n   */\n  updateStats() {\n    // Update workflow count\n    const workflowsStatEl = document.getElementById('workflows-stat');\n    if (workflowsStatEl) {\n      const valueEl = workflowsStatEl.querySelector('.stat-value');\n      if (valueEl) valueEl.textContent = this.workflows.size;\n    }\n\n    // Update pipeline count\n    const pipelinesStatEl = document.getElementById('pipelines-stat');\n    if (pipelinesStatEl) {\n      const valueEl = pipelinesStatEl.querySelector('.stat-value');\n      if (valueEl) valueEl.textContent = this.pipelines.size;\n    }\n\n    // Update automation rules count\n    const rulesStatEl = document.getElementById('rules-stat');\n    if (rulesStatEl) {\n      const valueEl = rulesStatEl.querySelector('.stat-value');\n      if (valueEl) valueEl.textContent = this.automationRules.size;\n    }\n\n    // Update scheduled tasks count\n    const scheduledStatEl = document.getElementById('scheduled-stat');\n    if (scheduledStatEl) {\n      const valueEl = scheduledStatEl.querySelector('.stat-value');\n      if (valueEl) valueEl.textContent = this.scheduledTasks.size;\n    }\n  }\n\n  /**\n   * Update theme\n   */\n  updateTheme(theme) {\n    if (this.container) {\n      this.container.classList.remove('theme-dark', 'theme-light');\n      this.container.classList.add(`theme-${theme}`);\n    }\n  }\n\n  /**\n   * Destroy view and cleanup\n   */\n  destroy() {\n    // Clear any intervals or timeouts\n    // Remove event listeners\n    // Clean up resources\n    console.log('🔄 Workflow & Automation View destroyed');\n  }\n}\n\n// Add workflow specific styles\nif (typeof document !== 'undefined') {\n  const workflowStyles = document.createElement('style');\n  workflowStyles.textContent = `\n    .workflow-overview {\n      padding: 20px;\n    }\n    \n    .stats-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n      margin-bottom: 24px;\n    }\n    \n    .stat-card {\n      display: flex;\n      align-items: center;\n      background: #2a2a2a;\n      padding: 16px;\n      border-radius: 8px;\n      border: 1px solid #444;\n    }\n    \n    .stat-icon {\n      font-size: 24px;\n      margin-right: 12px;\n    }\n    \n    .stat-value {\n      font-size: 24px;\n      font-weight: bold;\n      color: #00d4ff;\n    }\n    \n    .stat-label {\n      color: #888;\n      font-size: 14px;\n    }\n    \n    .workflow-tools {\n      margin: 24px 0;\n    }\n    \n    .tool-buttons {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n    \n    .workflow-btn {\n      padding: 10px 16px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      font-weight: 500;\n      transition: all 0.2s ease;\n    }\n    \n    .workflow-btn.primary {\n      background: #00d4ff;\n      color: #000;\n    }\n    \n    .workflow-btn.primary:hover {\n      background: #00b8e6;\n    }\n    \n    .workflow-btn.secondary {\n      background: #444;\n      color: #fff;\n    }\n    \n    .workflow-btn.secondary:hover {\n      background: #555;\n    }\n    \n    .workflow-btn.small {\n      padding: 6px 12px;\n      font-size: 14px;\n    }\n    \n    .workflow-btn.danger {\n      background: #ff4444;\n      color: #fff;\n    }\n    \n    .builder-container {\n      display: grid;\n      grid-template-columns: 200px 1fr 250px;\n      gap: 16px;\n      height: 500px;\n      margin: 20px 0;\n    }\n    \n    .builder-sidebar {\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 16px;\n      overflow-y: auto;\n    }\n    \n    .component-palette {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .draggable-component {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      background: #2a2a2a;\n      border: 1px solid #444;\n      border-radius: 6px;\n      padding: 8px 12px;\n      cursor: move;\n      transition: all 0.2s ease;\n    }\n    \n    .draggable-component:hover {\n      background: #333;\n      border-color: #00d4ff;\n    }\n    \n    .draggable-component.dragging {\n      opacity: 0.5;\n    }\n    \n    .builder-canvas {\n      background: #1a1a1a;\n      border: 2px dashed #444;\n      border-radius: 8px;\n      padding: 16px;\n      overflow: auto;\n      position: relative;\n    }\n    \n    .canvas-grid {\n      min-height: 100%;\n      position: relative;\n    }\n    \n    .drop-zone {\n      border: 2px dashed #666;\n      border-radius: 8px;\n      padding: 40px;\n      text-align: center;\n      color: #888;\n      transition: all 0.2s ease;\n    }\n    \n    .drop-zone.drag-over {\n      border-color: #00d4ff;\n      background: rgba(0, 212, 255, 0.1);\n    }\n    \n    .workflow-component {\n      background: #2a2a2a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 12px;\n      margin: 8px 0;\n      position: relative;\n    }\n    \n    .component-header {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 8px;\n    }\n    \n    .component-config {\n      width: 100%;\n      padding: 6px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n    }\n    \n    .builder-properties {\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 16px;\n      overflow-y: auto;\n    }\n    \n    .form-group {\n      margin-bottom: 16px;\n    }\n    \n    .form-group label {\n      display: block;\n      margin-bottom: 4px;\n      color: #fff;\n      font-weight: 500;\n    }\n    \n    .form-group input,\n    .form-group select,\n    .form-group textarea {\n      width: 100%;\n      padding: 8px 12px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n    }\n    \n    .form-group textarea {\n      height: 100px;\n      resize: vertical;\n    }\n    \n    .sparc-description {\n      background: #2a2a2a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 16px;\n      margin: 16px 0;\n    }\n    \n    .boomerang-phases {\n      display: flex;\n      align-items: center;\n      gap: 16px;\n      margin: 20px 0;\n      padding: 20px;\n      background: #2a2a2a;\n      border-radius: 8px;\n      overflow-x: auto;\n    }\n    \n    .phase-item {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 8px;\n    }\n    \n    .phase-number {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 32px;\n      height: 32px;\n      background: #00d4ff;\n      color: #000;\n      border-radius: 50%;\n      font-weight: bold;\n    }\n    \n    .phase-arrow {\n      font-size: 24px;\n      color: #00d4ff;\n    }\n    \n    .phase-mode {\n      padding: 6px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n    }\n    \n    .pipeline-stage {\n      background: #2a2a2a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 12px;\n      margin-bottom: 12px;\n    }\n    \n    .pipeline-stage input {\n      width: 100%;\n      margin-bottom: 8px;\n      padding: 6px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n    }\n    \n    .pipeline-stage textarea {\n      width: 100%;\n      height: 60px;\n      padding: 6px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n      resize: vertical;\n    }\n    \n    .monitor-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 16px;\n    }\n    \n    .workflows-grid,\n    .rules-grid,\n    .tasks-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 16px;\n    }\n    \n    .workflow-card,\n    .rule-card {\n      background: #2a2a2a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 16px;\n    }\n    \n    .workflow-header,\n    .rule-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 12px;\n    }\n    \n    .workflow-status,\n    .rule-status {\n      font-size: 12px;\n      padding: 4px 8px;\n      background: #00d4ff;\n      color: #000;\n      border-radius: 4px;\n    }\n    \n    .activity-list,\n    .history-list {\n      max-height: 300px;\n      overflow-y: auto;\n    }\n    \n    .activity-item,\n    .history-item {\n      display: flex;\n      gap: 12px;\n      padding: 8px;\n      border-bottom: 1px solid #333;\n    }\n    \n    .activity-time,\n    .history-time {\n      color: #888;\n      font-size: 14px;\n    }\n    \n    .event-checkboxes {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .event-checkboxes label {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      color: #fff;\n    }\n    \n    .parallel-tasks {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .parallel-task-item {\n      display: flex;\n      gap: 8px;\n    }\n    \n    .task-input {\n      flex: 1;\n      padding: 6px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n    }\n    \n    .task-type {\n      padding: 6px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n    }\n  `;\n  document.head.appendChild(workflowStyles);\n}\n\nexport default WorkflowAutomationView;\nexport { WorkflowAutomationView };\n"],"names":["WorkflowAutomationView","container","eventBus","viewConfig","componentLibrary","workflows","Map","pipelines","automationRules","scheduledTasks","currentTab","isInitialized","draggedElement","dropZones","Set","initialize","emit","library","setupEventHandlers","render","params","innerHTML","createWorkflowInterface","renderTerminalMode","tabs","label","content","createOverviewTab","createWorkflowsTab","createAutomationTab","createPipelinesTab","createSchedulerTab","createSparcModesTab","createBatchTab","tabContainer","getComponent","appendChild","element","createFallbackInterface","console","log","repeat","tool","quickAction","toolName","source","handleWorkflowCreate","handleAutomationSetup","handleSparcMode","error","workflowParams","name","steps","triggers","listEl","document","getElementById","workflowCard","createWorkflowCard","automationParams","rules","ruleCard","createRuleCard","sparcParams","mode","task_description","options","historyEl","historyItem","createSparcHistoryItem","workflow","card","createElement","className","length","rule","execution","item","Date","toLocaleTimeString","substring","initializeDragDrop","draggables","querySelectorAll","forEach","draggable","addEventListener","handleDragStart","bind","handleDragEnd","canvas","handleDragOver","handleDrop","e","target","classList","add","dataTransfer","effectAllowed","setData","dataset","type","remove","preventDefault","dropEffect","componentType","getData","addWorkflowComponent","event","component","icons","trigger","action","condition","loop","parallel","sparc","updateSparcDescription","modeSelect","descriptionEl","descriptions","architect","code","tdd","debug","integration","monitoring","optimization","devops","mcp","swarm","ask","tutorial","generic","selectedMode","value","on","data","handleToolResult","updateStats","theme","updateTheme","result","updateUIWithResult","activityLog","activityItem","insertBefore","firstChild","workflowsStatEl","valueEl","querySelector","textContent","size","pipelinesStatEl","rulesStatEl","scheduledStatEl","destroy","workflowStyles","head"],"mappings":"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"}