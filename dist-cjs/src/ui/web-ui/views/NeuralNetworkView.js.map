{"version":3,"sources":["../../../../../src/ui/web-ui/views/NeuralNetworkView.js"],"sourcesContent":["/**\n * Neural Network View - Interface for neural network operations\n * Handles training, prediction, pattern analysis, and model management\n */\n\nexport default class NeuralNetworkView {\n  constructor(container, eventBus, viewConfig) {\n    this.container = container;\n    this.eventBus = eventBus;\n    this.viewConfig = viewConfig;\n    this.componentLibrary = null;\n    this.models = new Map();\n    this.trainingJobs = new Map();\n    this.currentTab = 'overview';\n    this.isInitialized = false;\n  }\n\n  /**\n   * Initialize the neural network view\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    // Get component library from event bus\n    this.eventBus.emit('component-library:get', (library) => {\n      this.componentLibrary = library;\n    });\n\n    // Setup event handlers\n    this.setupEventHandlers();\n\n    this.isInitialized = true;\n  }\n\n  /**\n   * Render the view with given parameters\n   */\n  async render(params = {}) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.createNeuralNetworkInterface();\n    } else {\n      // Terminal mode\n      this.renderTerminalMode(params);\n    }\n  }\n\n  /**\n   * Create neural network interface for browser\n   */\n  createNeuralNetworkInterface() {\n    // Create tab container\n    const tabs = [\n      { label: '📊 Overview', content: this.createOverviewTab() },\n      { label: '🧠 Training', content: this.createTrainingTab() },\n      { label: '🔮 Prediction', content: this.createPredictionTab() },\n      { label: '🎯 Patterns', content: this.createPatternsTab() },\n      { label: '💾 Models', content: this.createModelsTab() },\n      { label: '⚡ Optimization', content: this.createOptimizationTab() },\n    ];\n\n    if (this.componentLibrary) {\n      const tabContainer = this.componentLibrary.getComponent('TabContainer')(tabs);\n      this.container.appendChild(tabContainer.element);\n    } else {\n      // Fallback without component library\n      this.createFallbackInterface();\n    }\n  }\n\n  /**\n   * Create overview tab content\n   */\n  createOverviewTab() {\n    return `\n      <div class=\"neural-overview\">\n        <div class=\"stats-grid\">\n          <div id=\"models-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">🧠</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">0</div>\n              <div class=\"stat-label\">Models</div>\n            </div>\n          </div>\n          <div id=\"training-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">⚡</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">0</div>\n              <div class=\"stat-label\">Training Jobs</div>\n            </div>\n          </div>\n          <div id=\"accuracy-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">🎯</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">--</div>\n              <div class=\"stat-label\">Avg Accuracy</div>\n            </div>\n          </div>\n          <div id=\"wasm-stat\" class=\"stat-card\">\n            <div class=\"stat-icon\">🚀</div>\n            <div class=\"stat-content\">\n              <div class=\"stat-value\">--</div>\n              <div class=\"stat-label\">WASM Status</div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"neural-tools\">\n          <h3>🔧 Quick Actions</h3>\n          <div class=\"tool-buttons\">\n            <button onclick=\"this.startQuickTrain()\" class=\"neural-btn primary\">\n              🧠 Quick Train\n            </button>\n            <button onclick=\"this.checkModels()\" class=\"neural-btn secondary\">\n              📋 List Models\n            </button>\n            <button onclick=\"this.runPrediction()\" class=\"neural-btn secondary\">\n              🔮 Test Prediction\n            </button>\n            <button onclick=\"this.analyzePatterns()\" class=\"neural-btn secondary\">\n              🎯 Analyze Patterns\n            </button>\n          </div>\n        </div>\n\n        <div class=\"recent-activity\">\n          <h3>📈 Recent Activity</h3>\n          <div id=\"activity-log\" class=\"activity-list\">\n            <div class=\"activity-item\">\n              <span class=\"activity-time\">--:--</span>\n              <span class=\"activity-desc\">No recent activity</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create training tab content\n   */\n  createTrainingTab() {\n    return `\n      <div class=\"neural-training\">\n        <div class=\"training-form\">\n          <h3>🧠 Neural Network Training</h3>\n          \n          <div class=\"form-group\">\n            <label>Pattern Type:</label>\n            <select id=\"pattern-type\">\n              <option value=\"coordination\">Coordination</option>\n              <option value=\"optimization\">Optimization</option>\n              <option value=\"prediction\">Prediction</option>\n            </select>\n          </div>\n          \n          <div class=\"form-group\">\n            <label>Training Data:</label>\n            <textarea id=\"training-data\" placeholder=\"Enter training data or file path...\"></textarea>\n          </div>\n          \n          <div class=\"form-group\">\n            <label>Epochs:</label>\n            <input type=\"number\" id=\"epochs\" value=\"50\" min=\"1\" max=\"1000\">\n          </div>\n          \n          <div class=\"form-group\">\n            <label>Learning Rate:</label>\n            <input type=\"number\" id=\"learning-rate\" value=\"0.001\" step=\"0.001\" min=\"0.0001\" max=\"1\">\n          </div>\n          \n          <button onclick=\"this.startTraining()\" class=\"neural-btn primary\">\n            ⚡ Start Training\n          </button>\n        </div>\n        \n        <div class=\"training-progress\">\n          <h3>📊 Training Progress</h3>\n          <div id=\"training-status\" class=\"status-display\">\n            <div class=\"status-idle\">No training in progress</div>\n          </div>\n          \n          <div id=\"training-chart\" class=\"chart-container\">\n            <!-- Training progress chart will be inserted here -->\n          </div>\n        </div>\n        \n        <div class=\"training-history\">\n          <h3>📋 Training History</h3>\n          <div id=\"training-history-list\" class=\"history-list\">\n            <!-- Training history will be populated here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create prediction tab content\n   */\n  createPredictionTab() {\n    return `\n      <div class=\"neural-prediction\">\n        <div class=\"prediction-form\">\n          <h3>🔮 AI Prediction</h3>\n          \n          <div class=\"form-group\">\n            <label>Model:</label>\n            <select id=\"prediction-model\">\n              <option value=\"\">Select a model...</option>\n            </select>\n          </div>\n          \n          <div class=\"form-group\">\n            <label>Input Data:</label>\n            <textarea id=\"prediction-input\" placeholder=\"Enter input data for prediction...\"></textarea>\n          </div>\n          \n          <button onclick=\"this.runPrediction()\" class=\"neural-btn primary\">\n            🔮 Run Prediction\n          </button>\n        </div>\n        \n        <div class=\"prediction-results\">\n          <h3>📊 Prediction Results</h3>\n          <div id=\"prediction-output\" class=\"results-display\">\n            <div class=\"no-results\">No predictions yet</div>\n          </div>\n          \n          <div class=\"confidence-display\">\n            <h4>🎯 Confidence Score</h4>\n            <div id=\"confidence-bar\" class=\"confidence-bar\">\n              <div class=\"confidence-fill\" style=\"width: 0%\"></div>\n              <span class=\"confidence-text\">0%</span>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"prediction-history\">\n          <h3>📋 Recent Predictions</h3>\n          <div id=\"prediction-history-list\" class=\"history-list\">\n            <!-- Prediction history will be populated here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create patterns tab content\n   */\n  createPatternsTab() {\n    return `\n      <div class=\"neural-patterns\">\n        <div class=\"pattern-analysis\">\n          <h3>🎯 Pattern Analysis</h3>\n          \n          <div class=\"form-group\">\n            <label>Analysis Type:</label>\n            <select id=\"analysis-type\">\n              <option value=\"analyze\">Analyze</option>\n              <option value=\"learn\">Learn</option>\n              <option value=\"predict\">Predict</option>\n            </select>\n          </div>\n          \n          <div class=\"form-group\">\n            <label>Operation:</label>\n            <input type=\"text\" id=\"pattern-operation\" placeholder=\"Describe the operation...\">\n          </div>\n          \n          <div class=\"form-group\">\n            <label>Outcome:</label>\n            <input type=\"text\" id=\"pattern-outcome\" placeholder=\"Expected or actual outcome...\">\n          </div>\n          \n          <button onclick=\"this.analyzePattern()\" class=\"neural-btn primary\">\n            🎯 Analyze Pattern\n          </button>\n        </div>\n        \n        <div class=\"pattern-results\">\n          <h3>📊 Pattern Insights</h3>\n          <div id=\"pattern-insights\" class=\"insights-display\">\n            <div class=\"no-insights\">No pattern analysis yet</div>\n          </div>\n        </div>\n        \n        <div class=\"cognitive-analysis\">\n          <h3>🧠 Cognitive Analysis</h3>\n          \n          <div class=\"form-group\">\n            <label>Behavior to Analyze:</label>\n            <textarea id=\"behavior-input\" placeholder=\"Describe the behavior or process to analyze...\"></textarea>\n          </div>\n          \n          <button onclick=\"this.analyzeCognitive()\" class=\"neural-btn secondary\">\n            🧠 Analyze Behavior\n          </button>\n          \n          <div id=\"cognitive-results\" class=\"cognitive-display\">\n            <!-- Cognitive analysis results will appear here -->\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create models tab content\n   */\n  createModelsTab() {\n    return `\n      <div class=\"neural-models\">\n        <div class=\"model-management\">\n          <h3>💾 Model Management</h3>\n          \n          <div class=\"model-actions\">\n            <button onclick=\"this.loadModel()\" class=\"neural-btn primary\">\n              📥 Load Model\n            </button>\n            <button onclick=\"this.saveCurrentModel()\" class=\"neural-btn secondary\">\n              💾 Save Model\n            </button>\n            <button onclick=\"this.createEnsemble()\" class=\"neural-btn secondary\">\n              🔗 Create Ensemble\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"model-list\">\n          <h3>📋 Available Models</h3>\n          <div id=\"models-list\" class=\"models-grid\">\n            <!-- Model cards will be populated here -->\n          </div>\n        </div>\n        \n        <div class=\"model-operations\">\n          <h3>🔧 Model Operations</h3>\n          \n          <div class=\"operation-grid\">\n            <div class=\"operation-card\">\n              <h4>🗜️ Compress Model</h4>\n              <p>Reduce model size for faster inference</p>\n              <button onclick=\"this.compressModel()\" class=\"neural-btn\">Compress</button>\n            </div>\n            \n            <div class=\"operation-card\">\n              <h4>🔄 Transfer Learning</h4>\n              <p>Adapt model to new domain</p>\n              <button onclick=\"this.transferLearn()\" class=\"neural-btn\">Transfer</button>\n            </div>\n            \n            <div class=\"operation-card\">\n              <h4>📊 Model Explain</h4>\n              <p>Get AI explainability insights</p>\n              <button onclick=\"this.explainModel()\" class=\"neural-btn\">Explain</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create optimization tab content\n   */\n  createOptimizationTab() {\n    return `\n      <div class=\"neural-optimization\">\n        <div class=\"wasm-optimization\">\n          <h3>🚀 WASM SIMD Optimization</h3>\n          \n          <div class=\"optimization-status\">\n            <div id=\"wasm-status\" class=\"status-card\">\n              <div class=\"status-icon\">🚀</div>\n              <div class=\"status-text\">Checking WASM status...</div>\n            </div>\n          </div>\n          \n          <div class=\"optimization-controls\">\n            <button onclick=\"this.optimizeWasm()\" class=\"neural-btn primary\">\n              ⚡ Optimize WASM\n            </button>\n            <button onclick=\"this.checkWasmStatus()\" class=\"neural-btn secondary\">\n              📊 Check Status\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"inference-optimization\">\n          <h3>🔮 Inference Optimization</h3>\n          \n          <div class=\"form-group\">\n            <label>Model for Inference:</label>\n            <select id=\"inference-model\">\n              <option value=\"\">Select model...</option>\n            </select>\n          </div>\n          \n          <div class=\"form-group\">\n            <label>Test Data:</label>\n            <textarea id=\"inference-data\" placeholder=\"Enter test data array...\"></textarea>\n          </div>\n          \n          <button onclick=\"this.runInference()\" class=\"neural-btn primary\">\n            🔮 Run Inference\n          </button>\n          \n          <div id=\"inference-results\" class=\"inference-display\">\n            <!-- Inference results will appear here -->\n          </div>\n        </div>\n        \n        <div class=\"performance-metrics\">\n          <h3>📈 Performance Metrics</h3>\n          \n          <div class=\"metrics-grid\">\n            <div class=\"metric-card\">\n              <div class=\"metric-label\">Inference Speed</div>\n              <div id=\"inference-speed\" class=\"metric-value\">-- ms</div>\n            </div>\n            \n            <div class=\"metric-card\">\n              <div class=\"metric-label\">Memory Usage</div>\n              <div id=\"memory-usage\" class=\"metric-value\">-- MB</div>\n            </div>\n            \n            <div class=\"metric-card\">\n              <div class=\"metric-label\">WASM Speedup</div>\n              <div id=\"wasm-speedup\" class=\"metric-value\">--x</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create fallback interface without component library\n   */\n  createFallbackInterface() {\n    this.container.innerHTML = `\n      <div class=\"neural-network-fallback\">\n        <h2>🧠 Neural Network Operations</h2>\n        <p>Advanced neural network interface with 15 integrated tools</p>\n        \n        <div class=\"tool-sections\">\n          <div class=\"tool-section\">\n            <h3>🧠 Training & Models</h3>\n            <button onclick=\"this.quickAction('neural_train')\">Train Neural Network</button>\n            <button onclick=\"this.quickAction('neural_status')\">Check Status</button>\n            <button onclick=\"this.quickAction('model_save')\">Save Model</button>\n            <button onclick=\"this.quickAction('model_load')\">Load Model</button>\n          </div>\n          \n          <div class=\"tool-section\">\n            <h3>🔮 Prediction & Analysis</h3>\n            <button onclick=\"this.quickAction('neural_predict')\">Make Prediction</button>\n            <button onclick=\"this.quickAction('neural_patterns')\">Analyze Patterns</button>\n            <button onclick=\"this.quickAction('cognitive_analyze')\">Cognitive Analysis</button>\n            <button onclick=\"this.quickAction('pattern_recognize')\">Pattern Recognition</button>\n          </div>\n          \n          <div class=\"tool-section\">\n            <h3>⚡ Optimization</h3>\n            <button onclick=\"this.quickAction('wasm_optimize')\">WASM Optimization</button>\n            <button onclick=\"this.quickAction('neural_compress')\">Compress Model</button>\n            <button onclick=\"this.quickAction('inference_run')\">Run Inference</button>\n            <button onclick=\"this.quickAction('neural_explain')\">Explain Model</button>\n          </div>\n        </div>\n        \n        <div id=\"neural-output\" class=\"output-area\">\n          <h3>📊 Output</h3>\n          <pre id=\"output-content\">Ready for neural operations...</pre>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render terminal mode\n   */\n  renderTerminalMode(params) {\n    console.log('\\n🧠 Neural Network Operations');\n    console.log('═'.repeat(50));\n    console.log('Available Tools (15):');\n    console.log('  🧠 neural_train     - Train neural patterns');\n    console.log('  🔮 neural_predict   - Make AI predictions');\n    console.log('  📊 neural_status    - Check model status');\n    console.log('  🎯 neural_patterns  - Analyze patterns');\n    console.log('  💾 model_save       - Save trained models');\n    console.log('  📥 model_load       - Load models');\n    console.log('  🎯 pattern_recognize- Pattern recognition');\n    console.log('  🧠 cognitive_analyze- Behavior analysis');\n    console.log('  🔄 learning_adapt   - Adaptive learning');\n    console.log('  🗜️ neural_compress  - Model compression');\n    console.log('  🔗 ensemble_create  - Model ensembles');\n    console.log('  🔄 transfer_learn   - Transfer learning');\n    console.log('  📊 neural_explain   - AI explainability');\n    console.log('  🚀 wasm_optimize    - WASM optimization');\n    console.log('  🔮 inference_run    - Neural inference');\n    console.log('═'.repeat(50));\n\n    if (params.tool) {\n      console.log(`\\n🔧 Executing: ${params.tool}`);\n      this.quickAction(params.tool, params);\n    }\n  }\n\n  /**\n   * Quick action handler\n   */\n  async quickAction(toolName, params = {}) {\n    try {\n      console.log(`🔧 Executing ${toolName}...`);\n\n      // Emit tool execution event\n      this.eventBus.emit('tool:execute', {\n        tool: toolName,\n        params: params,\n        source: 'neural-view',\n      });\n\n      // Handle specific tool actions\n      switch (toolName) {\n        case 'neural_train':\n          await this.handleTraining(params);\n          break;\n        case 'neural_predict':\n          await this.handlePrediction(params);\n          break;\n        case 'neural_patterns':\n          await this.handlePatternAnalysis(params);\n          break;\n        default:\n          console.log(`Tool ${toolName} executed`);\n      }\n    } catch (error) {\n      console.error(`❌ Error executing ${toolName}:`, error);\n    }\n  }\n\n  /**\n   * Handle training operations\n   */\n  async handleTraining(params) {\n    const trainingParams = {\n      pattern_type: params.pattern_type || 'coordination',\n      training_data: params.training_data || 'sample_data',\n      epochs: params.epochs || 50,\n    };\n\n    console.log('🧠 Training neural network with parameters:', trainingParams);\n\n    // Update UI if in browser mode\n    if (this.container) {\n      const statusEl = document.getElementById('training-status');\n      if (statusEl) {\n        statusEl.innerHTML = '<div class=\"status-training\">Training in progress...</div>';\n      }\n    }\n  }\n\n  /**\n   * Handle prediction operations\n   */\n  async handlePrediction(params) {\n    const predictionParams = {\n      modelId: params.modelId || 'default_model',\n      input: params.input || 'sample_input',\n    };\n\n    console.log('🔮 Running prediction with parameters:', predictionParams);\n\n    // Update UI if in browser mode\n    if (this.container) {\n      const outputEl = document.getElementById('prediction-output');\n      if (outputEl) {\n        outputEl.innerHTML = '<div class=\"prediction-result\">Prediction in progress...</div>';\n      }\n    }\n  }\n\n  /**\n   * Handle pattern analysis\n   */\n  async handlePatternAnalysis(params) {\n    const analysisParams = {\n      action: params.action || 'analyze',\n      operation: params.operation || 'sample_operation',\n      outcome: params.outcome || 'sample_outcome',\n    };\n\n    console.log('🎯 Analyzing patterns with parameters:', analysisParams);\n\n    // Update UI if in browser mode\n    if (this.container) {\n      const insightsEl = document.getElementById('pattern-insights');\n      if (insightsEl) {\n        insightsEl.innerHTML = '<div class=\"analysis-result\">Pattern analysis in progress...</div>';\n      }\n    }\n  }\n\n  /**\n   * Setup event handlers\n   */\n  setupEventHandlers() {\n    // Listen for tool results\n    this.eventBus.on('tool:executed', (data) => {\n      if (data.source === 'neural-view') {\n        this.handleToolResult(data);\n      }\n    });\n\n    // Listen for real-time updates\n    this.eventBus.on('ui:real-time:update', () => {\n      this.updateStats();\n    });\n\n    // Listen for theme changes\n    this.eventBus.on('ui:theme:changed', (theme) => {\n      this.updateTheme(theme);\n    });\n  }\n\n  /**\n   * Handle tool execution results\n   */\n  handleToolResult(data) {\n    console.log(`✅ Tool ${data.tool} completed:`, data.result);\n\n    // Update UI based on result\n    if (this.container) {\n      this.updateUIWithResult(data.tool, data.result);\n    }\n  }\n\n  /**\n   * Update UI with tool results\n   */\n  updateUIWithResult(toolName, result) {\n    // Update based on specific tool\n    switch (toolName) {\n      case 'neural_train':\n        this.updateTrainingResults(result);\n        break;\n      case 'neural_predict':\n        this.updatePredictionResults(result);\n        break;\n      case 'neural_patterns':\n        this.updatePatternResults(result);\n        break;\n    }\n  }\n\n  /**\n   * Update training results in UI\n   */\n  updateTrainingResults(result) {\n    const statusEl = document.getElementById('training-status');\n    if (statusEl) {\n      statusEl.innerHTML = `\n        <div class=\"status-complete\">\n          ✅ Training completed!\n          <div class=\"training-metrics\">\n            <div>Epochs: ${result.epochs}</div>\n            <div>Accuracy: ${result.accuracy}</div>\n            <div>Loss: ${result.loss}</div>\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Update prediction results in UI\n   */\n  updatePredictionResults(result) {\n    const outputEl = document.getElementById('prediction-output');\n    if (outputEl) {\n      outputEl.innerHTML = `\n        <div class=\"prediction-complete\">\n          <div class=\"prediction-value\">${result.prediction}</div>\n          <div class=\"prediction-confidence\">Confidence: ${result.confidence}</div>\n        </div>\n      `;\n    }\n\n    // Update confidence bar\n    const confidenceBar = document.querySelector('.confidence-fill');\n    const confidenceText = document.querySelector('.confidence-text');\n    if (confidenceBar && confidenceText) {\n      const confidence = Math.round(result.confidence * 100);\n      confidenceBar.style.width = `${confidence}%`;\n      confidenceText.textContent = `${confidence}%`;\n    }\n  }\n\n  /**\n   * Update pattern analysis results\n   */\n  updatePatternResults(result) {\n    const insightsEl = document.getElementById('pattern-insights');\n    if (insightsEl) {\n      insightsEl.innerHTML = `\n        <div class=\"insights-complete\">\n          <div class=\"insights-title\">Pattern Analysis Complete</div>\n          <div class=\"insights-content\">${result.insights}</div>\n          <div class=\"patterns-found\">\n            Patterns: ${result.patterns ? result.patterns.join(', ') : 'None'}\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Update statistics\n   */\n  updateStats() {\n    // Update model count\n    const modelsStatEl = document.getElementById('models-stat');\n    if (modelsStatEl) {\n      const valueEl = modelsStatEl.querySelector('.stat-value');\n      if (valueEl) valueEl.textContent = this.models.size;\n    }\n\n    // Update training jobs count\n    const trainingStatEl = document.getElementById('training-stat');\n    if (trainingStatEl) {\n      const valueEl = trainingStatEl.querySelector('.stat-value');\n      if (valueEl) valueEl.textContent = this.trainingJobs.size;\n    }\n  }\n\n  /**\n   * Update theme\n   */\n  updateTheme(theme) {\n    if (this.container) {\n      this.container.classList.remove('theme-dark', 'theme-light');\n      this.container.classList.add(`theme-${theme}`);\n    }\n  }\n\n  /**\n   * Destroy view and cleanup\n   */\n  destroy() {\n    // Clear any intervals or timeouts\n    // Remove event listeners\n    // Clean up resources\n    console.log('🧠 Neural Network View destroyed');\n  }\n}\n\n// Add neural network specific styles\nif (typeof document !== 'undefined') {\n  const neuralStyles = document.createElement('style');\n  neuralStyles.textContent = `\n    .neural-overview {\n      padding: 20px;\n    }\n    \n    .stats-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n      margin-bottom: 24px;\n    }\n    \n    .stat-card {\n      display: flex;\n      align-items: center;\n      background: #2a2a2a;\n      padding: 16px;\n      border-radius: 8px;\n      border: 1px solid #444;\n    }\n    \n    .stat-icon {\n      font-size: 24px;\n      margin-right: 12px;\n    }\n    \n    .stat-value {\n      font-size: 24px;\n      font-weight: bold;\n      color: #00d4ff;\n    }\n    \n    .stat-label {\n      color: #888;\n      font-size: 14px;\n    }\n    \n    .neural-tools {\n      margin: 24px 0;\n    }\n    \n    .tool-buttons {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n    \n    .neural-btn {\n      padding: 10px 16px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      font-weight: 500;\n      transition: all 0.2s ease;\n    }\n    \n    .neural-btn.primary {\n      background: #00d4ff;\n      color: #000;\n    }\n    \n    .neural-btn.primary:hover {\n      background: #00b8e6;\n    }\n    \n    .neural-btn.secondary {\n      background: #444;\n      color: #fff;\n    }\n    \n    .neural-btn.secondary:hover {\n      background: #555;\n    }\n    \n    .form-group {\n      margin-bottom: 16px;\n    }\n    \n    .form-group label {\n      display: block;\n      margin-bottom: 4px;\n      color: #fff;\n      font-weight: 500;\n    }\n    \n    .form-group input,\n    .form-group select,\n    .form-group textarea {\n      width: 100%;\n      padding: 8px 12px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      color: #fff;\n    }\n    \n    .form-group textarea {\n      height: 100px;\n      resize: vertical;\n    }\n    \n    .confidence-bar {\n      position: relative;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 4px;\n      height: 24px;\n      overflow: hidden;\n    }\n    \n    .confidence-fill {\n      height: 100%;\n      background: linear-gradient(90deg, #00d4ff, #0099cc);\n      transition: width 0.3s ease;\n    }\n    \n    .confidence-text {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      color: #fff;\n      font-size: 12px;\n      font-weight: bold;\n    }\n    \n    .operation-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 16px;\n    }\n    \n    .operation-card {\n      background: #2a2a2a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 16px;\n    }\n    \n    .operation-card h4 {\n      margin: 0 0 8px 0;\n      color: #00d4ff;\n    }\n    \n    .operation-card p {\n      margin: 0 0 12px 0;\n      color: #888;\n      font-size: 14px;\n    }\n  `;\n  document.head.appendChild(neuralStyles);\n}\n"],"names":["NeuralNetworkView","container","eventBus","viewConfig","componentLibrary","models","Map","trainingJobs","currentTab","isInitialized","initialize","emit","library","setupEventHandlers","render","params","innerHTML","createNeuralNetworkInterface","renderTerminalMode","tabs","label","content","createOverviewTab","createTrainingTab","createPredictionTab","createPatternsTab","createModelsTab","createOptimizationTab","tabContainer","getComponent","appendChild","element","createFallbackInterface","console","log","repeat","tool","quickAction","toolName","source","handleTraining","handlePrediction","handlePatternAnalysis","error","trainingParams","pattern_type","training_data","epochs","statusEl","document","getElementById","predictionParams","modelId","input","outputEl","analysisParams","action","operation","outcome","insightsEl","on","data","handleToolResult","updateStats","theme","updateTheme","result","updateUIWithResult","updateTrainingResults","updatePredictionResults","updatePatternResults","accuracy","loss","prediction","confidence","confidenceBar","querySelector","confidenceText","Math","round","style","width","textContent","insights","patterns","join","modelsStatEl","valueEl","size","trainingStatEl","classList","remove","add","destroy","neuralStyles","createElement","head"],"mappings":"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"}