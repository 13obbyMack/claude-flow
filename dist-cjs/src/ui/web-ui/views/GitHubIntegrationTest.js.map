{"version":3,"sources":["../../../../../src/ui/web-ui/views/GitHubIntegrationTest.js"],"sourcesContent":["/**\n * GitHub Integration View Test\n * Demonstrates integration with MCP tools\n */\n\n// Example of how the GitHub view interacts with MCP tools\nexport const GitHubViewMCPIntegration = {\n  // Tool mappings\n  tools: {\n    github_repo_analyze: {\n      handler: async (params) => {\n        console.log('üîç Analyzing repository:', params.repo);\n        return {\n          code_quality: '85%',\n          security: '92%',\n          performance: '78%',\n          details: 'Repository analysis complete',\n        };\n      },\n    },\n\n    github_pr_manage: {\n      handler: async (params) => {\n        console.log('üîÑ Managing PR:', params);\n        return {\n          success: true,\n          action: params.action,\n          pr_number: params.pr_number,\n        };\n      },\n    },\n\n    github_issue_track: {\n      handler: async (params) => {\n        console.log('üìã Tracking issues:', params);\n        return {\n          open: 15,\n          in_progress: 8,\n          closed: 42,\n        };\n      },\n    },\n\n    github_release_coord: {\n      handler: async (params) => {\n        console.log('üöÄ Coordinating release:', params);\n        return {\n          version: params.version,\n          status: 'planned',\n          date: params.date,\n        };\n      },\n    },\n\n    github_workflow_auto: {\n      handler: async (params) => {\n        console.log('ü§ñ Automating workflow:', params);\n        return {\n          workflow: params.workflow_name,\n          status: 'created',\n          trigger: params.trigger,\n        };\n      },\n    },\n\n    github_code_review: {\n      handler: async (params) => {\n        console.log('üîç Running code review:', params);\n        return {\n          score: '8.5/10',\n          issues: 3,\n          suggestions: 7,\n          findings: [\n            { type: 'security', description: 'Check input validation' },\n            { type: 'performance', description: 'Consider caching results' },\n            { type: 'style', description: 'Inconsistent naming convention' },\n          ],\n        };\n      },\n    },\n\n    github_sync_coord: {\n      handler: async (params) => {\n        console.log('üîÑ Syncing repositories:', params);\n        return {\n          synced: params.repos.length,\n          status: 'complete',\n        };\n      },\n    },\n\n    github_metrics: {\n      handler: async (params) => {\n        console.log('üìä Fetching metrics:', params);\n        return {\n          commits: { total: 1542, week: 87 },\n          pull_requests: { merged: 234, avg_time: '2.3 days' },\n          issues: { resolved: 456, avg_time: '3.5 days' },\n          contributors: { active: 12, new: 3 },\n        };\n      },\n    },\n  },\n\n  // Example usage\n  testIntegration: async () => {\n    console.log('üß™ Testing GitHub View MCP Integration');\n\n    // Test repository analysis\n    const analysisResult = await GitHubViewMCPIntegration.tools.github_repo_analyze.handler({\n      repo: 'ruvnet/claude-flow',\n      analysis_type: 'code_quality',\n    });\n    console.log('Repository Analysis Result:', analysisResult);\n\n    // Test PR management\n    const prResult = await GitHubViewMCPIntegration.tools.github_pr_manage.handler({\n      repo: 'ruvnet/claude-flow',\n      action: 'review',\n      pr_number: 123,\n    });\n    console.log('PR Management Result:', prResult);\n\n    // Test metrics\n    const metricsResult = await GitHubViewMCPIntegration.tools.github_metrics.handler({\n      repo: 'ruvnet/claude-flow',\n    });\n    console.log('Metrics Result:', metricsResult);\n  },\n};\n\n// Integration with EventBus for real MCP tools\nexport class GitHubMCPBridge {\n  constructor(eventBus) {\n    this.eventBus = eventBus;\n    this.setupHandlers();\n  }\n\n  setupHandlers() {\n    // Listen for tool execution requests from the view\n    this.eventBus.on('tool:execute', async (data) => {\n      if (data.source === 'github-view' && data.tool.startsWith('github_')) {\n        try {\n          // In real implementation, this would call the actual MCP tool\n          // For now, we use the test handlers\n          const handler = GitHubViewMCPIntegration.tools[data.tool]?.handler;\n          if (handler) {\n            const result = await handler(data.params);\n\n            // Emit result back to the view\n            this.eventBus.emit('tool:executed', {\n              tool: data.tool,\n              result: result,\n              source: 'github-view',\n            });\n          }\n        } catch (error) {\n          this.eventBus.emit('tool:error', {\n            tool: data.tool,\n            error: error.message,\n            source: 'github-view',\n          });\n        }\n      }\n    });\n  }\n}\n\n// Export test function\nexport function runGitHubViewTest() {\n  console.log('\\nüêô GitHub Integration View Test');\n  console.log('‚ïê'.repeat(50));\n\n  // Test all tools\n  GitHubViewMCPIntegration.testIntegration();\n\n  console.log('\\n‚úÖ GitHub View is ready for integration!');\n  console.log('The view supports all 8 GitHub MCP tools:');\n  Object.keys(GitHubViewMCPIntegration.tools).forEach((tool) => {\n    console.log(`  - ${tool}`);\n  });\n\n  console.log('\\nüìã Features implemented:');\n  console.log('  - Repository browser and analysis');\n  console.log('  - PR/Issue management dashboard');\n  console.log('  - Release coordination planning');\n  console.log('  - Workflow automation builder');\n  console.log('  - Code review automation');\n  console.log('  - Repository metrics dashboard');\n  console.log('  - Multi-repo sync coordination');\n  console.log('‚ïê'.repeat(50));\n}\n\n// Run test if executed directly\nif (typeof process !== 'undefined' && process.argv[1] === import.meta.url) {\n  runGitHubViewTest();\n}\n"],"names":["GitHubViewMCPIntegration","tools","github_repo_analyze","handler","params","console","log","repo","code_quality","security","performance","details","github_pr_manage","success","action","pr_number","github_issue_track","open","in_progress","closed","github_release_coord","version","status","date","github_workflow_auto","workflow","workflow_name","trigger","github_code_review","score","issues","suggestions","findings","type","description","github_sync_coord","synced","repos","length","github_metrics","commits","total","week","pull_requests","merged","avg_time","resolved","contributors","active","new","testIntegration","analysisResult","analysis_type","prResult","metricsResult","GitHubMCPBridge","eventBus","setupHandlers","on","data","source","tool","startsWith","result","emit","error","message","runGitHubViewTest","repeat","Object","keys","forEach","process","argv","url"],"mappings":"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"}