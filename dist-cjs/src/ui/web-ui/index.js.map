{"version":3,"sources":["../../../../src/ui/web-ui/index.js"],"sourcesContent":["/**\n * Enhanced Web UI - Main Entry Point\n * Modular UI architecture supporting 71+ MCP tools and CLI commands\n */\n\n// Core Architecture Components\nexport { UIManager, VIEW_CATEGORIES, MCP_TOOL_CATEGORIES } from './core/UIManager.js';\nexport { MCPIntegrationLayer } from './core/MCPIntegrationLayer.js';\nexport { EventBus } from './core/EventBus.js';\nexport { ViewManager } from './core/ViewManager.js';\nexport { StateManager } from './core/StateManager.js';\n\n// Component Library\nexport { ComponentLibrary } from './components/ComponentLibrary.js';\n\n// Views\nexport { default as NeuralNetworkView } from './views/NeuralNetworkView.js';\nexport { default as GitHubIntegrationView } from './views/GitHubIntegrationView.js';\nexport { default as WorkflowAutomationView } from './views/WorkflowAutomationView.js';\nexport { default as DAAView } from './views/DAAView.js';\n\n// Main UI Controllers\nexport { EnhancedWebUI } from './EnhancedWebUI.js';\nexport { EnhancedProcessUI, launchEnhancedUI } from './EnhancedProcessUI.js';\n\n/**\n * Initialize Enhanced Web UI System\n * @param {Object} options Configuration options\n * @returns {Promise<EnhancedWebUI>} Initialized UI system\n */\nexport async function initializeEnhancedUI(options = {}) {\n  const {\n    mode = 'auto', // 'full', 'enhanced', 'fallback', 'auto'\n    existingUI = null,\n    enableAllFeatures = true,\n  } = options;\n\n  try {\n    if (mode === 'full' || (mode === 'auto' && typeof window !== 'undefined')) {\n      // Browser environment - full UI manager\n      const { UIManager } = await import('./core/UIManager.js');\n      const uiManager = new UIManager();\n      await uiManager.initialize();\n      return uiManager;\n    } else if (mode === 'enhanced' || (mode === 'auto' && existingUI)) {\n      // Enhanced process UI\n      const { EnhancedWebUI } = await import('./EnhancedWebUI.js');\n      const enhancedUI = new EnhancedWebUI();\n      await enhancedUI.initialize(existingUI);\n      return enhancedUI;\n    } else {\n      // Terminal/fallback mode\n      const { EnhancedProcessUI } = await import('./EnhancedProcessUI.js');\n      const processUI = new EnhancedProcessUI();\n      return processUI;\n    }\n  } catch (error) {\n    console.warn('Enhanced UI initialization failed, using fallback:', error);\n\n    // Always provide fallback\n    const { EnhancedProcessUI } = await import('./EnhancedProcessUI.js');\n    const processUI = new EnhancedProcessUI();\n    return processUI;\n  }\n}\n\n/**\n * Launch Enhanced UI in terminal mode\n */\nexport async function launchTerminalUI() {\n  const { launchEnhancedUI } = await import('./EnhancedProcessUI.js');\n  return launchEnhancedUI();\n}\n\n/**\n * Tool Categories and Counts\n */\nexport const TOOL_CATEGORIES_INFO = {\n  neural: {\n    name: 'Neural Network Tools',\n    count: 15,\n    tools: [\n      'neural_train',\n      'neural_predict',\n      'neural_status',\n      'neural_patterns',\n      'model_load',\n      'model_save',\n      'pattern_recognize',\n      'cognitive_analyze',\n      'learning_adapt',\n      'neural_compress',\n      'ensemble_create',\n      'transfer_learn',\n      'neural_explain',\n      'wasm_optimize',\n      'inference_run',\n    ],\n  },\n  memory: {\n    name: 'Memory & Persistence Tools',\n    count: 10,\n    tools: [\n      'memory_usage',\n      'memory_backup',\n      'memory_restore',\n      'memory_compress',\n      'memory_sync',\n      'cache_manage',\n      'state_snapshot',\n      'context_restore',\n      'memory_analytics',\n      'memory_persist',\n    ],\n  },\n  monitoring: {\n    name: 'Monitoring & Analysis Tools',\n    count: 13,\n    tools: [\n      'performance_report',\n      'bottleneck_analyze',\n      'token_usage',\n      'benchmark_run',\n      'metrics_collect',\n      'trend_analysis',\n      'cost_analysis',\n      'quality_assess',\n      'error_analysis',\n      'usage_stats',\n      'health_check',\n      'swarm_monitor',\n      'agent_metrics',\n    ],\n  },\n  workflow: {\n    name: 'Workflow & Automation Tools',\n    count: 11,\n    tools: [\n      'workflow_create',\n      'workflow_execute',\n      'automation_setup',\n      'pipeline_create',\n      'scheduler_manage',\n      'trigger_setup',\n      'workflow_template',\n      'batch_process',\n      'parallel_execute',\n      'sparc_mode',\n      'task_orchestrate',\n    ],\n  },\n  github: {\n    name: 'GitHub Integration Tools',\n    count: 8,\n    tools: [\n      'github_repo_analyze',\n      'github_pr_manage',\n      'github_issue_track',\n      'github_release_coord',\n      'github_workflow_auto',\n      'github_code_review',\n      'github_sync_coord',\n      'github_metrics',\n    ],\n  },\n  daa: {\n    name: 'Dynamic Agent Architecture Tools',\n    count: 8,\n    tools: [\n      'daa_agent_create',\n      'daa_capability_match',\n      'daa_resource_alloc',\n      'daa_lifecycle_manage',\n      'daa_communication',\n      'daa_consensus',\n      'daa_fault_tolerance',\n      'daa_optimization',\n    ],\n  },\n  system: {\n    name: 'System & Utilities Tools',\n    count: 6,\n    tools: [\n      'security_scan',\n      'backup_create',\n      'restore_system',\n      'log_analysis',\n      'diagnostic_run',\n      'config_manage',\n    ],\n  },\n  cli: {\n    name: 'CLI Command Bridge',\n    count: 9,\n    commands: [\n      'hive-mind',\n      'github',\n      'training',\n      'analysis',\n      'automation',\n      'coordination',\n      'hooks',\n      'mcp',\n      'config',\n    ],\n  },\n};\n\n/**\n * Get total tool count\n */\nexport function getTotalToolCount() {\n  return Object.values(TOOL_CATEGORIES_INFO).reduce((total, category) => {\n    return total + category.count;\n  }, 0);\n}\n\n/**\n * Get architecture information\n */\nexport function getArchitectureInfo() {\n  return {\n    version: '2.0.0',\n    totalTools: getTotalToolCount(),\n    categories: Object.keys(TOOL_CATEGORIES_INFO).length,\n    features: [\n      'Modular view system',\n      'MCP tool integration',\n      'Real-time updates',\n      'State persistence',\n      'Event-driven architecture',\n      'Component library',\n      'Responsive design',\n      'Fallback modes',\n      'Tool statistics',\n      'Cross-platform support',\n    ],\n    compatibility: {\n      browser: true,\n      node: true,\n      terminal: true,\n      vscode: true,\n    },\n  };\n}\n\n// Auto-initialization for browser environments\nif (typeof window !== 'undefined') {\n  // Check if we should auto-initialize\n  window.claudeFlowEnhancedUI = {\n    initialize: initializeEnhancedUI,\n    launch: launchTerminalUI,\n    getInfo: getArchitectureInfo,\n    toolCategories: TOOL_CATEGORIES_INFO,\n  };\n\n  // Auto-enhance existing UI if present\n  window.addEventListener('DOMContentLoaded', async () => {\n    if (window.claudeFlowProcessUI && !window.claudeFlowEnhanced) {\n      try {\n        console.log('ðŸŽ¨ Auto-enhancing existing process UI...');\n        const enhancedUI = await initializeEnhancedUI({\n          mode: 'enhanced',\n          existingUI: window.claudeFlowProcessUI,\n        });\n        window.claudeFlowEnhanced = enhancedUI;\n        console.log('âœ… Enhanced UI auto-initialization complete');\n      } catch (error) {\n        console.warn('Enhanced UI auto-initialization failed:', error);\n      }\n    }\n  });\n}\n\n// Export for Node.js environments\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    initializeEnhancedUI,\n    launchTerminalUI,\n    getArchitectureInfo,\n    TOOL_CATEGORIES_INFO,\n    getTotalToolCount,\n  };\n}\n\nexport default {\n  initializeEnhancedUI,\n  launchTerminalUI,\n  getArchitectureInfo,\n  TOOL_CATEGORIES_INFO,\n  getTotalToolCount,\n};\n"],"names":["UIManager","VIEW_CATEGORIES","MCP_TOOL_CATEGORIES","MCPIntegrationLayer","EventBus","ViewManager","StateManager","ComponentLibrary","default","NeuralNetworkView","GitHubIntegrationView","WorkflowAutomationView","DAAView","EnhancedWebUI","EnhancedProcessUI","launchEnhancedUI","initializeEnhancedUI","options","mode","existingUI","enableAllFeatures","window","uiManager","initialize","enhancedUI","processUI","error","console","warn","launchTerminalUI","TOOL_CATEGORIES_INFO","neural","name","count","tools","memory","monitoring","workflow","github","daa","system","cli","commands","getTotalToolCount","Object","values","reduce","total","category","getArchitectureInfo","version","totalTools","categories","keys","length","features","compatibility","browser","node","terminal","vscode","claudeFlowEnhancedUI","launch","getInfo","toolCategories","addEventListener","claudeFlowProcessUI","claudeFlowEnhanced","log","module","exports"],"mappings":"AAMA,SAASA,SAAS,EAAEC,eAAe,EAAEC,mBAAmB,QAAQ,sBAAsB;AACtF,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,YAAY,QAAQ,yBAAyB;AAGtD,SAASC,gBAAgB,QAAQ,mCAAmC;AAGpE,SAASC,WAAWC,iBAAiB,QAAQ,+BAA+B;AAC5E,SAASD,WAAWE,qBAAqB,QAAQ,mCAAmC;AACpF,SAASF,WAAWG,sBAAsB,QAAQ,oCAAoC;AACtF,SAASH,WAAWI,OAAO,QAAQ,qBAAqB;AAGxD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,yBAAyB;AAO7E,OAAO,eAAeC,qBAAqBC,UAAU,CAAC,CAAC;IACrD,MAAM,EACJC,OAAO,MAAM,EACbC,aAAa,IAAI,EACjBC,oBAAoB,IAAI,EACzB,GAAGH;IAEJ,IAAI;QACF,IAAIC,SAAS,UAAWA,SAAS,UAAU,OAAOG,WAAW,aAAc;YAEzE,MAAM,EAAErB,SAAS,EAAE,GAAG,MAAM,MAAM,CAAC;YACnC,MAAMsB,YAAY,IAAItB;YACtB,MAAMsB,UAAUC,UAAU;YAC1B,OAAOD;QACT,OAAO,IAAIJ,SAAS,cAAeA,SAAS,UAAUC,YAAa;YAEjE,MAAM,EAAEN,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC;YACvC,MAAMW,aAAa,IAAIX;YACvB,MAAMW,WAAWD,UAAU,CAACJ;YAC5B,OAAOK;QACT,OAAO;YAEL,MAAM,EAAEV,iBAAiB,EAAE,GAAG,MAAM,MAAM,CAAC;YAC3C,MAAMW,YAAY,IAAIX;YACtB,OAAOW;QACT;IACF,EAAE,OAAOC,OAAO;QACdC,QAAQC,IAAI,CAAC,sDAAsDF;QAGnE,MAAM,EAAEZ,iBAAiB,EAAE,GAAG,MAAM,MAAM,CAAC;QAC3C,MAAMW,YAAY,IAAIX;QACtB,OAAOW;IACT;AACF;AAKA,OAAO,eAAeI;IACpB,MAAM,EAAEd,gBAAgB,EAAE,GAAG,MAAM,MAAM,CAAC;IAC1C,OAAOA;AACT;AAKA,OAAO,MAAMe,uBAAuB;IAClCC,QAAQ;QACNC,MAAM;QACNC,OAAO;QACPC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IACAC,QAAQ;QACNH,MAAM;QACNC,OAAO;QACPC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IACAE,YAAY;QACVJ,MAAM;QACNC,OAAO;QACPC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IACAG,UAAU;QACRL,MAAM;QACNC,OAAO;QACPC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IACAI,QAAQ;QACNN,MAAM;QACNC,OAAO;QACPC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IACAK,KAAK;QACHP,MAAM;QACNC,OAAO;QACPC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IACAM,QAAQ;QACNR,MAAM;QACNC,OAAO;QACPC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IACAO,KAAK;QACHT,MAAM;QACNC,OAAO;QACPS,UAAU;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;AACF,EAAE;AAKF,OAAO,SAASC;IACd,OAAOC,OAAOC,MAAM,CAACf,sBAAsBgB,MAAM,CAAC,CAACC,OAAOC;QACxD,OAAOD,QAAQC,SAASf,KAAK;IAC/B,GAAG;AACL;AAKA,OAAO,SAASgB;IACd,OAAO;QACLC,SAAS;QACTC,YAAYR;QACZS,YAAYR,OAAOS,IAAI,CAACvB,sBAAsBwB,MAAM;QACpDC,UAAU;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACDC,eAAe;YACbC,SAAS;YACTC,MAAM;YACNC,UAAU;YACVC,QAAQ;QACV;IACF;AACF;AAGA,IAAI,OAAOvC,WAAW,aAAa;IAEjCA,OAAOwC,oBAAoB,GAAG;QAC5BtC,YAAYP;QACZ8C,QAAQjC;QACRkC,SAASd;QACTe,gBAAgBlC;IAClB;IAGAT,OAAO4C,gBAAgB,CAAC,oBAAoB;QAC1C,IAAI5C,OAAO6C,mBAAmB,IAAI,CAAC7C,OAAO8C,kBAAkB,EAAE;YAC5D,IAAI;gBACFxC,QAAQyC,GAAG,CAAC;gBACZ,MAAM5C,aAAa,MAAMR,qBAAqB;oBAC5CE,MAAM;oBACNC,YAAYE,OAAO6C,mBAAmB;gBACxC;gBACA7C,OAAO8C,kBAAkB,GAAG3C;gBAC5BG,QAAQyC,GAAG,CAAC;YACd,EAAE,OAAO1C,OAAO;gBACdC,QAAQC,IAAI,CAAC,2CAA2CF;YAC1D;QACF;IACF;AACF;AAGA,IAAI,OAAO2C,WAAW,eAAeA,OAAOC,OAAO,EAAE;IACnDD,OAAOC,OAAO,GAAG;QACftD;QACAa;QACAoB;QACAnB;QACAa;IACF;AACF;AAEA,eAAe;IACb3B;IACAa;IACAoB;IACAnB;IACAa;AACF,EAAE"}