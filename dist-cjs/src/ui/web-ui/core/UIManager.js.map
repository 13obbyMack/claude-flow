{"version":3,"sources":["../../../../../src/ui/web-ui/core/UIManager.js"],"sourcesContent":["/**\n * UIManager - Central UI Controller for Claude Flow Web UI\n * Coordinates all views, handles navigation, and manages global state\n */\n\nimport { EventBus } from './EventBus.js';\nimport { MCPIntegrationLayer } from './MCPIntegrationLayer.js';\nimport { ViewManager } from './ViewManager.js';\nimport { StateManager } from './StateManager.js';\nimport { ComponentLibrary } from '../components/ComponentLibrary.js';\n\n// View category definitions\nexport const VIEW_CATEGORIES = {\n  OVERVIEW: 'overview',\n  PROCESSES: 'processes',\n  NEURAL: 'neural',\n  MEMORY: 'memory',\n  MONITORING: 'monitoring',\n  WORKFLOW: 'workflow',\n  GITHUB: 'github',\n  DAA: 'daa',\n  SYSTEM: 'system',\n  CLI: 'cli',\n  HELP: 'help',\n};\n\n// MCP Tool Categories mapping\nexport const MCP_TOOL_CATEGORIES = {\n  NEURAL: [\n    'neural_train',\n    'neural_predict',\n    'neural_status',\n    'neural_patterns',\n    'model_load',\n    'model_save',\n    'pattern_recognize',\n    'cognitive_analyze',\n    'learning_adapt',\n    'neural_compress',\n    'ensemble_create',\n    'transfer_learn',\n    'neural_explain',\n    'wasm_optimize',\n    'inference_run',\n  ],\n  MEMORY: [\n    'memory_usage',\n    'memory_backup',\n    'memory_restore',\n    'memory_compress',\n    'memory_sync',\n    'cache_manage',\n    'state_snapshot',\n    'context_restore',\n    'memory_analytics',\n    'memory_persist',\n    'memory_namespace',\n  ],\n  MONITORING: [\n    'performance_report',\n    'bottleneck_analyze',\n    'token_usage',\n    'benchmark_run',\n    'metrics_collect',\n    'trend_analysis',\n    'cost_analysis',\n    'quality_assess',\n    'error_analysis',\n    'usage_stats',\n    'health_check',\n    'swarm_monitor',\n    'agent_metrics',\n  ],\n  WORKFLOW: [\n    'workflow_create',\n    'workflow_execute',\n    'automation_setup',\n    'pipeline_create',\n    'scheduler_manage',\n    'trigger_setup',\n    'workflow_template',\n    'batch_process',\n    'parallel_execute',\n    'sparc_mode',\n    'task_orchestrate',\n  ],\n  GITHUB: [\n    'github_repo_analyze',\n    'github_pr_manage',\n    'github_issue_track',\n    'github_release_coord',\n    'github_workflow_auto',\n    'github_code_review',\n    'github_sync_coord',\n    'github_metrics',\n  ],\n  DAA: [\n    'daa_agent_create',\n    'daa_capability_match',\n    'daa_resource_alloc',\n    'daa_lifecycle_manage',\n    'daa_communication',\n    'daa_consensus',\n    'daa_fault_tolerance',\n    'daa_optimization',\n  ],\n  SYSTEM: [\n    'security_scan',\n    'backup_create',\n    'restore_system',\n    'log_analysis',\n    'diagnostic_run',\n    'config_manage',\n    'features_detect',\n    'terminal_execute',\n  ],\n};\n\nexport class UIManager {\n  constructor() {\n    this.eventBus = new EventBus();\n    this.mcpIntegration = new MCPIntegrationLayer(this.eventBus);\n    this.viewManager = new ViewManager(this.eventBus);\n    this.stateManager = new StateManager(this.eventBus);\n    this.componentLibrary = new ComponentLibrary();\n\n    this.currentView = VIEW_CATEGORIES.OVERVIEW;\n    this.viewHistory = [];\n    this.shortcuts = new Map();\n    this.theme = 'dark';\n    this.isResponsive = true;\n\n    this.initializeEventHandlers();\n    this.setupKeyboardShortcuts();\n  }\n\n  /**\n   * Initialize the complete UI system\n   */\n  async initialize() {\n    try {\n      // Initialize core systems\n      await this.stateManager.initialize();\n      await this.mcpIntegration.initialize();\n      await this.viewManager.initialize();\n\n      // Load user preferences\n      await this.loadUserPreferences();\n\n      // Register all views\n      await this.registerAllViews();\n\n      // Set up real-time updates\n      this.setupRealTimeUpdates();\n\n      // Initialize component library\n      this.componentLibrary.initialize();\n\n      this.eventBus.emit('ui:initialized');\n      console.log('üé® UI Manager initialized successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize UI Manager:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register all available views\n   */\n  async registerAllViews() {\n    const viewConfigs = [\n      {\n        id: VIEW_CATEGORIES.OVERVIEW,\n        name: 'Overview',\n        icon: 'üè†',\n        description: 'System overview and quick actions',\n        component: 'OverviewView',\n        shortcut: '1',\n      },\n      {\n        id: VIEW_CATEGORIES.PROCESSES,\n        name: 'Processes',\n        icon: '‚öôÔ∏è',\n        description: 'Process management and monitoring',\n        component: 'ProcessView',\n        shortcut: '2',\n      },\n      {\n        id: VIEW_CATEGORIES.NEURAL,\n        name: 'Neural Network',\n        icon: 'üß†',\n        description: 'AI model training and neural operations',\n        component: 'NeuralNetworkView',\n        shortcut: '3',\n        toolCount: MCP_TOOL_CATEGORIES.NEURAL.length,\n      },\n      {\n        id: VIEW_CATEGORIES.MEMORY,\n        name: 'Memory Bank',\n        icon: 'üíæ',\n        description: 'Memory management and persistence',\n        component: 'MemoryManagementView',\n        shortcut: '4',\n        toolCount: MCP_TOOL_CATEGORIES.MEMORY.length,\n      },\n      {\n        id: VIEW_CATEGORIES.MONITORING,\n        name: 'Monitoring',\n        icon: 'üìä',\n        description: 'Performance monitoring and analysis',\n        component: 'MonitoringView',\n        shortcut: '5',\n        toolCount: MCP_TOOL_CATEGORIES.MONITORING.length,\n      },\n      {\n        id: VIEW_CATEGORIES.WORKFLOW,\n        name: 'Workflows',\n        icon: 'üîÑ',\n        description: 'Automation and workflow management',\n        component: 'WorkflowAutomationView',\n        shortcut: '6',\n        toolCount: MCP_TOOL_CATEGORIES.WORKFLOW.length,\n      },\n      {\n        id: VIEW_CATEGORIES.GITHUB,\n        name: 'GitHub',\n        icon: 'üêô',\n        description: 'GitHub integration and operations',\n        component: 'GitHubIntegrationView',\n        shortcut: '7',\n        toolCount: MCP_TOOL_CATEGORIES.GITHUB.length,\n      },\n      {\n        id: VIEW_CATEGORIES.DAA,\n        name: 'Dynamic Agents',\n        icon: 'ü§ñ',\n        description: 'Dynamic agent architecture',\n        component: 'DAAView',\n        shortcut: '8',\n        toolCount: MCP_TOOL_CATEGORIES.DAA.length,\n      },\n      {\n        id: VIEW_CATEGORIES.SYSTEM,\n        name: 'System',\n        icon: 'üõ†Ô∏è',\n        description: 'System utilities and diagnostics',\n        component: 'SystemUtilitiesView',\n        shortcut: '9',\n        toolCount: MCP_TOOL_CATEGORIES.SYSTEM.length,\n      },\n      {\n        id: VIEW_CATEGORIES.CLI,\n        name: 'CLI Bridge',\n        icon: '‚å®Ô∏è',\n        description: 'Command-line interface bridge',\n        component: 'CLICommandView',\n        shortcut: '0',\n      },\n      {\n        id: VIEW_CATEGORIES.HELP,\n        name: 'Help',\n        icon: '‚ùì',\n        description: 'Documentation and help',\n        component: 'HelpView',\n        shortcut: '?',\n      },\n    ];\n\n    for (const config of viewConfigs) {\n      await this.viewManager.registerView(config);\n    }\n  }\n\n  /**\n   * Navigate to a specific view\n   */\n  async navigateToView(viewId, params = {}) {\n    if (!this.viewManager.hasView(viewId)) {\n      throw new Error(`View not found: ${viewId}`);\n    }\n\n    // Store current view in history\n    if (this.currentView && this.currentView !== viewId) {\n      this.viewHistory.push({\n        viewId: this.currentView,\n        timestamp: Date.now(),\n        params: this.stateManager.getViewState(this.currentView),\n      });\n    }\n\n    // Update current view\n    this.currentView = viewId;\n\n    // Load view with parameters\n    await this.viewManager.loadView(viewId, params);\n\n    // Update browser history if available\n    if (typeof window !== 'undefined' && window.history) {\n      window.history.pushState({ viewId, params }, '', `#${viewId}`);\n    }\n\n    // Update state\n    await this.stateManager.setViewState(viewId, params);\n\n    // Emit navigation event\n    this.eventBus.emit('ui:navigation', { viewId, params });\n  }\n\n  /**\n   * Go back to previous view\n   */\n  async goBack() {\n    if (this.viewHistory.length === 0) return;\n\n    const previousView = this.viewHistory.pop();\n    await this.navigateToView(previousView.viewId, previousView.params);\n  }\n\n  /**\n   * Execute MCP tool with UI integration\n   */\n  async executeMCPTool(toolName, params = {}) {\n    try {\n      // Show loading indicator\n      this.eventBus.emit('ui:loading', { tool: toolName, params });\n\n      // Execute tool through MCP integration layer\n      const result = await this.mcpIntegration.executeTool(toolName, params);\n\n      // Handle result based on tool type\n      await this.handleToolResult(toolName, result, params);\n\n      // Hide loading indicator\n      this.eventBus.emit('ui:loading:complete', { tool: toolName, result });\n\n      return result;\n    } catch (error) {\n      this.eventBus.emit('ui:error', { tool: toolName, error, params });\n      throw error;\n    }\n  }\n\n  /**\n   * Handle tool execution results\n   */\n  async handleToolResult(toolName, result, originalParams) {\n    // Update relevant views with new data\n    const category = this.getToolCategory(toolName);\n\n    if (category) {\n      this.eventBus.emit(`view:${category}:update`, {\n        tool: toolName,\n        result,\n        params: originalParams,\n      });\n    }\n\n    // Store result in state for persistence\n    await this.stateManager.setToolResult(toolName, result);\n\n    // Log execution\n    this.eventBus.emit('ui:log', {\n      level: 'info',\n      message: `Executed ${toolName}`,\n      data: { result, params: originalParams },\n    });\n  }\n\n  /**\n   * Get tool category for a given tool name\n   */\n  getToolCategory(toolName) {\n    for (const [category, tools] of Object.entries(MCP_TOOL_CATEGORIES)) {\n      if (tools.includes(toolName)) {\n        return category.toLowerCase();\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Setup keyboard shortcuts\n   */\n  setupKeyboardShortcuts() {\n    // View navigation shortcuts\n    Object.values(VIEW_CATEGORIES).forEach((viewId, index) => {\n      const key = (index + 1).toString();\n      this.shortcuts.set(key, () => this.navigateToView(viewId));\n    });\n\n    // Global shortcuts\n    this.shortcuts.set('ctrl+k', () => this.showCommandPalette());\n    this.shortcuts.set('ctrl+/', () => this.navigateToView(VIEW_CATEGORIES.HELP));\n    this.shortcuts.set('ctrl+1', () => this.navigateToView(VIEW_CATEGORIES.OVERVIEW));\n    this.shortcuts.set('escape', () => this.hideAllOverlays());\n    this.shortcuts.set('ctrl+shift+p', () => this.showCommandPalette());\n    this.shortcuts.set('ctrl+b', () => this.goBack());\n    this.shortcuts.set('ctrl+r', () => this.refreshCurrentView());\n    this.shortcuts.set('ctrl+t', () => this.toggleTheme());\n\n    // Setup event listener for keyboard events\n    if (typeof window !== 'undefined') {\n      window.addEventListener('keydown', (event) => {\n        const key = this.getKeyString(event);\n        const handler = this.shortcuts.get(key);\n        if (handler) {\n          event.preventDefault();\n          handler();\n        }\n      });\n    }\n  }\n\n  /**\n   * Get key string from keyboard event\n   */\n  getKeyString(event) {\n    const parts = [];\n    if (event.ctrlKey) parts.push('ctrl');\n    if (event.shiftKey) parts.push('shift');\n    if (event.altKey) parts.push('alt');\n    if (event.metaKey) parts.push('meta');\n\n    if (event.key.length === 1) {\n      parts.push(event.key.toLowerCase());\n    } else {\n      parts.push(event.key.toLowerCase());\n    }\n\n    return parts.join('+');\n  }\n\n  /**\n   * Show command palette\n   */\n  showCommandPalette() {\n    this.eventBus.emit('ui:command-palette:show');\n  }\n\n  /**\n   * Hide all overlays\n   */\n  hideAllOverlays() {\n    this.eventBus.emit('ui:overlays:hide');\n  }\n\n  /**\n   * Refresh current view\n   */\n  async refreshCurrentView() {\n    await this.viewManager.refreshView(this.currentView);\n  }\n\n  /**\n   * Toggle theme\n   */\n  toggleTheme() {\n    this.theme = this.theme === 'dark' ? 'light' : 'dark';\n    this.eventBus.emit('ui:theme:changed', this.theme);\n  }\n\n  /**\n   * Setup real-time updates\n   */\n  setupRealTimeUpdates() {\n    // Update every 5 seconds for live data\n    setInterval(() => {\n      this.eventBus.emit('ui:real-time:update');\n    }, 5000);\n\n    // Setup MCP tool result streaming\n    this.mcpIntegration.on('tool:result', (result) => {\n      this.eventBus.emit('ui:real-time:tool-result', result);\n    });\n  }\n\n  /**\n   * Initialize event handlers\n   */\n  initializeEventHandlers() {\n    // Handle tool execution requests\n    this.eventBus.on('tool:execute', async (data) => {\n      await this.executeMCPTool(data.tool, data.params);\n    });\n\n    // Handle view navigation requests\n    this.eventBus.on('view:navigate', async (data) => {\n      await this.navigateToView(data.viewId, data.params);\n    });\n\n    // Handle state persistence\n    this.eventBus.on('state:persist', async (data) => {\n      await this.stateManager.persistState(data);\n    });\n\n    // Handle errors\n    this.eventBus.on('ui:error', (error) => {\n      console.error('UI Error:', error);\n      // Could show error toast/notification here\n    });\n  }\n\n  /**\n   * Load user preferences\n   */\n  async loadUserPreferences() {\n    const preferences = await this.stateManager.getUserPreferences();\n    if (preferences) {\n      this.theme = preferences.theme || 'dark';\n      this.isResponsive = preferences.responsive !== false;\n    }\n  }\n\n  /**\n   * Get system status for overview\n   */\n  async getSystemStatus() {\n    const status = {\n      uptime: await this.mcpIntegration.getSystemUptime(),\n      activeTools: await this.mcpIntegration.getActiveTools(),\n      memoryUsage: await this.mcpIntegration.getMemoryUsage(),\n      swarmStatus: await this.mcpIntegration.getSwarmStatus(),\n      toolsAvailable: Object.values(MCP_TOOL_CATEGORIES).flat().length,\n      viewsRegistered: this.viewManager.getViewCount(),\n    };\n\n    return status;\n  }\n\n  /**\n   * Shutdown UI Manager\n   */\n  async shutdown() {\n    await this.stateManager.persistAllState();\n    await this.mcpIntegration.shutdown();\n    this.eventBus.emit('ui:shutdown');\n  }\n}\n\nexport default UIManager;\n"],"names":["EventBus","MCPIntegrationLayer","ViewManager","StateManager","ComponentLibrary","VIEW_CATEGORIES","OVERVIEW","PROCESSES","NEURAL","MEMORY","MONITORING","WORKFLOW","GITHUB","DAA","SYSTEM","CLI","HELP","MCP_TOOL_CATEGORIES","UIManager","eventBus","mcpIntegration","viewManager","stateManager","componentLibrary","currentView","viewHistory","shortcuts","Map","theme","isResponsive","initializeEventHandlers","setupKeyboardShortcuts","initialize","loadUserPreferences","registerAllViews","setupRealTimeUpdates","emit","console","log","error","viewConfigs","id","name","icon","description","component","shortcut","toolCount","length","config","registerView","navigateToView","viewId","params","hasView","Error","push","timestamp","Date","now","getViewState","loadView","window","history","pushState","setViewState","goBack","previousView","pop","executeMCPTool","toolName","tool","result","executeTool","handleToolResult","originalParams","category","getToolCategory","setToolResult","level","message","data","tools","Object","entries","includes","toLowerCase","values","forEach","index","key","toString","set","showCommandPalette","hideAllOverlays","refreshCurrentView","toggleTheme","addEventListener","event","getKeyString","handler","get","preventDefault","parts","ctrlKey","shiftKey","altKey","metaKey","join","refreshView","setInterval","on","persistState","preferences","getUserPreferences","responsive","getSystemStatus","status","uptime","getSystemUptime","activeTools","getActiveTools","memoryUsage","getMemoryUsage","swarmStatus","getSwarmStatus","toolsAvailable","flat","viewsRegistered","getViewCount","shutdown","persistAllState"],"mappings":"AAKA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,gBAAgB,QAAQ,oCAAoC;AAGrE,OAAO,MAAMC,kBAAkB;IAC7BC,UAAU;IACVC,WAAW;IACXC,QAAQ;IACRC,QAAQ;IACRC,YAAY;IACZC,UAAU;IACVC,QAAQ;IACRC,KAAK;IACLC,QAAQ;IACRC,KAAK;IACLC,MAAM;AACR,EAAE;AAGF,OAAO,MAAMC,sBAAsB;IACjCT,QAAQ;QACN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACDC,QAAQ;QACN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACDC,YAAY;QACV;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACDC,UAAU;QACR;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACDC,QAAQ;QACN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACDC,KAAK;QACH;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACDC,QAAQ;QACN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;AACH,EAAE;AAEF,OAAO,MAAMI;IACX,aAAc;QACZ,IAAI,CAACC,QAAQ,GAAG,IAAInB;QACpB,IAAI,CAACoB,cAAc,GAAG,IAAInB,oBAAoB,IAAI,CAACkB,QAAQ;QAC3D,IAAI,CAACE,WAAW,GAAG,IAAInB,YAAY,IAAI,CAACiB,QAAQ;QAChD,IAAI,CAACG,YAAY,GAAG,IAAInB,aAAa,IAAI,CAACgB,QAAQ;QAClD,IAAI,CAACI,gBAAgB,GAAG,IAAInB;QAE5B,IAAI,CAACoB,WAAW,GAAGnB,gBAAgBC,QAAQ;QAC3C,IAAI,CAACmB,WAAW,GAAG,EAAE;QACrB,IAAI,CAACC,SAAS,GAAG,IAAIC;QACrB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"}