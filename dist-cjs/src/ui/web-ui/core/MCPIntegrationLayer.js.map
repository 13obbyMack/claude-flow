{"version":3,"sources":["../../../../../src/ui/web-ui/core/MCPIntegrationLayer.js"],"sourcesContent":["/**\n * MCP Integration Layer - Bridge between UI and Claude Flow MCP Tools\n * Handles all MCP tool execution, caching, and result processing\n */\n\nimport { EventBus } from './EventBus.js';\n\nexport class MCPIntegrationLayer {\n  constructor(eventBus) {\n    this.eventBus = eventBus;\n    this.mcpTools = new Map();\n    this.toolResults = new Map();\n    this.activeExecutions = new Map();\n    this.cache = new Map();\n    this.isInitialized = false;\n    this.mcpServerStatus = 'unknown';\n    this.toolCategories = {\n      neural: [],\n      memory: [],\n      monitoring: [],\n      workflow: [],\n      github: [],\n      daa: [],\n      system: [],\n    };\n  }\n\n  /**\n   * Initialize MCP integration layer\n   */\n  async initialize() {\n    try {\n      // Check if MCP server is available\n      this.mcpServerStatus = await this.checkMCPServerStatus();\n\n      // Discover available tools\n      await this.discoverTools();\n\n      // Setup tool execution handlers\n      this.setupToolHandlers();\n\n      // Initialize caching system\n      this.initializeCache();\n\n      this.isInitialized = true;\n      this.eventBus.emit('mcp:initialized', { status: this.mcpServerStatus });\n\n      console.log('üîå MCP Integration Layer initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize MCP Integration Layer:', error);\n      this.mcpServerStatus = 'error';\n      throw error;\n    }\n  }\n\n  /**\n   * Check MCP server status\n   */\n  async checkMCPServerStatus() {\n    try {\n      // Try to detect available MCP tools\n      // This would normally check for actual MCP server connection\n      if (typeof window !== 'undefined' && window.claudeFlowMCP) {\n        return 'connected';\n      }\n\n      // Check for Node.js environment with MCP tools\n      if (typeof process !== 'undefined' && process.env.CLAUDE_FLOW_MCP_ENABLED === 'true') {\n        return 'connected';\n      }\n\n      return 'mock'; // Use mock mode for development\n    } catch (error) {\n      console.warn('MCP Server connection check failed:', error);\n      return 'offline';\n    }\n  }\n\n  /**\n   * Discover available MCP tools\n   */\n  async discoverTools() {\n    const availableTools = {\n      // Neural Network Tools\n      neural: [\n        {\n          name: 'neural_train',\n          description: 'Train neural patterns with WASM SIMD',\n          params: ['pattern_type', 'training_data', 'epochs'],\n        },\n        {\n          name: 'neural_predict',\n          description: 'Make AI predictions',\n          params: ['modelId', 'input'],\n        },\n        { name: 'neural_status', description: 'Check neural network status', params: ['modelId'] },\n        {\n          name: 'neural_patterns',\n          description: 'Analyze cognitive patterns',\n          params: ['action', 'operation', 'outcome'],\n        },\n        { name: 'model_load', description: 'Load pre-trained models', params: ['modelPath'] },\n        { name: 'model_save', description: 'Save trained models', params: ['modelId', 'path'] },\n        {\n          name: 'pattern_recognize',\n          description: 'Pattern recognition',\n          params: ['data', 'patterns'],\n        },\n        {\n          name: 'cognitive_analyze',\n          description: 'Cognitive behavior analysis',\n          params: ['behavior'],\n        },\n        { name: 'learning_adapt', description: 'Adaptive learning', params: ['experience'] },\n        {\n          name: 'neural_compress',\n          description: 'Compress neural models',\n          params: ['modelId', 'ratio'],\n        },\n        {\n          name: 'ensemble_create',\n          description: 'Create model ensembles',\n          params: ['models', 'strategy'],\n        },\n        {\n          name: 'transfer_learn',\n          description: 'Transfer learning',\n          params: ['sourceModel', 'targetDomain'],\n        },\n        {\n          name: 'neural_explain',\n          description: 'AI explainability',\n          params: ['modelId', 'prediction'],\n        },\n        { name: 'wasm_optimize', description: 'WASM SIMD optimization', params: ['operation'] },\n        { name: 'inference_run', description: 'Run neural inference', params: ['modelId', 'data'] },\n      ],\n\n      // Memory & Persistence Tools\n      memory: [\n        {\n          name: 'memory_usage',\n          description: 'Store/retrieve persistent memory',\n          params: ['action', 'key', 'value', 'namespace', 'ttl'],\n        },\n        { name: 'memory_backup', description: 'Backup memory stores', params: ['path'] },\n        { name: 'memory_restore', description: 'Restore from backups', params: ['backupPath'] },\n        { name: 'memory_compress', description: 'Compress memory data', params: ['namespace'] },\n        { name: 'memory_sync', description: 'Sync across instances', params: ['target'] },\n        {\n          name: 'cache_manage',\n          description: 'Manage coordination cache',\n          params: ['action', 'key'],\n        },\n        { name: 'state_snapshot', description: 'Create state snapshots', params: ['name'] },\n        {\n          name: 'context_restore',\n          description: 'Restore execution context',\n          params: ['snapshotId'],\n        },\n        { name: 'memory_analytics', description: 'Analyze memory usage', params: ['timeframe'] },\n        { name: 'memory_persist', description: 'Cross-session persistence', params: ['sessionId'] },\n        {\n          name: 'memory_namespace',\n          description: 'Namespace management',\n          params: ['namespace', 'action'],\n        },\n      ],\n\n      // Monitoring & Analysis Tools\n      monitoring: [\n        {\n          name: 'performance_report',\n          description: 'Generate performance reports',\n          params: ['format', 'timeframe'],\n        },\n        {\n          name: 'bottleneck_analyze',\n          description: 'Identify performance bottlenecks',\n          params: ['component', 'metrics'],\n        },\n        {\n          name: 'token_usage',\n          description: 'Analyze token consumption',\n          params: ['operation', 'timeframe'],\n        },\n        { name: 'benchmark_run', description: 'Performance benchmarks', params: ['suite'] },\n        { name: 'metrics_collect', description: 'Collect system metrics', params: ['components'] },\n        {\n          name: 'trend_analysis',\n          description: 'Analyze performance trends',\n          params: ['metric', 'period'],\n        },\n        { name: 'cost_analysis', description: 'Cost and resource analysis', params: ['timeframe'] },\n        {\n          name: 'quality_assess',\n          description: 'Quality assessment',\n          params: ['target', 'criteria'],\n        },\n        { name: 'error_analysis', description: 'Error pattern analysis', params: ['logs'] },\n        { name: 'usage_stats', description: 'Usage statistics', params: ['component'] },\n        { name: 'health_check', description: 'System health monitoring', params: ['components'] },\n        {\n          name: 'swarm_monitor',\n          description: 'Real-time swarm monitoring',\n          params: ['swarmId', 'interval'],\n        },\n        { name: 'agent_metrics', description: 'Agent performance metrics', params: ['agentId'] },\n      ],\n\n      // Workflow & Automation Tools\n      workflow: [\n        {\n          name: 'workflow_create',\n          description: 'Create custom workflows',\n          params: ['name', 'steps', 'triggers'],\n        },\n        {\n          name: 'workflow_execute',\n          description: 'Execute predefined workflows',\n          params: ['workflowId', 'params'],\n        },\n        { name: 'automation_setup', description: 'Setup automation rules', params: ['rules'] },\n        { name: 'pipeline_create', description: 'Create CI/CD pipelines', params: ['config'] },\n        {\n          name: 'scheduler_manage',\n          description: 'Manage task scheduling',\n          params: ['action', 'schedule'],\n        },\n        {\n          name: 'trigger_setup',\n          description: 'Setup event triggers',\n          params: ['events', 'actions'],\n        },\n        {\n          name: 'workflow_template',\n          description: 'Manage workflow templates',\n          params: ['action', 'template'],\n        },\n        { name: 'batch_process', description: 'Batch processing', params: ['items', 'operation'] },\n        { name: 'parallel_execute', description: 'Execute tasks in parallel', params: ['tasks'] },\n        {\n          name: 'sparc_mode',\n          description: 'Run SPARC development modes',\n          params: ['mode', 'task_description', 'options'],\n        },\n        {\n          name: 'task_orchestrate',\n          description: 'Orchestrate complex task workflows',\n          params: ['task', 'strategy', 'priority', 'dependencies'],\n        },\n      ],\n\n      // GitHub Integration Tools\n      github: [\n        {\n          name: 'github_repo_analyze',\n          description: 'Repository analysis',\n          params: ['repo', 'analysis_type'],\n        },\n        {\n          name: 'github_pr_manage',\n          description: 'Pull request management',\n          params: ['repo', 'action', 'pr_number'],\n        },\n        {\n          name: 'github_issue_track',\n          description: 'Issue tracking & triage',\n          params: ['repo', 'action'],\n        },\n        {\n          name: 'github_release_coord',\n          description: 'Release coordination',\n          params: ['repo', 'version'],\n        },\n        {\n          name: 'github_workflow_auto',\n          description: 'Workflow automation',\n          params: ['repo', 'workflow'],\n        },\n        {\n          name: 'github_code_review',\n          description: 'Automated code review',\n          params: ['repo', 'pr'],\n        },\n        {\n          name: 'github_sync_coord',\n          description: 'Multi-repo sync coordination',\n          params: ['repos'],\n        },\n        { name: 'github_metrics', description: 'Repository metrics', params: ['repo'] },\n      ],\n\n      // DAA Tools\n      daa: [\n        {\n          name: 'daa_agent_create',\n          description: 'Create dynamic agents',\n          params: ['agent_type', 'capabilities', 'resources'],\n        },\n        {\n          name: 'daa_capability_match',\n          description: 'Match capabilities to tasks',\n          params: ['task_requirements', 'available_agents'],\n        },\n        {\n          name: 'daa_resource_alloc',\n          description: 'Resource allocation',\n          params: ['resources', 'agents'],\n        },\n        {\n          name: 'daa_lifecycle_manage',\n          description: 'Agent lifecycle management',\n          params: ['agentId', 'action'],\n        },\n        {\n          name: 'daa_communication',\n          description: 'Inter-agent communication',\n          params: ['from', 'to', 'message'],\n        },\n        {\n          name: 'daa_consensus',\n          description: 'Consensus mechanisms',\n          params: ['agents', 'proposal'],\n        },\n        {\n          name: 'daa_fault_tolerance',\n          description: 'Fault tolerance & recovery',\n          params: ['agentId', 'strategy'],\n        },\n        {\n          name: 'daa_optimization',\n          description: 'Performance optimization',\n          params: ['target', 'metrics'],\n        },\n      ],\n\n      // System & Utilities\n      system: [\n        { name: 'security_scan', description: 'Security scanning', params: ['target', 'depth'] },\n        {\n          name: 'backup_create',\n          description: 'Create system backups',\n          params: ['components', 'destination'],\n        },\n        { name: 'restore_system', description: 'System restoration', params: ['backupId'] },\n        {\n          name: 'log_analysis',\n          description: 'Log analysis & insights',\n          params: ['logFile', 'patterns'],\n        },\n        { name: 'diagnostic_run', description: 'System diagnostics', params: ['components'] },\n        {\n          name: 'config_manage',\n          description: 'Configuration management',\n          params: ['action', 'config'],\n        },\n        { name: 'features_detect', description: 'Feature detection', params: ['component'] },\n        {\n          name: 'terminal_execute',\n          description: 'Execute terminal commands',\n          params: ['command', 'args'],\n        },\n      ],\n    };\n\n    // Register tools\n    for (const [category, tools] of Object.entries(availableTools)) {\n      this.toolCategories[category] = tools;\n      tools.forEach((tool) => {\n        this.mcpTools.set(tool.name, {\n          ...tool,\n          category,\n          lastUsed: null,\n          usageCount: 0,\n        });\n      });\n    }\n\n    console.log(\n      `üîß Discovered ${this.mcpTools.size} MCP tools across ${Object.keys(this.toolCategories).length} categories`,\n    );\n  }\n\n  /**\n   * Execute MCP tool\n   */\n  async executeTool(toolName, params = {}) {\n    if (!this.isInitialized) {\n      throw new Error('MCP Integration Layer not initialized');\n    }\n\n    const tool = this.mcpTools.get(toolName);\n    if (!tool) {\n      throw new Error(`Tool not found: ${toolName}`);\n    }\n\n    // Check if execution is already in progress\n    if (this.activeExecutions.has(toolName)) {\n      throw new Error(`Tool ${toolName} is already executing`);\n    }\n\n    // Check cache first\n    const cacheKey = this.getCacheKey(toolName, params);\n    const cached = this.cache.get(cacheKey);\n    if (cached && !this.isCacheExpired(cached)) {\n      return cached.result;\n    }\n\n    try {\n      // Mark as executing\n      this.activeExecutions.set(toolName, {\n        startTime: Date.now(),\n        params,\n      });\n\n      // Execute based on MCP server status\n      let result;\n      if (this.mcpServerStatus === 'connected') {\n        result = await this.executeRealTool(toolName, params);\n      } else {\n        result = await this.executeMockTool(toolName, params);\n      }\n\n      // Update tool usage stats\n      tool.lastUsed = Date.now();\n      tool.usageCount++;\n\n      // Cache result\n      this.cacheResult(cacheKey, result);\n\n      // Store in results map\n      this.toolResults.set(toolName, {\n        result,\n        timestamp: Date.now(),\n        params,\n      });\n\n      // Emit success event\n      this.eventBus.emit('tool:executed', {\n        tool: toolName,\n        result,\n        params,\n        duration: Date.now() - this.activeExecutions.get(toolName).startTime,\n      });\n\n      return result;\n    } catch (error) {\n      this.eventBus.emit('tool:error', {\n        tool: toolName,\n        error: error.message,\n        params,\n      });\n      throw error;\n    } finally {\n      // Remove from active executions\n      this.activeExecutions.delete(toolName);\n    }\n  }\n\n  /**\n   * Execute real MCP tool (when server is connected)\n   */\n  async executeRealTool(toolName, params) {\n    // This would call the actual MCP tool\n    // For now, we'll simulate the call\n    const mcpToolName = `mcp__claude-flow__${toolName}`;\n\n    if (typeof window !== 'undefined' && window.claudeFlowMCP) {\n      return await window.claudeFlowMCP.execute(mcpToolName, params);\n    }\n\n    // Node.js environment\n    if (typeof process !== 'undefined') {\n      // This would import and execute the actual MCP tool\n      // For now, return mock data\n      return this.executeMockTool(toolName, params);\n    }\n\n    throw new Error('MCP server not available');\n  }\n\n  /**\n   * Execute mock tool (for development/testing)\n   */\n  async executeMockTool(toolName, params) {\n    // Simulate execution delay\n    await new Promise((resolve) => setTimeout(resolve, 100 + Math.random() * 500));\n\n    const mockResults = {\n      // Neural tools\n      neural_train: { success: true, epochs: params.epochs || 50, accuracy: 0.95, loss: 0.05 },\n      neural_predict: { prediction: 'sample_prediction', confidence: 0.87 },\n      neural_status: { modelId: params.modelId, status: 'ready', accuracy: 0.92 },\n      neural_patterns: { patterns: ['pattern1', 'pattern2'], insights: 'analysis complete' },\n\n      // Memory tools\n      memory_usage: {\n        action: params.action,\n        key: params.key,\n        success: true,\n        result: params.action === 'retrieve' ? 'sample_value' : 'stored',\n      },\n      memory_backup: { backupId: 'backup_' + Date.now(), size: '1.2MB', success: true },\n      memory_analytics: { entries: 42, size: '156KB', namespaces: 4 },\n\n      // Monitoring tools\n      performance_report: {\n        cpu: 45,\n        memory: 67,\n        uptime: 3600,\n        efficiency: 92,\n        bottlenecks: ['network_io', 'memory_allocation'],\n      },\n      bottleneck_analyze: {\n        component: params.component,\n        issues: ['high_cpu_usage', 'memory_leaks'],\n        recommendations: ['optimize_queries', 'increase_cache'],\n      },\n\n      // Workflow tools\n      workflow_create: { workflowId: 'wf_' + Date.now(), status: 'created' },\n      workflow_execute: { workflowId: params.workflowId, status: 'completed', duration: 1500 },\n      task_orchestrate: { taskId: 'task_' + Date.now(), status: 'orchestrated', agents: 3 },\n\n      // GitHub tools\n      github_repo_analyze: {\n        repo: params.repo,\n        score: 85,\n        issues: 12,\n        complexity: 'medium',\n        recommendations: ['add_tests', 'update_dependencies'],\n      },\n\n      // DAA tools\n      daa_agent_create: {\n        agentId: 'agent_' + Date.now(),\n        type: params.agent_type,\n        status: 'created',\n      },\n      daa_capability_match: { matches: ['agent1', 'agent2'], confidence: 0.89 },\n\n      // System tools\n      security_scan: {\n        target: params.target,\n        vulnerabilities: 2,\n        score: 'A-',\n        issues: ['outdated_dependencies', 'weak_encryption'],\n      },\n      health_check: { status: 'healthy', components: { all: 'ok' }, uptime: 3600 },\n    };\n\n    return mockResults[toolName] || { success: true, message: 'Mock execution completed' };\n  }\n\n  /**\n   * Get cache key for tool and params\n   */\n  getCacheKey(toolName, params) {\n    return `${toolName}_${JSON.stringify(params)}`;\n  }\n\n  /**\n   * Cache tool result\n   */\n  cacheResult(cacheKey, result) {\n    this.cache.set(cacheKey, {\n      result,\n      timestamp: Date.now(),\n      ttl: 5 * 60 * 1000, // 5 minutes\n    });\n  }\n\n  /**\n   * Check if cache entry is expired\n   */\n  isCacheExpired(cacheEntry) {\n    return Date.now() - cacheEntry.timestamp > cacheEntry.ttl;\n  }\n\n  /**\n   * Setup tool execution handlers\n   */\n  setupToolHandlers() {\n    this.eventBus.on('tool:execute', async (data) => {\n      try {\n        const result = await this.executeTool(data.tool, data.params);\n        this.eventBus.emit('tool:result', { tool: data.tool, result });\n      } catch (error) {\n        this.eventBus.emit('tool:error', { tool: data.tool, error });\n      }\n    });\n  }\n\n  /**\n   * Initialize caching system\n   */\n  initializeCache() {\n    // Clean expired cache entries every 5 minutes\n    setInterval(\n      () => {\n        for (const [key, entry] of this.cache.entries()) {\n          if (this.isCacheExpired(entry)) {\n            this.cache.delete(key);\n          }\n        }\n      },\n      5 * 60 * 1000,\n    );\n  }\n\n  /**\n   * Get all available tools\n   */\n  getAvailableTools() {\n    return Array.from(this.mcpTools.values());\n  }\n\n  /**\n   * Get tools by category\n   */\n  getToolsByCategory(category) {\n    return this.toolCategories[category] || [];\n  }\n\n  /**\n   * Get tool usage statistics\n   */\n  getToolUsageStats() {\n    const stats = {};\n    for (const [name, tool] of this.mcpTools) {\n      stats[name] = {\n        usageCount: tool.usageCount,\n        lastUsed: tool.lastUsed,\n        category: tool.category,\n      };\n    }\n    return stats;\n  }\n\n  /**\n   * Get system status\n   */\n  async getSystemStatus() {\n    return {\n      mcpServerStatus: this.mcpServerStatus,\n      toolsAvailable: this.mcpTools.size,\n      activeExecutions: this.activeExecutions.size,\n      cacheSize: this.cache.size,\n      isInitialized: this.isInitialized,\n    };\n  }\n\n  /**\n   * Get system uptime\n   */\n  async getSystemUptime() {\n    if (typeof process !== 'undefined') {\n      return process.uptime();\n    }\n    return Date.now() - (window.claudeFlowStartTime || Date.now());\n  }\n\n  /**\n   * Get active tools\n   */\n  async getActiveTools() {\n    return Array.from(this.activeExecutions.keys());\n  }\n\n  /**\n   * Get memory usage\n   */\n  async getMemoryUsage() {\n    if (typeof process !== 'undefined') {\n      const usage = process.memoryUsage();\n      return {\n        used: usage.heapUsed,\n        total: usage.heapTotal,\n        external: usage.external,\n      };\n    }\n    return { used: 0, total: 0, external: 0 };\n  }\n\n  /**\n   * Get swarm status\n   */\n  async getSwarmStatus() {\n    try {\n      const result = await this.executeTool('swarm_status');\n      return result;\n    } catch (error) {\n      return { status: 'offline', error: error.message };\n    }\n  }\n\n  /**\n   * Shutdown MCP integration\n   */\n  async shutdown() {\n    // Cancel all active executions\n    this.activeExecutions.clear();\n\n    // Clear cache\n    this.cache.clear();\n\n    // Clear tool results\n    this.toolResults.clear();\n\n    this.eventBus.emit('mcp:shutdown');\n  }\n}\n\nexport default MCPIntegrationLayer;\n"],"names":["MCPIntegrationLayer","eventBus","mcpTools","Map","toolResults","activeExecutions","cache","isInitialized","mcpServerStatus","toolCategories","neural","memory","monitoring","workflow","github","daa","system","initialize","checkMCPServerStatus","discoverTools","setupToolHandlers","initializeCache","emit","status","console","log","error","window","claudeFlowMCP","process","env","CLAUDE_FLOW_MCP_ENABLED","warn","availableTools","name","description","params","category","tools","Object","entries","forEach","tool","set","lastUsed","usageCount","size","keys","length","executeTool","toolName","Error","get","has","cacheKey","getCacheKey","cached","isCacheExpired","result","startTime","Date","now","executeRealTool","executeMockTool","cacheResult","timestamp","duration","message","delete","mcpToolName","execute","Promise","resolve","setTimeout","Math","random","mockResults","neural_train","success","epochs","accuracy","loss","neural_predict","prediction","confidence","neural_status","modelId","neural_patterns","patterns","insights","memory_usage","action","key","memory_backup","backupId","memory_analytics","namespaces","performance_report","cpu","uptime","efficiency","bottlenecks","bottleneck_analyze","component","issues","recommendations","workflow_create","workflowId","workflow_execute","task_orchestrate","taskId","agents","github_repo_analyze","repo","score","complexity","daa_agent_create","agentId","type","agent_type","daa_capability_match","matches","security_scan","target","vulnerabilities","health_check","components","all","JSON","stringify","ttl","cacheEntry","on","data","setInterval","entry","getAvailableTools","Array","from","values","getToolsByCategory","getToolUsageStats","stats","getSystemStatus","toolsAvailable","cacheSize","getSystemUptime","claudeFlowStartTime","getActiveTools","getMemoryUsage","usage","memoryUsage","used","heapUsed","total","heapTotal","external","getSwarmStatus","shutdown","clear"],"mappings":"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"}