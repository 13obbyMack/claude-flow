{"version":3,"sources":["../../../../../src/ui/web-ui/core/StateManager.js"],"sourcesContent":["/**\n * StateManager - Global state persistence and management\n * Handles UI state, user preferences, and data persistence\n */\n\nimport { EventBus } from './EventBus.js';\n\nexport class StateManager {\n  constructor(eventBus) {\n    this.eventBus = eventBus;\n    this.state = new Map();\n    this.preferences = new Map();\n    this.toolResults = new Map();\n    this.viewStates = new Map();\n    this.sessionData = new Map();\n    this.storageKey = 'claude-flow-ui-state';\n    this.isInitialized = false;\n    this.autoSaveInterval = 30000; // 30 seconds\n    this.autoSaveTimer = null;\n  }\n\n  /**\n   * Initialize state manager\n   */\n  async initialize() {\n    try {\n      // Load persisted state\n      await this.loadPersistedState();\n\n      // Setup auto-save\n      this.setupAutoSave();\n\n      // Setup event handlers\n      this.setupEventHandlers();\n\n      this.isInitialized = true;\n      this.eventBus.emit('state-manager:initialized');\n\n      console.log('💾 State Manager initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize State Manager:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load persisted state from storage\n   */\n  async loadPersistedState() {\n    try {\n      let persistedData = null;\n\n      // Try to load from localStorage in browser\n      if (typeof window !== 'undefined' && window.localStorage) {\n        const stored = localStorage.getItem(this.storageKey);\n        if (stored) {\n          persistedData = JSON.parse(stored);\n        }\n      }\n\n      // Try to load from file system in Node.js\n      if (!persistedData && typeof process !== 'undefined') {\n        try {\n          const fs = await import('fs');\n          const path = await import('path');\n          const stateFile = path.join(process.cwd(), '.claude-flow-state.json');\n\n          if (fs.existsSync(stateFile)) {\n            const data = fs.readFileSync(stateFile, 'utf8');\n            persistedData = JSON.parse(data);\n          }\n        } catch (error) {\n          console.warn('Could not load state from file system:', error.message);\n        }\n      }\n\n      if (persistedData) {\n        this.restoreFromData(persistedData);\n        console.log('💾 Loaded persisted state');\n      } else {\n        this.initializeDefaultState();\n      }\n    } catch (error) {\n      console.warn('Could not load persisted state:', error);\n      this.initializeDefaultState();\n    }\n  }\n\n  /**\n   * Restore state from persisted data\n   */\n  restoreFromData(data) {\n    if (data.preferences) {\n      this.preferences = new Map(Object.entries(data.preferences));\n    }\n\n    if (data.viewStates) {\n      this.viewStates = new Map(Object.entries(data.viewStates));\n    }\n\n    if (data.toolResults) {\n      this.toolResults = new Map(Object.entries(data.toolResults));\n    }\n\n    if (data.sessionData) {\n      this.sessionData = new Map(Object.entries(data.sessionData));\n    }\n\n    if (data.state) {\n      this.state = new Map(Object.entries(data.state));\n    }\n  }\n\n  /**\n   * Initialize default state\n   */\n  initializeDefaultState() {\n    this.preferences.set('theme', 'dark');\n    this.preferences.set('autoSave', true);\n    this.preferences.set('showTooltips', true);\n    this.preferences.set('animationSpeed', 'normal');\n    this.preferences.set('defaultView', 'overview');\n    this.preferences.set('keyboardShortcuts', true);\n    this.preferences.set('realTimeUpdates', true);\n    this.preferences.set('logLevel', 'info');\n\n    this.state.set('initialized', true);\n    this.state.set('version', '2.0.0');\n    this.state.set('installDate', Date.now());\n\n    console.log('💾 Initialized default state');\n  }\n\n  /**\n   * Setup auto-save functionality\n   */\n  setupAutoSave() {\n    if (!this.getPreference('autoSave', true)) {\n      return;\n    }\n\n    this.autoSaveTimer = setInterval(() => {\n      this.persistState();\n    }, this.autoSaveInterval);\n  }\n\n  /**\n   * Persist current state\n   */\n  async persistState() {\n    try {\n      const stateData = {\n        timestamp: Date.now(),\n        version: '2.0.0',\n        preferences: Object.fromEntries(this.preferences),\n        viewStates: Object.fromEntries(this.viewStates),\n        toolResults: Object.fromEntries(this.toolResults),\n        sessionData: Object.fromEntries(this.sessionData),\n        state: Object.fromEntries(this.state),\n      };\n\n      // Save to localStorage in browser\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.setItem(this.storageKey, JSON.stringify(stateData));\n      }\n\n      // Save to file system in Node.js\n      if (typeof process !== 'undefined') {\n        try {\n          const fs = await import('fs');\n          const path = await import('path');\n          const stateFile = path.join(process.cwd(), '.claude-flow-state.json');\n\n          fs.writeFileSync(stateFile, JSON.stringify(stateData, null, 2));\n        } catch (error) {\n          console.warn('Could not save state to file system:', error.message);\n        }\n      }\n\n      this.eventBus.emit('state:persisted', { timestamp: Date.now() });\n    } catch (error) {\n      console.error('Failed to persist state:', error);\n      this.eventBus.emit('state:error', { error: error.message });\n    }\n  }\n\n  /**\n   * Get preference value\n   */\n  getPreference(key, defaultValue = null) {\n    return this.preferences.get(key) ?? defaultValue;\n  }\n\n  /**\n   * Set preference value\n   */\n  setPreference(key, value) {\n    this.preferences.set(key, value);\n    this.eventBus.emit('preference:changed', { key, value });\n\n    // Auto-save if enabled\n    if (this.getPreference('autoSave', true)) {\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Get multiple preferences\n   */\n  getPreferences(keys) {\n    const result = {};\n    for (const key of keys) {\n      result[key] = this.preferences.get(key);\n    }\n    return result;\n  }\n\n  /**\n   * Set multiple preferences\n   */\n  setPreferences(preferences) {\n    for (const [key, value] of Object.entries(preferences)) {\n      this.preferences.set(key, value);\n    }\n\n    this.eventBus.emit('preferences:changed', preferences);\n\n    if (this.getPreference('autoSave', true)) {\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Get all user preferences\n   */\n  getUserPreferences() {\n    return Object.fromEntries(this.preferences);\n  }\n\n  /**\n   * Get state value\n   */\n  getState(key, defaultValue = null) {\n    return this.state.get(key) ?? defaultValue;\n  }\n\n  /**\n   * Set state value\n   */\n  setState(key, value) {\n    this.state.set(key, value);\n    this.eventBus.emit('state:changed', { key, value });\n\n    if (this.getPreference('autoSave', true)) {\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Get view state\n   */\n  getViewState(viewId) {\n    return this.viewStates.get(viewId);\n  }\n\n  /**\n   * Set view state\n   */\n  setViewState(viewId, state) {\n    const existing = this.viewStates.get(viewId) || {};\n    const newState = { ...existing, ...state, lastUpdate: Date.now() };\n\n    this.viewStates.set(viewId, newState);\n    this.eventBus.emit('view-state:changed', { viewId, state: newState });\n\n    if (this.getPreference('autoSave', true)) {\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Clear view state\n   */\n  clearViewState(viewId) {\n    this.viewStates.delete(viewId);\n    this.eventBus.emit('view-state:cleared', { viewId });\n  }\n\n  /**\n   * Get tool result\n   */\n  getToolResult(toolName) {\n    return this.toolResults.get(toolName);\n  }\n\n  /**\n   * Set tool result\n   */\n  setToolResult(toolName, result) {\n    const resultData = {\n      result,\n      timestamp: Date.now(),\n      tool: toolName,\n    };\n\n    this.toolResults.set(toolName, resultData);\n    this.eventBus.emit('tool-result:stored', { toolName, result });\n\n    // Keep only last 100 results to manage memory\n    if (this.toolResults.size > 100) {\n      const entries = Array.from(this.toolResults.entries());\n      entries.sort((a, b) => b[1].timestamp - a[1].timestamp);\n\n      this.toolResults.clear();\n      for (const [key, value] of entries.slice(0, 100)) {\n        this.toolResults.set(key, value);\n      }\n    }\n\n    if (this.getPreference('autoSave', true)) {\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Get recent tool results\n   */\n  getRecentToolResults(limit = 10) {\n    const results = Array.from(this.toolResults.entries())\n      .sort((a, b) => b[1].timestamp - a[1].timestamp)\n      .slice(0, limit);\n\n    return results.map(([tool, data]) => ({\n      tool,\n      ...data,\n    }));\n  }\n\n  /**\n   * Get session data\n   */\n  getSessionData(key) {\n    return this.sessionData.get(key);\n  }\n\n  /**\n   * Set session data\n   */\n  setSessionData(key, value) {\n    this.sessionData.set(key, value);\n    this.eventBus.emit('session-data:changed', { key, value });\n  }\n\n  /**\n   * Clear session data\n   */\n  clearSessionData() {\n    this.sessionData.clear();\n    this.eventBus.emit('session-data:cleared');\n  }\n\n  /**\n   * Export state data\n   */\n  exportState() {\n    return {\n      timestamp: Date.now(),\n      version: '2.0.0',\n      preferences: Object.fromEntries(this.preferences),\n      viewStates: Object.fromEntries(this.viewStates),\n      toolResults: Object.fromEntries(this.toolResults),\n      sessionData: Object.fromEntries(this.sessionData),\n      state: Object.fromEntries(this.state),\n    };\n  }\n\n  /**\n   * Import state data\n   */\n  importState(stateData) {\n    try {\n      this.restoreFromData(stateData);\n      this.eventBus.emit('state:imported', { timestamp: Date.now() });\n      console.log('💾 State imported successfully');\n    } catch (error) {\n      console.error('Failed to import state:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Reset to default state\n   */\n  resetState() {\n    this.state.clear();\n    this.preferences.clear();\n    this.viewStates.clear();\n    this.toolResults.clear();\n    this.sessionData.clear();\n\n    this.initializeDefaultState();\n    this.persistState();\n\n    this.eventBus.emit('state:reset', { timestamp: Date.now() });\n    console.log('💾 State reset to defaults');\n  }\n\n  /**\n   * Clear specific data types\n   */\n  clearData(types = []) {\n    if (types.includes('preferences') || types.length === 0) {\n      this.preferences.clear();\n    }\n\n    if (types.includes('viewStates') || types.length === 0) {\n      this.viewStates.clear();\n    }\n\n    if (types.includes('toolResults') || types.length === 0) {\n      this.toolResults.clear();\n    }\n\n    if (types.includes('sessionData') || types.length === 0) {\n      this.sessionData.clear();\n    }\n\n    this.eventBus.emit('data:cleared', { types, timestamp: Date.now() });\n  }\n\n  /**\n   * Get state statistics\n   */\n  getStateStats() {\n    return {\n      preferences: this.preferences.size,\n      viewStates: this.viewStates.size,\n      toolResults: this.toolResults.size,\n      sessionData: this.sessionData.size,\n      generalState: this.state.size,\n      lastSave: this.state.get('lastSave'),\n      autoSaveEnabled: this.getPreference('autoSave', true),\n    };\n  }\n\n  /**\n   * Setup debounced save to avoid excessive writes\n   */\n  debouncedSave() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    this.saveTimeout = setTimeout(() => {\n      this.persistState();\n    }, 1000); // Save after 1 second of inactivity\n  }\n\n  /**\n   * Persist all state immediately\n   */\n  async persistAllState() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    await this.persistState();\n  }\n\n  /**\n   * Setup event handlers\n   */\n  setupEventHandlers() {\n    // Listen for shutdown events\n    this.eventBus.on('ui:shutdown', async () => {\n      await this.persistAllState();\n    });\n\n    // Listen for preference changes from UI\n    this.eventBus.on('ui:preference:set', (data) => {\n      this.setPreference(data.key, data.value);\n    });\n\n    // Listen for state changes from UI\n    this.eventBus.on('ui:state:set', (data) => {\n      this.setState(data.key, data.value);\n    });\n\n    // Listen for tool results\n    this.eventBus.on('tool:executed', (data) => {\n      this.setToolResult(data.tool, data.result);\n    });\n  }\n\n  /**\n   * Cleanup and shutdown\n   */\n  async shutdown() {\n    // Clear auto-save timer\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n    }\n\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Final save\n    await this.persistAllState();\n\n    this.eventBus.emit('state-manager:shutdown');\n  }\n}\n\nexport default StateManager;\n"],"names":["StateManager","eventBus","state","Map","preferences","toolResults","viewStates","sessionData","storageKey","isInitialized","autoSaveInterval","autoSaveTimer","initialize","loadPersistedState","setupAutoSave","setupEventHandlers","emit","console","log","error","persistedData","window","localStorage","stored","getItem","JSON","parse","process","fs","path","stateFile","join","cwd","existsSync","data","readFileSync","warn","message","restoreFromData","initializeDefaultState","Object","entries","set","Date","now","getPreference","setInterval","persistState","stateData","timestamp","version","fromEntries","setItem","stringify","writeFileSync","key","defaultValue","get","setPreference","value","debouncedSave","getPreferences","keys","result","setPreferences","getUserPreferences","getState","setState","getViewState","viewId","setViewState","existing","newState","lastUpdate","clearViewState","delete","getToolResult","toolName","setToolResult","resultData","tool","size","Array","from","sort","a","b","clear","slice","getRecentToolResults","limit","results","map","getSessionData","setSessionData","clearSessionData","exportState","importState","resetState","clearData","types","includes","length","getStateStats","generalState","lastSave","autoSaveEnabled","saveTimeout","clearTimeout","setTimeout","persistAllState","on","shutdown","clearInterval"],"mappings":"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"}