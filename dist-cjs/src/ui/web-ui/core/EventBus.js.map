{"version":3,"sources":["../../../../../src/ui/web-ui/core/EventBus.js"],"sourcesContent":["/**\n * EventBus - Central event communication system for the Web UI\n * Enables loose coupling between components and real-time updates\n */\n\nexport class EventBus {\n  constructor() {\n    this.events = new Map();\n    this.onceEvents = new Map();\n    this.wildcardHandlers = new Map();\n    this.eventHistory = [];\n    this.maxHistorySize = 1000;\n    this.isLogging = true;\n  }\n\n  /**\n   * Subscribe to an event\n   */\n  on(event, handler, context = null) {\n    if (typeof handler !== 'function') {\n      throw new Error('Event handler must be a function');\n    }\n\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n\n    const handlerInfo = {\n      handler,\n      context,\n      id: this.generateHandlerId(),\n    };\n\n    this.events.get(event).push(handlerInfo);\n\n    if (this.isLogging) {\n      console.debug(`游니 EventBus: Subscribed to '${event}'`);\n    }\n\n    // Return unsubscribe function\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Subscribe to an event (once only)\n   */\n  once(event, handler, context = null) {\n    if (typeof handler !== 'function') {\n      throw new Error('Event handler must be a function');\n    }\n\n    if (!this.onceEvents.has(event)) {\n      this.onceEvents.set(event, []);\n    }\n\n    const handlerInfo = {\n      handler,\n      context,\n      id: this.generateHandlerId(),\n    };\n\n    this.onceEvents.get(event).push(handlerInfo);\n\n    if (this.isLogging) {\n      console.debug(`游니 EventBus: Subscribed once to '${event}'`);\n    }\n\n    // Return unsubscribe function\n    return () => this.offOnce(event, handler);\n  }\n\n  /**\n   * Subscribe to events with wildcard patterns\n   */\n  onWildcard(pattern, handler, context = null) {\n    if (typeof handler !== 'function') {\n      throw new Error('Event handler must be a function');\n    }\n\n    if (!this.wildcardHandlers.has(pattern)) {\n      this.wildcardHandlers.set(pattern, []);\n    }\n\n    const handlerInfo = {\n      handler,\n      context,\n      id: this.generateHandlerId(),\n      regex: this.createWildcardRegex(pattern),\n    };\n\n    this.wildcardHandlers.get(pattern).push(handlerInfo);\n\n    if (this.isLogging) {\n      console.debug(`游니 EventBus: Subscribed to wildcard pattern '${pattern}'`);\n    }\n\n    // Return unsubscribe function\n    return () => this.offWildcard(pattern, handler);\n  }\n\n  /**\n   * Unsubscribe from an event\n   */\n  off(event, handler) {\n    const handlers = this.events.get(event);\n    if (!handlers) return false;\n\n    const index = handlers.findIndex((h) => h.handler === handler);\n    if (index === -1) return false;\n\n    handlers.splice(index, 1);\n\n    if (handlers.length === 0) {\n      this.events.delete(event);\n    }\n\n    if (this.isLogging) {\n      console.debug(`游니 EventBus: Unsubscribed from '${event}'`);\n    }\n\n    return true;\n  }\n\n  /**\n   * Unsubscribe from a once event\n   */\n  offOnce(event, handler) {\n    const handlers = this.onceEvents.get(event);\n    if (!handlers) return false;\n\n    const index = handlers.findIndex((h) => h.handler === handler);\n    if (index === -1) return false;\n\n    handlers.splice(index, 1);\n\n    if (handlers.length === 0) {\n      this.onceEvents.delete(event);\n    }\n\n    return true;\n  }\n\n  /**\n   * Unsubscribe from wildcard pattern\n   */\n  offWildcard(pattern, handler) {\n    const handlers = this.wildcardHandlers.get(pattern);\n    if (!handlers) return false;\n\n    const index = handlers.findIndex((h) => h.handler === handler);\n    if (index === -1) return false;\n\n    handlers.splice(index, 1);\n\n    if (handlers.length === 0) {\n      this.wildcardHandlers.delete(pattern);\n    }\n\n    return true;\n  }\n\n  /**\n   * Emit an event\n   */\n  emit(event, data = null) {\n    const eventInfo = {\n      event,\n      data,\n      timestamp: Date.now(),\n      id: this.generateEventId(),\n    };\n\n    // Add to history\n    this.addToHistory(eventInfo);\n\n    if (this.isLogging) {\n      console.debug(`游니 EventBus: Emitting '${event}'`, data);\n    }\n\n    let handlersExecuted = 0;\n\n    // Execute regular event handlers\n    const handlers = this.events.get(event);\n    if (handlers) {\n      for (const handlerInfo of [...handlers]) {\n        try {\n          if (handlerInfo.context) {\n            handlerInfo.handler.call(handlerInfo.context, data, eventInfo);\n          } else {\n            handlerInfo.handler(data, eventInfo);\n          }\n          handlersExecuted++;\n        } catch (error) {\n          console.error(`游니 EventBus: Error in handler for '${event}':`, error);\n          this.emit('error', { event, error, handlerInfo });\n        }\n      }\n    }\n\n    // Execute once event handlers\n    const onceHandlers = this.onceEvents.get(event);\n    if (onceHandlers) {\n      for (const handlerInfo of [...onceHandlers]) {\n        try {\n          if (handlerInfo.context) {\n            handlerInfo.handler.call(handlerInfo.context, data, eventInfo);\n          } else {\n            handlerInfo.handler(data, eventInfo);\n          }\n          handlersExecuted++;\n        } catch (error) {\n          console.error(`游니 EventBus: Error in once handler for '${event}':`, error);\n          this.emit('error', { event, error, handlerInfo });\n        }\n      }\n      // Clear once handlers after execution\n      this.onceEvents.delete(event);\n    }\n\n    // Execute wildcard handlers\n    for (const [pattern, handlers] of this.wildcardHandlers) {\n      for (const handlerInfo of handlers) {\n        if (handlerInfo.regex.test(event)) {\n          try {\n            if (handlerInfo.context) {\n              handlerInfo.handler.call(handlerInfo.context, data, eventInfo);\n            } else {\n              handlerInfo.handler(data, eventInfo);\n            }\n            handlersExecuted++;\n          } catch (error) {\n            console.error(`游니 EventBus: Error in wildcard handler for '${pattern}':`, error);\n            this.emit('error', { event, error, handlerInfo, pattern });\n          }\n        }\n      }\n    }\n\n    return handlersExecuted;\n  }\n\n  /**\n   * Emit event asynchronously\n   */\n  async emitAsync(event, data = null) {\n    const eventInfo = {\n      event,\n      data,\n      timestamp: Date.now(),\n      id: this.generateEventId(),\n    };\n\n    // Add to history\n    this.addToHistory(eventInfo);\n\n    if (this.isLogging) {\n      console.debug(`游니 EventBus: Emitting async '${event}'`, data);\n    }\n\n    const promises = [];\n\n    // Execute regular event handlers\n    const handlers = this.events.get(event);\n    if (handlers) {\n      for (const handlerInfo of [...handlers]) {\n        const promise = this.executeHandlerAsync(handlerInfo, data, eventInfo);\n        promises.push(promise);\n      }\n    }\n\n    // Execute once event handlers\n    const onceHandlers = this.onceEvents.get(event);\n    if (onceHandlers) {\n      for (const handlerInfo of [...onceHandlers]) {\n        const promise = this.executeHandlerAsync(handlerInfo, data, eventInfo);\n        promises.push(promise);\n      }\n      // Clear once handlers after execution\n      this.onceEvents.delete(event);\n    }\n\n    // Execute wildcard handlers\n    for (const [pattern, handlers] of this.wildcardHandlers) {\n      for (const handlerInfo of handlers) {\n        if (handlerInfo.regex.test(event)) {\n          const promise = this.executeHandlerAsync(handlerInfo, data, eventInfo);\n          promises.push(promise);\n        }\n      }\n    }\n\n    const results = await Promise.allSettled(promises);\n\n    // Handle any rejections\n    const failures = results.filter((r) => r.status === 'rejected');\n    if (failures.length > 0) {\n      console.error(`游니 EventBus: ${failures.length} handlers failed for '${event}'`);\n      failures.forEach((failure) => {\n        this.emit('error', { event, error: failure.reason });\n      });\n    }\n\n    return results.length;\n  }\n\n  /**\n   * Execute handler asynchronously\n   */\n  async executeHandlerAsync(handlerInfo, data, eventInfo) {\n    try {\n      let result;\n      if (handlerInfo.context) {\n        result = handlerInfo.handler.call(handlerInfo.context, data, eventInfo);\n      } else {\n        result = handlerInfo.handler(data, eventInfo);\n      }\n\n      // If handler returns a promise, await it\n      if (result && typeof result.then === 'function') {\n        return await result;\n      }\n\n      return result;\n    } catch (error) {\n      console.error(`游니 EventBus: Error in async handler:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Wait for an event to be emitted\n   */\n  waitFor(event, timeout = 5000) {\n    return new Promise((resolve, reject) => {\n      let timeoutId;\n\n      const unsubscribe = this.once(event, (data) => {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        resolve(data);\n      });\n\n      if (timeout > 0) {\n        timeoutId = setTimeout(() => {\n          unsubscribe();\n          reject(new Error(`Timeout waiting for event '${event}' after ${timeout}ms`));\n        }, timeout);\n      }\n    });\n  }\n\n  /**\n   * Remove all event listeners\n   */\n  removeAllListeners(event = null) {\n    if (event) {\n      this.events.delete(event);\n      this.onceEvents.delete(event);\n\n      // Remove matching wildcard handlers\n      for (const [pattern, handlers] of this.wildcardHandlers) {\n        if (pattern === event) {\n          this.wildcardHandlers.delete(pattern);\n        }\n      }\n    } else {\n      this.events.clear();\n      this.onceEvents.clear();\n      this.wildcardHandlers.clear();\n    }\n\n    if (this.isLogging) {\n      console.debug(`游니 EventBus: Removed all listeners${event ? ` for '${event}'` : ''}`);\n    }\n  }\n\n  /**\n   * Get event listeners count\n   */\n  listenerCount(event) {\n    const regular = this.events.get(event)?.length || 0;\n    const once = this.onceEvents.get(event)?.length || 0;\n\n    let wildcard = 0;\n    for (const [pattern, handlers] of this.wildcardHandlers) {\n      const regex = this.createWildcardRegex(pattern);\n      if (regex.test(event)) {\n        wildcard += handlers.length;\n      }\n    }\n\n    return regular + once + wildcard;\n  }\n\n  /**\n   * Get all event names\n   */\n  eventNames() {\n    const names = new Set();\n\n    for (const event of this.events.keys()) {\n      names.add(event);\n    }\n\n    for (const event of this.onceEvents.keys()) {\n      names.add(event);\n    }\n\n    return Array.from(names);\n  }\n\n  /**\n   * Get event history\n   */\n  getEventHistory(limit = 100) {\n    return this.eventHistory.slice(-limit);\n  }\n\n  /**\n   * Get events by pattern\n   */\n  getEventsByPattern(pattern, limit = 100) {\n    const regex = this.createWildcardRegex(pattern);\n    return this.eventHistory.filter((event) => regex.test(event.event)).slice(-limit);\n  }\n\n  /**\n   * Clear event history\n   */\n  clearHistory() {\n    this.eventHistory = [];\n  }\n\n  /**\n   * Enable/disable logging\n   */\n  setLogging(enabled) {\n    this.isLogging = enabled;\n  }\n\n  /**\n   * Create wildcard regex\n   */\n  createWildcardRegex(pattern) {\n    const escaped = pattern\n      .replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replace(/\\*/g, '.*')\n      .replace(/\\?/g, '.');\n\n    return new RegExp(`^${escaped}$`);\n  }\n\n  /**\n   * Generate unique handler ID\n   */\n  generateHandlerId() {\n    return `handler_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Generate unique event ID\n   */\n  generateEventId() {\n    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Add event to history\n   */\n  addToHistory(eventInfo) {\n    this.eventHistory.push(eventInfo);\n\n    // Keep history size under control\n    if (this.eventHistory.length > this.maxHistorySize) {\n      this.eventHistory = this.eventHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  /**\n   * Get statistics\n   */\n  getStats() {\n    return {\n      regularEvents: this.events.size,\n      onceEvents: this.onceEvents.size,\n      wildcardPatterns: this.wildcardHandlers.size,\n      historySize: this.eventHistory.length,\n      totalHandlers:\n        Array.from(this.events.values()).reduce((sum, handlers) => sum + handlers.length, 0) +\n        Array.from(this.onceEvents.values()).reduce((sum, handlers) => sum + handlers.length, 0) +\n        Array.from(this.wildcardHandlers.values()).reduce(\n          (sum, handlers) => sum + handlers.length,\n          0,\n        ),\n    };\n  }\n\n  /**\n   * Debug information\n   */\n  debug() {\n    const stats = this.getStats();\n    console.group('游니 EventBus Debug Info');\n    console.log('Statistics:', stats);\n    console.log('Regular Events:', Array.from(this.events.keys()));\n    console.log('Once Events:', Array.from(this.onceEvents.keys()));\n    console.log('Wildcard Patterns:', Array.from(this.wildcardHandlers.keys()));\n    console.log('Recent History:', this.getEventHistory(10));\n    console.groupEnd();\n  }\n}\n\nexport default EventBus;\n"],"names":["EventBus","events","Map","onceEvents","wildcardHandlers","eventHistory","maxHistorySize","isLogging","on","event","handler","context","Error","has","set","handlerInfo","id","generateHandlerId","get","push","console","debug","off","once","offOnce","onWildcard","pattern","regex","createWildcardRegex","offWildcard","handlers","index","findIndex","h","splice","length","delete","emit","data","eventInfo","timestamp","Date","now","generateEventId","addToHistory","handlersExecuted","call","error","onceHandlers","test","emitAsync","promises","promise","executeHandlerAsync","results","Promise","allSettled","failures","filter","r","status","forEach","failure","reason","result","then","waitFor","timeout","resolve","reject","timeoutId","unsubscribe","clearTimeout","setTimeout","removeAllListeners","clear","listenerCount","regular","wildcard","eventNames","names","Set","keys","add","Array","from","getEventHistory","limit","slice","getEventsByPattern","clearHistory","setLogging","enabled","escaped","replace","RegExp","Math","random","toString","substr","getStats","regularEvents","size","wildcardPatterns","historySize","totalHandlers","values","reduce","sum","stats","group","log","groupEnd"],"mappings":"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"}