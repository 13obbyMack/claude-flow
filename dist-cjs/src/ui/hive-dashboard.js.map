{"version":3,"sources":["../../../src/ui/hive-dashboard.ts"],"sourcesContent":["/**\n * Hive Mind Monitoring Dashboard\n * Real-time visualization of swarm activity and consensus\n */\n\nimport { HiveOrchestrator } from '../coordination/hive-orchestrator.js';\nimport { HiveCommunicationProtocol } from '../coordination/hive-protocol.js';\n\nexport interface HiveDashboardData {\n  swarmId: string;\n  status: 'initializing' | 'active' | 'voting' | 'executing' | 'completed';\n  agents: AgentStatus[];\n  tasks: TaskProgress[];\n  consensus: ConsensusMetrics;\n  communication: CommunicationStats;\n  performance: PerformanceMetrics;\n  timestamp: number;\n}\n\nexport interface AgentStatus {\n  id: string;\n  name: string;\n  type: string;\n  status: 'idle' | 'thinking' | 'voting' | 'executing' | 'communicating';\n  currentTask?: string;\n  workload: number; // 0-100\n  votes: number;\n  contributions: number;\n}\n\nexport interface TaskProgress {\n  id: string;\n  type: string;\n  description: string;\n  status: string;\n  assignedTo?: string;\n  progress: number; // 0-100\n  dependencies: string[];\n  votes?: { approve: number; reject: number };\n}\n\nexport interface ConsensusMetrics {\n  totalDecisions: number;\n  approvedDecisions: number;\n  rejectedDecisions: number;\n  averageConsensus: number;\n  currentVotes: VoteStatus[];\n}\n\nexport interface VoteStatus {\n  topic: string;\n  votes: { for: number; against: number; pending: number };\n  deadline?: number;\n}\n\nexport interface CommunicationStats {\n  totalMessages: number;\n  messageRate: number; // messages per minute\n  channelActivity: Map<string, number>;\n  knowledgeShared: number;\n}\n\nexport interface PerformanceMetrics {\n  tasksCompleted: number;\n  tasksPending: number;\n  avgExecutionTime: number;\n  successRate: number;\n  qualityScore: number;\n}\n\nexport class HiveDashboard {\n  private orchestrator: HiveOrchestrator;\n  private protocol: HiveCommunicationProtocol;\n  private refreshInterval: number = 1000; // 1 second\n  private updateCallback?: (data: HiveDashboardData) => void;\n\n  constructor(orchestrator: HiveOrchestrator, protocol: HiveCommunicationProtocol) {\n    this.orchestrator = orchestrator;\n    this.protocol = protocol;\n  }\n\n  /**\n   * Start monitoring with callback for updates\n   */\n  startMonitoring(callback: (data: HiveDashboardData) => void) {\n    this.updateCallback = callback;\n    this.update();\n\n    // Set up periodic updates\n    const interval = setInterval(() => {\n      this.update();\n    }, this.refreshInterval);\n\n    return () => clearInterval(interval);\n  }\n\n  /**\n   * Get current dashboard data\n   */\n  private update() {\n    const data = this.collectDashboardData();\n    if (this.updateCallback) {\n      this.updateCallback(data);\n    }\n  }\n\n  /**\n   * Collect all dashboard data\n   */\n  private collectDashboardData(): HiveDashboardData {\n    const perfMetrics = this.orchestrator.getPerformanceMetrics();\n    const commStats = this.protocol.getStatistics();\n\n    return {\n      swarmId: 'current-swarm',\n      status: this.determineSwarmStatus(perfMetrics),\n      agents: this.getAgentStatuses(),\n      tasks: this.getTaskProgress(),\n      consensus: this.getConsensusMetrics(),\n      communication: this.getCommunicationStats(commStats),\n      performance: this.getPerformanceMetrics(perfMetrics),\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Determine overall swarm status\n   */\n  private determineSwarmStatus(metrics: any): HiveDashboardData['status'] {\n    if (metrics.executingTasks > 0) return 'executing';\n    if (metrics.pendingTasks > 0) return 'active';\n    if (metrics.completedTasks === metrics.totalTasks) return 'completed';\n    return 'initializing';\n  }\n\n  /**\n   * Get status of all agents\n   */\n  private getAgentStatuses(): AgentStatus[] {\n    // This would be populated from actual agent data\n    return [\n      {\n        id: 'queen-1',\n        name: 'Queen-Genesis',\n        type: 'queen',\n        status: 'thinking',\n        workload: 85,\n        votes: 15,\n        contributions: 42,\n      },\n      {\n        id: 'architect-1',\n        name: 'Architect-1',\n        type: 'architect',\n        status: 'executing',\n        currentTask: 'Design system architecture',\n        workload: 70,\n        votes: 8,\n        contributions: 23,\n      },\n      {\n        id: 'worker-1',\n        name: 'Worker-1',\n        type: 'worker',\n        status: 'voting',\n        workload: 45,\n        votes: 12,\n        contributions: 31,\n      },\n    ];\n  }\n\n  /**\n   * Get task progress information\n   */\n  private getTaskProgress(): TaskProgress[] {\n    const taskGraph = this.orchestrator.getTaskGraph();\n    return taskGraph.nodes.map((node) => ({\n      id: node.id,\n      type: node.type,\n      description: `${node.type} task`,\n      status: node.status,\n      assignedTo: node.assignedTo,\n      progress: this.calculateTaskProgress(node.status),\n      dependencies: [],\n    }));\n  }\n\n  /**\n   * Calculate task progress based on status\n   */\n  private calculateTaskProgress(status: string): number {\n    switch (status) {\n      case 'completed':\n        return 100;\n      case 'executing':\n        return 50;\n      case 'assigned':\n        return 25;\n      case 'voting':\n        return 10;\n      case 'pending':\n        return 0;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Get consensus metrics\n   */\n  private getConsensusMetrics(): ConsensusMetrics {\n    const metrics = this.orchestrator.getPerformanceMetrics();\n    return {\n      totalDecisions: metrics.totalDecisions,\n      approvedDecisions: metrics.approvedDecisions,\n      rejectedDecisions: metrics.totalDecisions - metrics.approvedDecisions,\n      averageConsensus: metrics.consensusRate,\n      currentVotes: [], // Would be populated from active votes\n    };\n  }\n\n  /**\n   * Get communication statistics\n   */\n  private getCommunicationStats(stats: any): CommunicationStats {\n    return {\n      totalMessages: stats.totalMessages,\n      messageRate: stats.totalMessages / 10, // Approximate rate\n      channelActivity: stats.messagesByType,\n      knowledgeShared: stats.knowledgeEntries,\n    };\n  }\n\n  /**\n   * Get performance metrics\n   */\n  private getPerformanceMetrics(metrics: any): PerformanceMetrics {\n    return {\n      tasksCompleted: metrics.completedTasks,\n      tasksPending: metrics.pendingTasks,\n      avgExecutionTime: metrics.avgExecutionTime,\n      successRate: metrics.totalTasks > 0 ? metrics.completedTasks / metrics.totalTasks : 0,\n      qualityScore: 0.85, // Would be calculated from quality reports\n    };\n  }\n\n  /**\n   * Format dashboard for console output\n   */\n  static formatConsoleOutput(data: HiveDashboardData): string {\n    const output = [];\n\n    // Header\n    output.push('🐝 Hive Mind Dashboard');\n    output.push('═══════════════════════════════════════════════════════════════');\n    output.push(\n      `Status: ${data.status.toUpperCase()} | Time: ${new Date(data.timestamp).toLocaleTimeString()}`,\n    );\n    output.push('');\n\n    // Agents Section\n    output.push('👥 Agent Status');\n    output.push('───────────────────────────────────────────────────────────────');\n    for (const agent of data.agents) {\n      const statusIcon = this.getStatusIcon(agent.status);\n      const workloadBar = this.createProgressBar(agent.workload);\n      output.push(`${statusIcon} ${agent.name} (${agent.type})`);\n      output.push(`   Status: ${agent.status} | Workload: ${workloadBar} ${agent.workload}%`);\n      if (agent.currentTask) {\n        output.push(`   Task: ${agent.currentTask}`);\n      }\n      output.push(`   Votes: ${agent.votes} | Contributions: ${agent.contributions}`);\n      output.push('');\n    }\n\n    // Tasks Section\n    output.push('📋 Task Progress');\n    output.push('───────────────────────────────────────────────────────────────');\n    for (const task of data.tasks) {\n      const progressBar = this.createProgressBar(task.progress);\n      const statusIcon = this.getTaskStatusIcon(task.status);\n      output.push(`${statusIcon} ${task.type}: ${task.description}`);\n      output.push(`   Progress: ${progressBar} ${task.progress}%`);\n      if (task.assignedTo) {\n        output.push(`   Assigned to: ${task.assignedTo}`);\n      }\n      output.push('');\n    }\n\n    // Consensus Section\n    output.push('🗳️ Consensus Metrics');\n    output.push('───────────────────────────────────────────────────────────────');\n    output.push(`Total Decisions: ${data.consensus.totalDecisions}`);\n    output.push(\n      `Approved: ${data.consensus.approvedDecisions} | Rejected: ${data.consensus.rejectedDecisions}`,\n    );\n    output.push(`Average Consensus: ${(data.consensus.averageConsensus * 100).toFixed(1)}%`);\n    output.push('');\n\n    // Performance Section\n    output.push('📊 Performance');\n    output.push('───────────────────────────────────────────────────────────────');\n    output.push(\n      `Tasks: ${data.performance.tasksCompleted}/${data.performance.tasksCompleted + data.performance.tasksPending} completed`,\n    );\n    output.push(`Success Rate: ${(data.performance.successRate * 100).toFixed(1)}%`);\n    output.push(`Quality Score: ${(data.performance.qualityScore * 100).toFixed(1)}%`);\n    output.push(`Avg Execution Time: ${(data.performance.avgExecutionTime / 1000).toFixed(1)}s`);\n    output.push('');\n\n    // Communication Section\n    output.push('💬 Communication');\n    output.push('───────────────────────────────────────────────────────────────');\n    output.push(`Total Messages: ${data.communication.totalMessages}`);\n    output.push(`Message Rate: ${data.communication.messageRate.toFixed(1)}/min`);\n    output.push(`Knowledge Shared: ${data.communication.knowledgeShared} entries`);\n\n    return output.join('\\\\n');\n  }\n\n  /**\n   * Get status icon for agent\n   */\n  private static getStatusIcon(status: AgentStatus['status']): string {\n    switch (status) {\n      case 'idle':\n        return '😴';\n      case 'thinking':\n        return '🤔';\n      case 'voting':\n        return '🗳️';\n      case 'executing':\n        return '⚡';\n      case 'communicating':\n        return '💬';\n      default:\n        return '❓';\n    }\n  }\n\n  /**\n   * Get status icon for task\n   */\n  private static getTaskStatusIcon(status: string): string {\n    switch (status) {\n      case 'pending':\n        return '⭕';\n      case 'voting':\n        return '🗳️';\n      case 'assigned':\n        return '📌';\n      case 'executing':\n        return '🔄';\n      case 'reviewing':\n        return '🔍';\n      case 'completed':\n        return '✅';\n      case 'failed':\n        return '❌';\n      default:\n        return '❓';\n    }\n  }\n\n  /**\n   * Create ASCII progress bar\n   */\n  private static createProgressBar(percentage: number, width: number = 20): string {\n    const filled = Math.round((percentage / 100) * width);\n    const empty = width - filled;\n    return `[${'█'.repeat(filled)}${' '.repeat(empty)}]`;\n  }\n\n  /**\n   * Export dashboard data as JSON\n   */\n  exportData(): string {\n    const data = this.collectDashboardData();\n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Get real-time event stream\n   */\n  getEventStream(): AsyncGenerator<any> {\n    // This would return a stream of dashboard events\n    return (async function* () {\n      while (true) {\n        yield { type: 'update', timestamp: Date.now() };\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    })();\n  }\n}\n"],"names":["HiveDashboard","orchestrator","protocol","refreshInterval","updateCallback","startMonitoring","callback","update","interval","setInterval","clearInterval","data","collectDashboardData","perfMetrics","getPerformanceMetrics","commStats","getStatistics","swarmId","status","determineSwarmStatus","agents","getAgentStatuses","tasks","getTaskProgress","consensus","getConsensusMetrics","communication","getCommunicationStats","performance","timestamp","Date","now","metrics","executingTasks","pendingTasks","completedTasks","totalTasks","id","name","type","workload","votes","contributions","currentTask","taskGraph","getTaskGraph","nodes","map","node","description","assignedTo","progress","calculateTaskProgress","dependencies","totalDecisions","approvedDecisions","rejectedDecisions","averageConsensus","consensusRate","currentVotes","stats","totalMessages","messageRate","channelActivity","messagesByType","knowledgeShared","knowledgeEntries","tasksCompleted","tasksPending","avgExecutionTime","successRate","qualityScore","formatConsoleOutput","output","push","toUpperCase","toLocaleTimeString","agent","statusIcon","getStatusIcon","workloadBar","createProgressBar","task","progressBar","getTaskStatusIcon","toFixed","join","percentage","width","filled","Math","round","empty","repeat","exportData","JSON","stringify","getEventStream","Promise","resolve","setTimeout"],"mappings":"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"}