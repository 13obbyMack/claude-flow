{"version":3,"sources":["../../../../../src/ui/console/js/swarm-visualizer.js"],"sourcesContent":["/**\n * SwarmVisualizer - Real-time swarm monitoring and visualization component\n * Provides interactive swarm topology view with live agent status updates\n */\n\nexport class SwarmVisualizer {\n  constructor(container, componentLibrary) {\n    this.container = container;\n    this.components = componentLibrary;\n    this.swarmData = null;\n    this.agents = new Map();\n    this.connections = new Map();\n    this.topology = 'mesh';\n    this.updateInterval = null;\n    this.isActive = false;\n    \n    // Canvas for topology visualization\n    this.canvas = null;\n    this.ctx = null;\n    this.canvasSize = { width: 800, height: 600 };\n    \n    // Animation state\n    this.animationFrame = null;\n    this.particles = [];\n    \n    this.init();\n  }\n\n  /**\n   * Initialize swarm visualizer\n   */\n  init() {\n    this.createUI();\n    this.setupEventHandlers();\n    console.log('üåä Swarm Visualizer initialized');\n  }\n\n  /**\n   * Create the visualizer UI\n   */\n  createUI() {\n    // Main container\n    const mainPanel = this.components.createToolPanel({\n      title: 'Swarm Visualizer',\n      description: 'Real-time swarm topology and agent monitoring'\n    });\n\n    // Control panel\n    const controlPanel = this.createControlPanel();\n    mainPanel.append(controlPanel);\n\n    // Stats panel\n    const statsPanel = this.createStatsPanel();\n    mainPanel.append(statsPanel);\n\n    // Topology canvas\n    const canvasContainer = this.createTopologyCanvas();\n    mainPanel.append(canvasContainer);\n\n    // Agent details panel\n    const agentPanel = this.createAgentPanel();\n    mainPanel.append(agentPanel);\n\n    this.container.appendChild(mainPanel.element);\n    this.elements = {\n      mainPanel,\n      controlPanel,\n      statsPanel,\n      canvasContainer,\n      agentPanel\n    };\n  }\n\n  /**\n   * Create control panel\n   */\n  createControlPanel() {\n    const panel = document.createElement('div');\n    panel.className = 'swarm-control-panel';\n\n    // Start/Stop controls\n    const startBtn = this.components.createActionButton({\n      type: 'primary',\n      text: 'Start Monitoring',\n      icon: '‚ñ∂Ô∏è',\n      onclick: () => this.startMonitoring()\n    });\n\n    const stopBtn = this.components.createActionButton({\n      type: 'secondary',\n      text: 'Stop',\n      icon: '‚èπÔ∏è',\n      onclick: () => this.stopMonitoring()\n    });\n\n    // Topology selector\n    const topologySelect = document.createElement('select');\n    topologySelect.id = 'topology-selector';\n    topologySelect.innerHTML = `\n      <option value=\"mesh\">Mesh Network</option>\n      <option value=\"hierarchical\">Hierarchical</option>\n      <option value=\"ring\">Ring Topology</option>\n      <option value=\"star\">Star Network</option>\n    `;\n    topologySelect.addEventListener('change', (e) => {\n      this.topology = e.target.value;\n      this.redrawTopology();\n    });\n\n    // Refresh rate selector\n    const refreshSelect = document.createElement('select');\n    refreshSelect.id = 'refresh-rate';\n    refreshSelect.innerHTML = `\n      <option value=\"1000\">1 second</option>\n      <option value=\"2000\" selected>2 seconds</option>\n      <option value=\"5000\">5 seconds</option>\n      <option value=\"10000\">10 seconds</option>\n    `;\n\n    panel.appendChild(startBtn.element);\n    panel.appendChild(stopBtn.element);\n    panel.appendChild(this.createLabel('Topology:', topologySelect));\n    panel.appendChild(this.createLabel('Refresh Rate:', refreshSelect));\n\n    this.controlElements = {\n      startBtn,\n      stopBtn,\n      topologySelect,\n      refreshSelect\n    };\n\n    return panel;\n  }\n\n  /**\n   * Create stats panel\n   */\n  createStatsPanel() {\n    const panel = document.createElement('div');\n    panel.className = 'swarm-stats-panel';\n    panel.style.display = 'flex';\n    panel.style.gap = '16px';\n    panel.style.flexWrap = 'wrap';\n\n    this.statsCards = {\n      totalAgents: this.components.createStatsCard({\n        icon: 'ü§ñ',\n        value: '0',\n        label: 'Total Agents'\n      }),\n      activeAgents: this.components.createStatsCard({\n        icon: '‚úÖ',\n        value: '0',\n        label: 'Active'\n      }),\n      busyAgents: this.components.createStatsCard({\n        icon: '‚öôÔ∏è',\n        value: '0',\n        label: 'Busy'\n      }),\n      idleAgents: this.components.createStatsCard({\n        icon: 'üí§',\n        value: '0',\n        label: 'Idle'\n      }),\n      errorAgents: this.components.createStatsCard({\n        icon: '‚ùå',\n        value: '0',\n        label: 'Errors'\n      }),\n      throughput: this.components.createStatsCard({\n        icon: 'üìä',\n        value: '0/min',\n        label: 'Task Throughput'\n      })\n    };\n\n    Object.values(this.statsCards).forEach(card => {\n      panel.appendChild(card.element);\n    });\n\n    return panel;\n  }\n\n  /**\n   * Create topology canvas\n   */\n  createTopologyCanvas() {\n    const container = document.createElement('div');\n    container.className = 'topology-canvas-container';\n    container.style.cssText = `\n      position: relative;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      margin: 16px 0;\n      overflow: hidden;\n    `;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.canvasSize.width;\n    this.canvas.height = this.canvasSize.height;\n    this.canvas.style.display = 'block';\n    this.ctx = this.canvas.getContext('2d');\n\n    // Canvas event handlers\n    this.canvas.addEventListener('click', (e) => this.handleCanvasClick(e));\n    this.canvas.addEventListener('mousemove', (e) => this.handleCanvasHover(e));\n\n    container.appendChild(this.canvas);\n    return container;\n  }\n\n  /**\n   * Create agent details panel\n   */\n  createAgentPanel() {\n    const panel = document.createElement('div');\n    panel.className = 'agent-details-panel';\n    panel.style.cssText = `\n      background: #2a2a2a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      padding: 16px;\n      margin: 8px 0;\n      min-height: 200px;\n    `;\n\n    const title = document.createElement('h3');\n    title.textContent = 'Agent Details';\n    title.style.color = '#00d4ff';\n    title.style.marginBottom = '12px';\n\n    const content = document.createElement('div');\n    content.id = 'agent-details-content';\n    content.innerHTML = '<p style=\"color: #888;\">Click on an agent to view details</p>';\n\n    panel.appendChild(title);\n    panel.appendChild(content);\n\n    this.agentDetailsContent = content;\n    return panel;\n  }\n\n  /**\n   * Start monitoring\n   */\n  async startMonitoring() {\n    if (this.isActive) return;\n\n    this.isActive = true;\n    this.controlElements.startBtn.setDisabled(true);\n    this.controlElements.stopBtn.setDisabled(false);\n\n    // Start data updates\n    const refreshRate = parseInt(this.controlElements.refreshSelect.value);\n    this.updateInterval = setInterval(() => {\n      this.updateSwarmData();\n    }, refreshRate);\n\n    // Start animation loop\n    this.startAnimation();\n\n    // Initial data fetch\n    await this.updateSwarmData();\n    \n    console.log('üîÑ Swarm monitoring started');\n  }\n\n  /**\n   * Stop monitoring\n   */\n  stopMonitoring() {\n    if (!this.isActive) return;\n\n    this.isActive = false;\n    this.controlElements.startBtn.setDisabled(false);\n    this.controlElements.stopBtn.setDisabled(true);\n\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n\n    console.log('‚èπÔ∏è Swarm monitoring stopped');\n  }\n\n  /**\n   * Update swarm data from memory\n   */\n  async updateSwarmData() {\n    try {\n      // Fetch swarm status from memory\n      const response = await fetch('/api/claude-flow/swarm/status');\n      if (response.ok) {\n        this.swarmData = await response.json();\n        this.processSwarmData();\n        this.updateStats();\n        this.redrawTopology();\n      }\n    } catch (error) {\n      console.warn('Failed to fetch swarm data:', error);\n      // Fallback to mock data for demo\n      this.generateMockData();\n      this.processSwarmData();\n      this.updateStats();\n      this.redrawTopology();\n    }\n  }\n\n  /**\n   * Generate mock data for demonstration\n   */\n  generateMockData() {\n    const agentTypes = ['coder', 'researcher', 'analyzer', 'reviewer', 'tester'];\n    const statuses = ['active', 'busy', 'idle', 'error'];\n    const agentCount = Math.floor(Math.random() * 8) + 3;\n\n    this.swarmData = {\n      id: `swarm_${Date.now()}`,\n      topology: this.topology,\n      agents: [],\n      connections: [],\n      metrics: {\n        totalTasks: Math.floor(Math.random() * 100),\n        completedTasks: Math.floor(Math.random() * 80),\n        failedTasks: Math.floor(Math.random() * 5),\n        averageResponseTime: Math.random() * 1000 + 500,\n        throughput: Math.floor(Math.random() * 20) + 5\n      }\n    };\n\n    // Generate agents\n    for (let i = 0; i < agentCount; i++) {\n      const agent = {\n        id: `agent_${i}`,\n        type: agentTypes[Math.floor(Math.random() * agentTypes.length)],\n        status: statuses[Math.floor(Math.random() * statuses.length)],\n        capabilities: ['task_processing', 'memory_access'],\n        currentTask: Math.random() > 0.5 ? `Task ${Math.floor(Math.random() * 100)}` : null,\n        metrics: {\n          tasksCompleted: Math.floor(Math.random() * 50),\n          successRate: Math.random() * 100,\n          averageTime: Math.random() * 2000 + 200,\n          memoryUsage: Math.random() * 100\n        },\n        position: this.calculateAgentPosition(i, agentCount)\n      };\n      this.swarmData.agents.push(agent);\n    }\n\n    // Generate connections based on topology\n    this.generateConnections();\n  }\n\n  /**\n   * Calculate agent position based on topology\n   */\n  calculateAgentPosition(index, total) {\n    const centerX = this.canvasSize.width / 2;\n    const centerY = this.canvasSize.height / 2;\n    const radius = Math.min(centerX, centerY) * 0.7;\n\n    switch (this.topology) {\n      case 'mesh':\n      case 'ring':\n        const angle = (index * 2 * Math.PI) / total;\n        return {\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle)\n        };\n\n      case 'hierarchical':\n        const levels = Math.ceil(Math.log2(total));\n        const level = Math.floor(Math.log2(index + 1));\n        const positionInLevel = index - (Math.pow(2, level) - 1);\n        const levelWidth = Math.pow(2, level);\n        return {\n          x: centerX + (positionInLevel - levelWidth/2 + 0.5) * (this.canvasSize.width / (levelWidth + 1)),\n          y: 100 + level * (this.canvasSize.height - 200) / (levels - 1)\n        };\n\n      case 'star':\n        if (index === 0) {\n          return { x: centerX, y: centerY };\n        } else {\n          const starAngle = ((index - 1) * 2 * Math.PI) / (total - 1);\n          return {\n            x: centerX + radius * Math.cos(starAngle),\n            y: centerY + radius * Math.sin(starAngle)\n          };\n        }\n\n      default:\n        return {\n          x: Math.random() * (this.canvasSize.width - 100) + 50,\n          y: Math.random() * (this.canvasSize.height - 100) + 50\n        };\n    }\n  }\n\n  /**\n   * Generate connections between agents\n   */\n  generateConnections() {\n    if (!this.swarmData || !this.swarmData.agents) return;\n\n    const agents = this.swarmData.agents;\n    this.swarmData.connections = [];\n\n    switch (this.topology) {\n      case 'mesh':\n        // Full mesh - everyone connected to everyone\n        for (let i = 0; i < agents.length; i++) {\n          for (let j = i + 1; j < agents.length; j++) {\n            this.swarmData.connections.push({\n              from: agents[i].id,\n              to: agents[j].id,\n              strength: Math.random(),\n              latency: Math.random() * 100 + 10\n            });\n          }\n        }\n        break;\n\n      case 'ring':\n        // Ring topology - each agent connected to next\n        for (let i = 0; i < agents.length; i++) {\n          const next = (i + 1) % agents.length;\n          this.swarmData.connections.push({\n            from: agents[i].id,\n            to: agents[next].id,\n            strength: Math.random(),\n            latency: Math.random() * 50 + 5\n          });\n        }\n        break;\n\n      case 'star':\n        // Star topology - all connected to central agent\n        if (agents.length > 0) {\n          for (let i = 1; i < agents.length; i++) {\n            this.swarmData.connections.push({\n              from: agents[0].id,\n              to: agents[i].id,\n              strength: Math.random(),\n              latency: Math.random() * 30 + 5\n            });\n          }\n        }\n        break;\n\n      case 'hierarchical':\n        // Tree structure connections\n        for (let i = 1; i < agents.length; i++) {\n          const parent = Math.floor((i - 1) / 2);\n          this.swarmData.connections.push({\n            from: agents[parent].id,\n            to: agents[i].id,\n            strength: Math.random(),\n            latency: Math.random() * 40 + 5\n          });\n        }\n        break;\n    }\n  }\n\n  /**\n   * Process swarm data and update internal state\n   */\n  processSwarmData() {\n    if (!this.swarmData) return;\n\n    // Update agents map\n    this.agents.clear();\n    this.swarmData.agents?.forEach(agent => {\n      this.agents.set(agent.id, agent);\n    });\n\n    // Update connections map\n    this.connections.clear();\n    this.swarmData.connections?.forEach(conn => {\n      this.connections.set(`${conn.from}-${conn.to}`, conn);\n    });\n  }\n\n  /**\n   * Update statistics display\n   */\n  updateStats() {\n    if (!this.swarmData) return;\n\n    const agents = Array.from(this.agents.values());\n    const statusCounts = agents.reduce((acc, agent) => {\n      acc[agent.status] = (acc[agent.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    this.statsCards.totalAgents.setValue(agents.length.toString());\n    this.statsCards.activeAgents.setValue((statusCounts.active || 0).toString());\n    this.statsCards.busyAgents.setValue((statusCounts.busy || 0).toString());\n    this.statsCards.idleAgents.setValue((statusCounts.idle || 0).toString());\n    this.statsCards.errorAgents.setValue((statusCounts.error || 0).toString());\n    \n    if (this.swarmData.metrics) {\n      this.statsCards.throughput.setValue(`${this.swarmData.metrics.throughput || 0}/min`);\n    }\n  }\n\n  /**\n   * Redraw topology visualization\n   */\n  redrawTopology() {\n    if (!this.ctx || !this.swarmData) return;\n\n    // Clear canvas\n    this.ctx.fillStyle = '#1a1a1a';\n    this.ctx.fillRect(0, 0, this.canvasSize.width, this.canvasSize.height);\n\n    // Draw grid\n    this.drawGrid();\n\n    // Draw connections\n    this.drawConnections();\n\n    // Draw agents\n    this.drawAgents();\n\n    // Draw particles for active connections\n    this.updateParticles();\n  }\n\n  /**\n   * Draw background grid\n   */\n  drawGrid() {\n    this.ctx.strokeStyle = '#333';\n    this.ctx.lineWidth = 1;\n    this.ctx.setLineDash([2, 4]);\n\n    const gridSize = 50;\n    for (let x = 0; x < this.canvasSize.width; x += gridSize) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x, 0);\n      this.ctx.lineTo(x, this.canvasSize.height);\n      this.ctx.stroke();\n    }\n\n    for (let y = 0; y < this.canvasSize.height; y += gridSize) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, y);\n      this.ctx.lineTo(this.canvasSize.width, y);\n      this.ctx.stroke();\n    }\n\n    this.ctx.setLineDash([]);\n  }\n\n  /**\n   * Draw connections between agents\n   */\n  drawConnections() {\n    this.connections.forEach((conn, key) => {\n      const fromAgent = this.agents.get(conn.from);\n      const toAgent = this.agents.get(conn.to);\n\n      if (fromAgent && toAgent && fromAgent.position && toAgent.position) {\n        this.ctx.strokeStyle = `rgba(0, 212, 255, ${conn.strength * 0.6 + 0.2})`;\n        this.ctx.lineWidth = Math.max(1, conn.strength * 3);\n        this.ctx.setLineDash([]);\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(fromAgent.position.x, fromAgent.position.y);\n        this.ctx.lineTo(toAgent.position.x, toAgent.position.y);\n        this.ctx.stroke();\n\n        // Draw latency indicator\n        const midX = (fromAgent.position.x + toAgent.position.x) / 2;\n        const midY = (fromAgent.position.y + toAgent.position.y) / 2;\n        \n        this.ctx.fillStyle = '#666';\n        this.ctx.font = '10px monospace';\n        this.ctx.fillText(`${Math.round(conn.latency)}ms`, midX + 5, midY - 5);\n      }\n    });\n  }\n\n  /**\n   * Draw agent nodes\n   */\n  drawAgents() {\n    this.agents.forEach(agent => {\n      if (!agent.position) return;\n\n      const { x, y } = agent.position;\n      const radius = 25;\n\n      // Agent status colors\n      const statusColors = {\n        active: '#22c55e',\n        busy: '#f59e0b',\n        idle: '#6b7280',\n        error: '#ef4444'\n      };\n\n      // Draw agent circle\n      this.ctx.fillStyle = statusColors[agent.status] || '#6b7280';\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n      this.ctx.fill();\n\n      // Draw agent border\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n\n      // Draw agent type icon\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 12px monospace';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(this.getAgentIcon(agent.type), x, y + 4);\n\n      // Draw agent ID\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = '10px monospace';\n      this.ctx.fillText(agent.id, x, y + radius + 15);\n\n      // Draw current task indicator\n      if (agent.currentTask) {\n        this.ctx.fillStyle = '#00d4ff';\n        this.ctx.beginPath();\n        this.ctx.arc(x + radius - 5, y - radius + 5, 5, 0, 2 * Math.PI);\n        this.ctx.fill();\n      }\n    });\n  }\n\n  /**\n   * Get icon for agent type\n   */\n  getAgentIcon(type) {\n    const icons = {\n      coder: 'üíª',\n      researcher: 'üîç',\n      analyzer: 'üìä',\n      reviewer: '‚úÖ',\n      tester: 'üß™',\n      coordinator: 'üéØ',\n      optimizer: '‚ö°'\n    };\n    return icons[type] || 'ü§ñ';\n  }\n\n  /**\n   * Update and draw particles for active connections\n   */\n  updateParticles() {\n    // Remove old particles\n    this.particles = this.particles.filter(p => p.life > 0);\n\n    // Add new particles for active connections\n    if (Math.random() < 0.3) {\n      this.connections.forEach((conn, key) => {\n        const fromAgent = this.agents.get(conn.from);\n        const toAgent = this.agents.get(conn.to);\n\n        if (fromAgent?.status === 'busy' && toAgent && fromAgent.position && toAgent.position) {\n          this.particles.push({\n            x: fromAgent.position.x,\n            y: fromAgent.position.y,\n            targetX: toAgent.position.x,\n            targetY: toAgent.position.y,\n            progress: 0,\n            life: 1,\n            speed: 0.02,\n            color: conn.strength > 0.7 ? '#00d4ff' : '#888'\n          });\n        }\n      });\n    }\n\n    // Update and draw particles\n    this.particles.forEach(particle => {\n      particle.progress += particle.speed;\n      particle.life -= 0.01;\n\n      const currentX = particle.x + (particle.targetX - particle.x) * particle.progress;\n      const currentY = particle.y + (particle.targetY - particle.y) * particle.progress;\n\n      this.ctx.fillStyle = particle.color;\n      this.ctx.globalAlpha = particle.life;\n      this.ctx.beginPath();\n      this.ctx.arc(currentX, currentY, 3, 0, 2 * Math.PI);\n      this.ctx.fill();\n      this.ctx.globalAlpha = 1;\n    });\n  }\n\n  /**\n   * Handle canvas click events\n   */\n  handleCanvasClick(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Find clicked agent\n    const clickedAgent = Array.from(this.agents.values()).find(agent => {\n      if (!agent.position) return false;\n      const distance = Math.sqrt(\n        Math.pow(x - agent.position.x, 2) + Math.pow(y - agent.position.y, 2)\n      );\n      return distance <= 25;\n    });\n\n    if (clickedAgent) {\n      this.showAgentDetails(clickedAgent);\n    }\n  }\n\n  /**\n   * Handle canvas hover events\n   */\n  handleCanvasHover(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Check if hovering over agent\n    const hoveredAgent = Array.from(this.agents.values()).find(agent => {\n      if (!agent.position) return false;\n      const distance = Math.sqrt(\n        Math.pow(x - agent.position.x, 2) + Math.pow(y - agent.position.y, 2)\n      );\n      return distance <= 25;\n    });\n\n    this.canvas.style.cursor = hoveredAgent ? 'pointer' : 'default';\n  }\n\n  /**\n   * Show agent details\n   */\n  showAgentDetails(agent) {\n    const metrics = agent.metrics || {};\n    const capabilities = agent.capabilities || [];\n\n    this.agentDetailsContent.innerHTML = `\n      <div class=\"agent-details\">\n        <div class=\"agent-header\">\n          <h4>${this.getAgentIcon(agent.type)} ${agent.id}</h4>\n          <span class=\"status-badge status-${agent.status}\">${agent.status}</span>\n        </div>\n        \n        <div class=\"agent-info\">\n          <div class=\"info-row\">\n            <label>Type:</label>\n            <span>${agent.type}</span>\n          </div>\n          <div class=\"info-row\">\n            <label>Current Task:</label>\n            <span>${agent.currentTask || 'None'}</span>\n          </div>\n          <div class=\"info-row\">\n            <label>Capabilities:</label>\n            <span>${capabilities.join(', ')}</span>\n          </div>\n        </div>\n\n        <div class=\"agent-metrics\">\n          <h5>Performance Metrics</h5>\n          <div class=\"metrics-grid\">\n            <div class=\"metric\">\n              <label>Tasks Completed:</label>\n              <span>${metrics.tasksCompleted || 0}</span>\n            </div>\n            <div class=\"metric\">\n              <label>Success Rate:</label>\n              <span>${Math.round(metrics.successRate || 0)}%</span>\n            </div>\n            <div class=\"metric\">\n              <label>Avg Response Time:</label>\n              <span>${Math.round(metrics.averageTime || 0)}ms</span>\n            </div>\n            <div class=\"metric\">\n              <label>Memory Usage:</label>\n              <span>${Math.round(metrics.memoryUsage || 0)}MB</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Start animation loop\n   */\n  startAnimation() {\n    const animate = () => {\n      if (this.isActive) {\n        this.redrawTopology();\n        this.animationFrame = requestAnimationFrame(animate);\n      }\n    };\n    animate();\n  }\n\n  /**\n   * Create form label\n   */\n  createLabel(text, element) {\n    const label = document.createElement('label');\n    label.textContent = text;\n    label.appendChild(element);\n    label.style.cssText = `\n      display: flex;\n      flex-direction: column;\n      gap: 4px;\n      color: #fff;\n      font-size: 14px;\n      margin: 0 8px;\n    `;\n    return label;\n  }\n\n  /**\n   * Setup event handlers\n   */\n  setupEventHandlers() {\n    // Window resize handler\n    window.addEventListener('resize', () => {\n      this.redrawTopology();\n    });\n  }\n\n  /**\n   * Store progress to memory\n   */\n  async storeProgress() {\n    const progress = {\n      isActive: this.isActive,\n      topology: this.topology,\n      agentCount: this.agents.size,\n      connectionCount: this.connections.size,\n      timestamp: Date.now()\n    };\n\n    try {\n      const response = await fetch('/api/claude-flow/memory/set', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          namespace: 'swarm_1756475726467_c9ey1p9vm',\n          key: 'frontend/swarm_visualizer',\n          value: JSON.stringify(progress)\n        })\n      });\n    } catch (error) {\n      console.warn('Failed to store progress:', error);\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy() {\n    this.stopMonitoring();\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}\n\nexport default SwarmVisualizer;"],"names":["SwarmVisualizer","container","componentLibrary","components","swarmData","agents","Map","connections","topology","updateInterval","isActive","canvas","ctx","canvasSize","width","height","animationFrame","particles","init","createUI","setupEventHandlers","console","log","mainPanel","createToolPanel","title","description","controlPanel","createControlPanel","append","statsPanel","createStatsPanel","canvasContainer","createTopologyCanvas","agentPanel","createAgentPanel","appendChild","element","elements","panel","document","createElement","className","startBtn","createActionButton","type","text","icon","onclick","startMonitoring","stopBtn","stopMonitoring","topologySelect","id","innerHTML","addEventListener","e","target","value","redrawTopology","refreshSelect","createLabel","controlElements","style","display","gap","flexWrap","statsCards","totalAgents","createStatsCard","label","activeAgents","busyAgents","idleAgents","errorAgents","throughput","Object","values","forEach","card","cssText","getContext","handleCanvasClick","handleCanvasHover","textContent","color","marginBottom","content","agentDetailsContent","setDisabled","refreshRate","parseInt","setInterval","updateSwarmData","startAnimation","clearInterval","cancelAnimationFrame","response","fetch","ok","json","processSwarmData","updateStats","error","warn","generateMockData","agentTypes","statuses","agentCount","Math","floor","random","Date","now","metrics","totalTasks","completedTasks","failedTasks","averageResponseTime","i","agent","length","status","capabilities","currentTask","tasksCompleted","successRate","averageTime","memoryUsage","position","calculateAgentPosition","push","generateConnections","index","total","centerX","centerY","radius","min","angle","PI","x","cos","y","sin","levels","ceil","log2","level","positionInLevel","pow","levelWidth","starAngle","j","from","to","strength","latency","next","parent","clear","set","conn","Array","statusCounts","reduce","acc","setValue","toString","active","busy","idle","fillStyle","fillRect","drawGrid","drawConnections","drawAgents","updateParticles","strokeStyle","lineWidth","setLineDash","gridSize","beginPath","moveTo","lineTo","stroke","key","fromAgent","get","toAgent","max","midX","midY","font","fillText","round","statusColors","arc","fill","textAlign","getAgentIcon","icons","coder","researcher","analyzer","reviewer","tester","coordinator","optimizer","filter","p","life","targetX","targetY","progress","speed","particle","currentX","currentY","globalAlpha","event","rect","getBoundingClientRect","clientX","left","clientY","top","clickedAgent","find","distance","sqrt","showAgentDetails","hoveredAgent","cursor","join","animate","requestAnimationFrame","window","storeProgress","size","connectionCount","timestamp","method","headers","body","JSON","stringify","namespace","destroy"],"mappings":"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"}