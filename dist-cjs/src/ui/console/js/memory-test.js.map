{"version":3,"sources":["../../../../../src/ui/console/js/memory-test.js"],"sourcesContent":["/**\n * Memory Manager Test Module\n * Tests the memory management functionality\n */\n\nexport class MemoryTest {\n  constructor(memoryManager, terminal) {\n    this.memoryManager = memoryManager;\n    this.terminal = terminal;\n  }\n\n  /**\n   * Run comprehensive memory tests\n   */\n  async runTests() {\n    this.terminal.writeInfo('üß™ Starting Memory Manager Tests...');\n\n    try {\n      await this.testMemoryPanel();\n      await this.testMemoryTools();\n      await this.testNamespaceOperations();\n      await this.testMemoryOperations();\n\n      this.terminal.writeSuccess('‚úÖ All memory tests completed successfully!');\n    } catch (error) {\n      this.terminal.writeError(`‚ùå Memory tests failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Test memory panel functionality\n   */\n  async testMemoryPanel() {\n    this.terminal.writeInfo('Testing memory panel...');\n\n    // Test panel toggle\n    this.memoryManager.togglePanel();\n    const panelVisible = !document.getElementById('memoryPanel')?.classList.contains('hidden');\n\n    if (panelVisible) {\n      this.terminal.writeSuccess('‚úÖ Memory panel opens correctly');\n    } else {\n      throw new Error('Memory panel failed to open');\n    }\n\n    // Test panel components\n    const requiredElements = [\n      'memoryToolsGrid',\n      'namespaceSelect',\n      'memoryTable',\n      'memoryAnalytics',\n      'memoryLog',\n    ];\n\n    for (const elementId of requiredElements) {\n      const element = document.getElementById(elementId);\n      if (element) {\n        this.terminal.writeSuccess(`‚úÖ ${elementId} component found`);\n      } else {\n        throw new Error(`Required component missing: ${elementId}`);\n      }\n    }\n  }\n\n  /**\n   * Test memory tools\n   */\n  async testMemoryTools() {\n    this.terminal.writeInfo('Testing memory tools...');\n\n    const tools = Object.keys(this.memoryManager.memoryTools);\n    this.terminal.writeInfo(`Found ${tools.length} memory tools:`);\n\n    for (const tool of tools) {\n      const toolInfo = this.memoryManager.memoryTools[tool];\n      this.terminal.writeLine(`  ${toolInfo.icon} ${toolInfo.name} - ${toolInfo.description}`);\n    }\n\n    if (tools.length === 10) {\n      this.terminal.writeSuccess('‚úÖ All 10 memory tools are configured');\n    } else {\n      throw new Error(`Expected 10 memory tools, found ${tools.length}`);\n    }\n  }\n\n  /**\n   * Test namespace operations\n   */\n  async testNamespaceOperations() {\n    this.terminal.writeInfo('Testing namespace operations...');\n\n    // Test namespace switching\n    const originalNamespace = this.memoryManager.currentNamespace;\n\n    // Switch to test namespace\n    await this.memoryManager.switchNamespace('test');\n\n    if (this.memoryManager.currentNamespace === 'test') {\n      this.terminal.writeSuccess('‚úÖ Namespace switching works');\n    } else {\n      throw new Error('Namespace switching failed');\n    }\n\n    // Switch back to original namespace\n    await this.memoryManager.switchNamespace(originalNamespace);\n  }\n\n  /**\n   * Test memory operations\n   */\n  async testMemoryOperations() {\n    this.terminal.writeInfo('Testing memory operations...');\n\n    // Test utility functions\n    const testData = {\n      size: this.memoryManager.formatSize(1024),\n      ttl: this.memoryManager.formatTTL(Date.now() + 3600000),\n      truncate: this.memoryManager.truncateValue(\n        'This is a very long test string that should be truncated',\n      ),\n      escape: this.memoryManager.escapeHtml('<script>alert(\"test\")</script>'),\n    };\n\n    // Validate utility functions\n    if (testData.size === '1 KB') {\n      this.terminal.writeSuccess('‚úÖ Size formatting works');\n    } else {\n      throw new Error(`Size formatting failed: ${testData.size}`);\n    }\n\n    if (testData.ttl.includes('h') && testData.ttl.includes('m')) {\n      this.terminal.writeSuccess('‚úÖ TTL formatting works');\n    } else {\n      throw new Error(`TTL formatting failed: ${testData.ttl}`);\n    }\n\n    if (testData.truncate.length <= 103) {\n      // 100 + '...'\n      this.terminal.writeSuccess('‚úÖ Value truncation works');\n    } else {\n      throw new Error('Value truncation failed');\n    }\n\n    if (!testData.escape.includes('<script>')) {\n      this.terminal.writeSuccess('‚úÖ HTML escaping works');\n    } else {\n      throw new Error('HTML escaping failed');\n    }\n  }\n\n  /**\n   * Test mock memory data\n   */\n  async testMockData() {\n    this.terminal.writeInfo('Testing with mock data...');\n\n    const mockEntries = [\n      {\n        key: 'test/key1',\n        value: 'test value 1',\n        size: 256,\n        ttl: Date.now() + 3600000,\n        namespace: 'test',\n      },\n      {\n        key: 'test/key2',\n        value: JSON.stringify({ test: 'data', array: [1, 2, 3] }),\n        size: 512,\n        ttl: null,\n        namespace: 'test',\n      },\n    ];\n\n    // Update table with mock data\n    this.memoryManager.updateMemoryTable(mockEntries);\n\n    // Check if table was populated\n    const tableBody = document.getElementById('memoryTableBody');\n    const rows = tableBody?.getElementsByTagName('tr');\n\n    if (rows && rows.length === mockEntries.length) {\n      this.terminal.writeSuccess('‚úÖ Memory table updates correctly');\n    } else {\n      throw new Error('Memory table update failed');\n    }\n\n    // Test filtering\n    this.memoryManager.filterMemoryEntries('key1');\n    const visibleRows = Array.from(rows).filter((row) => row.style.display !== 'none');\n\n    if (visibleRows.length === 1) {\n      this.terminal.writeSuccess('‚úÖ Memory filtering works');\n    } else {\n      throw new Error('Memory filtering failed');\n    }\n\n    // Reset filter\n    this.memoryManager.filterMemoryEntries('');\n  }\n\n  /**\n   * Generate test report\n   */\n  generateReport() {\n    const report = {\n      timestamp: new Date().toISOString(),\n      tests: {\n        panel: 'passed',\n        tools: 'passed',\n        namespaces: 'passed',\n        operations: 'passed',\n      },\n      memoryTools: Object.keys(this.memoryManager.memoryTools),\n      features: [\n        'Memory Tools Grid (10 tools)',\n        'Namespace Browser',\n        'Memory Data Table',\n        'Memory Analytics Dashboard',\n        'Operations Log',\n        'Import/Export',\n        'Search & Filter',\n        'Auto-refresh',\n      ],\n    };\n\n    this.terminal.writeInfo('üìä Memory Manager Test Report:');\n    this.terminal.writeLine(JSON.stringify(report, null, 2));\n\n    return report;\n  }\n}\n\n// Export test runner function\nexport async function runMemoryTests() {\n  if (window.memoryManager && window.claudeConsole) {\n    const tester = new MemoryTest(window.memoryManager, window.claudeConsole.terminal);\n    await tester.runTests();\n    await tester.testMockData();\n    return tester.generateReport();\n  } else {\n    console.error('Memory manager or console not available for testing');\n    return null;\n  }\n}\n\n// Make test runner globally available\nwindow.runMemoryTests = runMemoryTests;\n"],"names":["MemoryTest","memoryManager","terminal","runTests","writeInfo","testMemoryPanel","testMemoryTools","testNamespaceOperations","testMemoryOperations","writeSuccess","error","writeError","message","togglePanel","panelVisible","document","getElementById","classList","contains","Error","requiredElements","elementId","element","tools","Object","keys","memoryTools","length","tool","toolInfo","writeLine","icon","name","description","originalNamespace","currentNamespace","switchNamespace","testData","size","formatSize","ttl","formatTTL","Date","now","truncate","truncateValue","escape","escapeHtml","includes","testMockData","mockEntries","key","value","namespace","JSON","stringify","test","array","updateMemoryTable","tableBody","rows","getElementsByTagName","filterMemoryEntries","visibleRows","Array","from","filter","row","style","display","generateReport","report","timestamp","toISOString","tests","panel","namespaces","operations","features","runMemoryTests","window","claudeConsole","tester","console"],"mappings":"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"}