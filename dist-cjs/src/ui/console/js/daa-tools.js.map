{"version":3,"sources":["../../../../../src/ui/console/js/daa-tools.js"],"sourcesContent":["/**\n * Dynamic Agent Architecture (DAA) Tools\n * Implementation of 8 core DAA tools for Claude Flow\n */\n\nclass DAATools {\n  constructor() {\n    this.agents = new Map();\n    this.resources = new Map();\n    this.communications = new Map();\n    this.consensus = new Map();\n    this.isInitialized = false;\n    this.currentTab = 'agents';\n\n    // Performance metrics\n    this.metrics = {\n      totalAgents: 0,\n      activeAgents: 0,\n      resourceUtilization: 0,\n      communicationLatency: 0,\n      consensusTime: 0,\n      faultCount: 0,\n    };\n\n    this.init();\n  }\n\n  init() {\n    if (this.isInitialized) return;\n\n    this.createDAAPanel();\n    this.setupEventListeners();\n    this.initializeMonitoring();\n    this.isInitialized = true;\n\n    console.log('DAA Tools initialized');\n  }\n\n  // Tool 1: Dynamic Agent Creation\n  daa_agent_create(config) {\n    const agentId = this.generateAgentId();\n    const agent = {\n      id: agentId,\n      type: config.type || 'generic',\n      capabilities: config.capabilities || [],\n      resources: config.resources || {},\n      status: 'initializing',\n      created: Date.now(),\n      lastActivity: Date.now(),\n      tasks: [],\n      metadata: config.metadata || {},\n    };\n\n    this.agents.set(agentId, agent);\n    this.metrics.totalAgents++;\n    this.metrics.activeAgents++;\n\n    // Lifecycle management\n    this.initializeAgent(agent);\n\n    // Update UI\n    this.updateAgentsList();\n    this.updateMetrics();\n\n    return {\n      success: true,\n      agentId: agentId,\n      agent: agent,\n    };\n  }\n\n  // Tool 2: Capability Matching System\n  daa_capability_match(requirements) {\n    const matches = [];\n\n    for (const [agentId, agent] of this.agents) {\n      if (agent.status !== 'active') continue;\n\n      const score = this.calculateCapabilityScore(agent.capabilities, requirements);\n      if (score > 0) {\n        matches.push({\n          agentId,\n          agent,\n          score,\n          availableCapabilities: agent.capabilities.filter((cap) =>\n            requirements.some((req) => this.matchCapability(cap, req)),\n          ),\n        });\n      }\n    }\n\n    // Sort by score descending\n    matches.sort((a, b) => b.score - a.score);\n\n    this.updateCapabilityMatches(matches);\n\n    return {\n      success: true,\n      matches: matches,\n      totalCandidates: matches.length,\n    };\n  }\n\n  // Tool 3: Resource Allocation Management\n  daa_resource_alloc(allocation) {\n    const resourceId = this.generateResourceId();\n    const resource = {\n      id: resourceId,\n      type: allocation.type,\n      capacity: allocation.capacity,\n      allocated: 0,\n      assignments: new Map(),\n      priority: allocation.priority || 'medium',\n      created: Date.now(),\n      metadata: allocation.metadata || {},\n    };\n\n    this.resources.set(resourceId, resource);\n\n    // Perform allocation\n    const allocationResult = this.allocateResource(resource, allocation);\n\n    // Update visualizations\n    this.updateResourceGraphs();\n    this.updateMetrics();\n\n    return {\n      success: allocationResult.success,\n      resourceId: resourceId,\n      allocation: allocationResult,\n      utilization: this.calculateResourceUtilization(),\n    };\n  }\n\n  // Tool 4: Agent Lifecycle Management\n  daa_lifecycle_manage(agentId, action, params = {}) {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      return { success: false, error: 'Agent not found' };\n    }\n\n    let result;\n\n    switch (action) {\n      case 'start':\n        result = this.startAgent(agent, params);\n        break;\n      case 'pause':\n        result = this.pauseAgent(agent, params);\n        break;\n      case 'resume':\n        result = this.resumeAgent(agent, params);\n        break;\n      case 'stop':\n        result = this.stopAgent(agent, params);\n        break;\n      case 'restart':\n        result = this.restartAgent(agent, params);\n        break;\n      case 'destroy':\n        result = this.destroyAgent(agent, params);\n        break;\n      default:\n        return { success: false, error: 'Unknown action' };\n    }\n\n    // Update lifecycle visualization\n    this.updateLifecycleVisualization();\n    this.updateMetrics();\n\n    return result;\n  }\n\n  // Tool 5: Inter-agent Communication\n  daa_communication(fromAgent, toAgent, message, options = {}) {\n    const commId = this.generateCommId();\n    const communication = {\n      id: commId,\n      from: fromAgent,\n      to: toAgent,\n      message: message,\n      timestamp: Date.now(),\n      type: options.type || 'direct',\n      priority: options.priority || 'normal',\n      status: 'pending',\n      latency: 0,\n      metadata: options.metadata || {},\n    };\n\n    this.communications.set(commId, communication);\n\n    // Process communication\n    const result = this.processCommunication(communication);\n\n    // Update communication flow diagrams\n    this.updateCommunicationFlow();\n\n    return {\n      success: result.success,\n      commId: commId,\n      latency: result.latency,\n      status: result.status,\n    };\n  }\n\n  // Tool 6: Consensus Mechanisms\n  daa_consensus(proposal, agents, options = {}) {\n    const consensusId = this.generateConsensusId();\n    const consensus = {\n      id: consensusId,\n      proposal: proposal,\n      participants: agents,\n      votes: new Map(),\n      status: 'voting',\n      algorithm: options.algorithm || 'majority',\n      threshold: options.threshold || 0.5,\n      timeout: options.timeout || 30000,\n      started: Date.now(),\n      completed: null,\n      result: null,\n    };\n\n    this.consensus.set(consensusId, consensus);\n\n    // Start consensus process\n    const result = this.startConsensusProcess(consensus);\n\n    // Update consensus interface\n    this.updateConsensusInterface();\n\n    return {\n      success: result.success,\n      consensusId: consensusId,\n      expectedCompletion: result.expectedCompletion,\n    };\n  }\n\n  // Tool 7: Fault Tolerance and Recovery\n  daa_fault_tolerance(faultType, affectedAgents, recoveryOptions = {}) {\n    const faultId = this.generateFaultId();\n    const fault = {\n      id: faultId,\n      type: faultType,\n      affected: affectedAgents,\n      detected: Date.now(),\n      severity: recoveryOptions.severity || 'medium',\n      status: 'detected',\n      recoveryPlan: null,\n      recovered: null,\n    };\n\n    this.metrics.faultCount++;\n\n    // Analyze fault and create recovery plan\n    const recoveryPlan = this.createRecoveryPlan(fault, recoveryOptions);\n    fault.recoveryPlan = recoveryPlan;\n\n    // Execute recovery\n    const recoveryResult = this.executeRecovery(fault);\n\n    // Update fault tolerance dashboard\n    this.updateFaultDashboard();\n\n    return {\n      success: recoveryResult.success,\n      faultId: faultId,\n      recoveryPlan: recoveryPlan,\n      estimatedRecoveryTime: recoveryResult.estimatedTime,\n    };\n  }\n\n  // Tool 8: Performance Optimization\n  daa_optimization(target, options = {}) {\n    const optimizationId = this.generateOptimizationId();\n    const optimization = {\n      id: optimizationId,\n      target: target,\n      baseline: this.capturePerformanceBaseline(),\n      options: options,\n      started: Date.now(),\n      status: 'running',\n      improvements: [],\n      completed: null,\n    };\n\n    // Perform optimization\n    const result = this.performOptimization(optimization);\n\n    // Update optimization dashboard\n    this.updateOptimizationDashboard();\n\n    return {\n      success: result.success,\n      optimizationId: optimizationId,\n      improvements: result.improvements,\n      performanceGain: result.performanceGain,\n    };\n  }\n\n  // UI Creation Methods\n  createDAAPanel() {\n    const panel = document.createElement('div');\n    panel.id = 'daa-tools-panel';\n    panel.className = 'daa-panel';\n\n    panel.innerHTML = `\n            <div class=\"daa-header\">\n                <h3>DAA Control Center</h3>\n                <div class=\"daa-metrics\">\n                    <div class=\"metric\">\n                        <span class=\"metric-label\">Agents</span>\n                        <span class=\"metric-value\" id=\"daa-agents-count\">0</span>\n                    </div>\n                    <div class=\"metric\">\n                        <span class=\"metric-label\">Resources</span>\n                        <span class=\"metric-value\" id=\"daa-resources-util\">0%</span>\n                    </div>\n                    <div class=\"metric\">\n                        <span class=\"metric-label\">Latency</span>\n                        <span class=\"metric-value\" id=\"daa-latency\">0ms</span>\n                    </div>\n                    <div class=\"metric\">\n                        <span class=\"metric-label\">Faults</span>\n                        <span class=\"metric-value\" id=\"daa-faults\">0</span>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"daa-tabs\">\n                <button class=\"daa-tab active\" data-tab=\"agents\">Agents</button>\n                <button class=\"daa-tab\" data-tab=\"resources\">Resources</button>\n                <button class=\"daa-tab\" data-tab=\"communication\">Communication</button>\n                <button class=\"daa-tab\" data-tab=\"monitoring\">Monitoring</button>\n            </div>\n            \n            <div class=\"daa-content\">\n                ${this.createAgentsTab()}\n                ${this.createResourcesTab()}\n                ${this.createCommunicationTab()}\n                ${this.createMonitoringTab()}\n            </div>\n        `;\n\n    // Add to console\n    const consoleContainer = document.querySelector('.console-container') || document.body;\n    consoleContainer.appendChild(panel);\n  }\n\n  createAgentsTab() {\n    return `\n            <div class=\"daa-tab-content active\" id=\"daa-agents-tab\">\n                <div class=\"daa-section\">\n                    <h4>Agent Creation</h4>\n                    <div class=\"daa-form\">\n                        <select id=\"daa-agent-type\">\n                            <option value=\"researcher\">Researcher</option>\n                            <option value=\"coder\">Coder</option>\n                            <option value=\"analyst\">Analyst</option>\n                            <option value=\"coordinator\">Coordinator</option>\n                            <option value=\"tester\">Tester</option>\n                        </select>\n                        <input type=\"text\" id=\"daa-agent-capabilities\" placeholder=\"Capabilities (comma-separated)\">\n                        <button id=\"daa-create-agent\">Create Agent</button>\n                    </div>\n                </div>\n                \n                <div class=\"daa-section\">\n                    <h4>Agent Lifecycle</h4>\n                    <div id=\"daa-lifecycle-visualization\" class=\"daa-visualization\">\n                        <!-- Lifecycle visualization will be populated here -->\n                    </div>\n                </div>\n                \n                <div class=\"daa-section\">\n                    <h4>Active Agents</h4>\n                    <div id=\"daa-agents-list\" class=\"daa-agents-grid\">\n                        <!-- Agents will be populated here -->\n                    </div>\n                </div>\n            </div>\n        `;\n  }\n\n  createResourcesTab() {\n    return `\n            <div class=\"daa-tab-content\" id=\"daa-resources-tab\">\n                <div class=\"daa-section\">\n                    <h4>Resource Allocation</h4>\n                    <div class=\"daa-form\">\n                        <select id=\"daa-resource-type\">\n                            <option value=\"cpu\">CPU</option>\n                            <option value=\"memory\">Memory</option>\n                            <option value=\"storage\">Storage</option>\n                            <option value=\"network\">Network</option>\n                        </select>\n                        <input type=\"number\" id=\"daa-resource-capacity\" placeholder=\"Capacity\">\n                        <select id=\"daa-resource-priority\">\n                            <option value=\"low\">Low</option>\n                            <option value=\"medium\">Medium</option>\n                            <option value=\"high\">High</option>\n                        </select>\n                        <button id=\"daa-allocate-resource\">Allocate Resource</button>\n                    </div>\n                </div>\n                \n                <div class=\"daa-section\">\n                    <h4>Resource Graphs</h4>\n                    <div id=\"daa-resource-graphs\" class=\"daa-visualization\">\n                        <canvas id=\"daa-resource-chart\" width=\"600\" height=\"300\"></canvas>\n                    </div>\n                </div>\n                \n                <div class=\"daa-section\">\n                    <h4>Resource Status</h4>\n                    <div id=\"daa-resource-status\" class=\"daa-status-grid\">\n                        <!-- Resource status will be populated here -->\n                    </div>\n                </div>\n            </div>\n        `;\n  }\n\n  createCommunicationTab() {\n    return `\n            <div class=\"daa-tab-content\" id=\"daa-communication-tab\">\n                <div class=\"daa-section\">\n                    <h4>Communication Flow</h4>\n                    <div id=\"daa-communication-flow\" class=\"daa-visualization\">\n                        <svg id=\"daa-comm-diagram\" width=\"600\" height=\"400\"></svg>\n                    </div>\n                </div>\n                \n                <div class=\"daa-section\">\n                    <h4>Consensus Voting</h4>\n                    <div class=\"daa-form\">\n                        <textarea id=\"daa-consensus-proposal\" placeholder=\"Enter proposal...\"></textarea>\n                        <select id=\"daa-consensus-algorithm\">\n                            <option value=\"majority\">Majority</option>\n                            <option value=\"unanimous\">Unanimous</option>\n                            <option value=\"weighted\">Weighted</option>\n                        </select>\n                        <button id=\"daa-start-consensus\">Start Consensus</button>\n                    </div>\n                    <div id=\"daa-consensus-status\" class=\"daa-consensus-grid\">\n                        <!-- Consensus status will be populated here -->\n                    </div>\n                </div>\n            </div>\n        `;\n  }\n\n  createMonitoringTab() {\n    return `\n            <div class=\"daa-tab-content\" id=\"daa-monitoring-tab\">\n                <div class=\"daa-section\">\n                    <h4>Real-time Dashboard</h4>\n                    <div id=\"daa-monitoring-dashboard\" class=\"daa-dashboard\">\n                        <div class=\"daa-dashboard-grid\">\n                            <div class=\"daa-dashboard-item\">\n                                <h5>Performance Metrics</h5>\n                                <canvas id=\"daa-performance-chart\" width=\"300\" height=\"200\"></canvas>\n                            </div>\n                            <div class=\"daa-dashboard-item\">\n                                <h5>System Health</h5>\n                                <div id=\"daa-health-indicators\" class=\"daa-health-grid\">\n                                    <!-- Health indicators will be populated here -->\n                                </div>\n                            </div>\n                            <div class=\"daa-dashboard-item\">\n                                <h5>Fault Tolerance</h5>\n                                <div id=\"daa-fault-status\" class=\"daa-fault-grid\">\n                                    <!-- Fault status will be populated here -->\n                                </div>\n                            </div>\n                            <div class=\"daa-dashboard-item\">\n                                <h5>Optimization</h5>\n                                <div id=\"daa-optimization-status\" class=\"daa-optimization-grid\">\n                                    <!-- Optimization status will be populated here -->\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n  }\n\n  // Helper Methods\n  generateAgentId() {\n    return `agent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateResourceId() {\n    return `resource-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateCommId() {\n    return `comm-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateConsensusId() {\n    return `consensus-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateFaultId() {\n    return `fault-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateOptimizationId() {\n    return `opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  calculateCapabilityScore(agentCapabilities, requirements) {\n    let score = 0;\n    for (const requirement of requirements) {\n      for (const capability of agentCapabilities) {\n        if (this.matchCapability(capability, requirement)) {\n          score += 1;\n        }\n      }\n    }\n    return score;\n  }\n\n  matchCapability(capability, requirement) {\n    // Simple string matching - can be enhanced with fuzzy matching\n    return capability.toLowerCase().includes(requirement.toLowerCase());\n  }\n\n  calculateResourceUtilization() {\n    let totalCapacity = 0;\n    let totalAllocated = 0;\n\n    for (const [_, resource] of this.resources) {\n      totalCapacity += resource.capacity;\n      totalAllocated += resource.allocated;\n    }\n\n    return totalCapacity > 0 ? Math.round((totalAllocated / totalCapacity) * 100) : 0;\n  }\n\n  // Implementation methods (simplified for brevity)\n  initializeAgent(agent) {\n    agent.status = 'active';\n    agent.lastActivity = Date.now();\n  }\n\n  startAgent(agent, params) {\n    agent.status = 'active';\n    agent.lastActivity = Date.now();\n    return { success: true, status: 'active' };\n  }\n\n  pauseAgent(agent, params) {\n    agent.status = 'paused';\n    return { success: true, status: 'paused' };\n  }\n\n  resumeAgent(agent, params) {\n    agent.status = 'active';\n    agent.lastActivity = Date.now();\n    return { success: true, status: 'active' };\n  }\n\n  stopAgent(agent, params) {\n    agent.status = 'stopped';\n    this.metrics.activeAgents--;\n    return { success: true, status: 'stopped' };\n  }\n\n  restartAgent(agent, params) {\n    agent.status = 'active';\n    agent.lastActivity = Date.now();\n    return { success: true, status: 'active' };\n  }\n\n  destroyAgent(agent, params) {\n    this.agents.delete(agent.id);\n    this.metrics.totalAgents--;\n    this.metrics.activeAgents--;\n    return { success: true, status: 'destroyed' };\n  }\n\n  allocateResource(resource, allocation) {\n    // Simple allocation logic\n    const requested = allocation.amount || 0;\n    const available = resource.capacity - resource.allocated;\n\n    if (requested <= available) {\n      resource.allocated += requested;\n      return { success: true, allocated: requested, remaining: available - requested };\n    } else {\n      return { success: false, error: 'Insufficient resources', available: available };\n    }\n  }\n\n  processCommunication(communication) {\n    // Simulate communication processing\n    const latency = Math.random() * 100; // 0-100ms\n    communication.latency = latency;\n    communication.status = 'completed';\n\n    this.metrics.communicationLatency = (this.metrics.communicationLatency + latency) / 2;\n\n    return { success: true, latency: latency, status: 'completed' };\n  }\n\n  startConsensusProcess(consensus) {\n    // Simulate consensus process\n    const expectedTime = consensus.timeout || 30000;\n\n    setTimeout(() => {\n      this.completeConsensus(consensus);\n    }, expectedTime);\n\n    return { success: true, expectedCompletion: Date.now() + expectedTime };\n  }\n\n  completeConsensus(consensus) {\n    consensus.status = 'completed';\n    consensus.completed = Date.now();\n    consensus.result = 'approved'; // Simplified\n\n    this.metrics.consensusTime = consensus.completed - consensus.started;\n    this.updateConsensusInterface();\n  }\n\n  createRecoveryPlan(fault, options) {\n    return {\n      steps: [\n        'Isolate affected agents',\n        'Backup current state',\n        'Restart affected components',\n        'Verify system integrity',\n        'Resume normal operations',\n      ],\n      estimatedTime: 60000, // 1 minute\n      priority: fault.severity,\n    };\n  }\n\n  executeRecovery(fault) {\n    // Simulate recovery execution\n    fault.status = 'recovering';\n\n    setTimeout(() => {\n      fault.status = 'recovered';\n      fault.recovered = Date.now();\n      this.updateFaultDashboard();\n    }, fault.recoveryPlan.estimatedTime);\n\n    return { success: true, estimatedTime: fault.recoveryPlan.estimatedTime };\n  }\n\n  capturePerformanceBaseline() {\n    return {\n      timestamp: Date.now(),\n      metrics: { ...this.metrics },\n      agentCount: this.agents.size,\n      resourceCount: this.resources.size,\n    };\n  }\n\n  performOptimization(optimization) {\n    // Simulate optimization process\n    const improvements = [\n      { type: 'agent_efficiency', improvement: 15 },\n      { type: 'resource_allocation', improvement: 12 },\n      { type: 'communication_latency', improvement: 8 },\n    ];\n\n    optimization.improvements = improvements;\n    optimization.status = 'completed';\n    optimization.completed = Date.now();\n\n    const totalGain =\n      improvements.reduce((sum, imp) => sum + imp.improvement, 0) / improvements.length;\n\n    return { success: true, improvements: improvements, performanceGain: totalGain };\n  }\n\n  // UI Update Methods\n  updateAgentsList() {\n    const agentsList = document.getElementById('daa-agents-list');\n    if (!agentsList) return;\n\n    agentsList.innerHTML = '';\n\n    for (const [agentId, agent] of this.agents) {\n      const agentElement = document.createElement('div');\n      agentElement.className = 'daa-agent-card';\n      agentElement.innerHTML = `\n                <div class=\"agent-header\">\n                    <span class=\"agent-id\">${agentId}</span>\n                    <span class=\"agent-status status-${agent.status}\">${agent.status}</span>\n                </div>\n                <div class=\"agent-details\">\n                    <div class=\"agent-type\">${agent.type}</div>\n                    <div class=\"agent-capabilities\">${agent.capabilities.join(', ')}</div>\n                </div>\n                <div class=\"agent-actions\">\n                    <button onclick=\"daaTools.daa_lifecycle_manage('${agentId}', 'pause')\">Pause</button>\n                    <button onclick=\"daaTools.daa_lifecycle_manage('${agentId}', 'stop')\">Stop</button>\n                    <button onclick=\"daaTools.daa_lifecycle_manage('${agentId}', 'destroy')\">Destroy</button>\n                </div>\n            `;\n      agentsList.appendChild(agentElement);\n    }\n  }\n\n  updateMetrics() {\n    const elements = {\n      'daa-agents-count': this.metrics.activeAgents,\n      'daa-resources-util': `${this.metrics.resourceUtilization}%`,\n      'daa-latency': `${Math.round(this.metrics.communicationLatency)}ms`,\n      'daa-faults': this.metrics.faultCount,\n    };\n\n    for (const [id, value] of Object.entries(elements)) {\n      const element = document.getElementById(id);\n      if (element) {\n        element.textContent = value;\n      }\n    }\n  }\n\n  updateCapabilityMatches(matches) {\n    // Update capability matching visualization\n    console.log('Capability matches:', matches);\n  }\n\n  updateResourceGraphs() {\n    const canvas = document.getElementById('daa-resource-chart');\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw resource utilization bars\n    const resources = Array.from(this.resources.values());\n    const barWidth = canvas.width / Math.max(resources.length, 1);\n\n    resources.forEach((resource, index) => {\n      const utilization = resource.capacity > 0 ? resource.allocated / resource.capacity : 0;\n      const barHeight = utilization * canvas.height;\n\n      ctx.fillStyle = utilization > 0.8 ? '#ff4444' : utilization > 0.5 ? '#ffaa00' : '#44ff44';\n      ctx.fillRect(index * barWidth, canvas.height - barHeight, barWidth - 2, barHeight);\n\n      // Resource label\n      ctx.fillStyle = '#000';\n      ctx.font = '12px Arial';\n      ctx.fillText(resource.type, index * barWidth + 5, canvas.height - 5);\n    });\n  }\n\n  updateLifecycleVisualization() {\n    const visualization = document.getElementById('daa-lifecycle-visualization');\n    if (!visualization) return;\n\n    const statusCounts = {};\n    for (const [_, agent] of this.agents) {\n      statusCounts[agent.status] = (statusCounts[agent.status] || 0) + 1;\n    }\n\n    visualization.innerHTML = Object.entries(statusCounts)\n      .map(\n        ([status, count]) =>\n          `<div class=\"lifecycle-item\">\n                <span class=\"status-badge status-${status}\">${status}</span>\n                <span class=\"status-count\">${count}</span>\n            </div>`,\n      )\n      .join('');\n  }\n\n  updateCommunicationFlow() {\n    const svg = document.getElementById('daa-comm-diagram');\n    if (!svg) return;\n\n    // Clear existing content\n    svg.innerHTML = '';\n\n    // Draw communication flow visualization\n    const agents = Array.from(this.agents.values());\n    const centerX = 300;\n    const centerY = 200;\n    const radius = 150;\n\n    agents.forEach((agent, index) => {\n      const angle = (index * 2 * Math.PI) / agents.length;\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n\n      // Draw agent node\n      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      circle.setAttribute('cx', x);\n      circle.setAttribute('cy', y);\n      circle.setAttribute('r', 20);\n      circle.setAttribute('fill', '#4CAF50');\n      circle.setAttribute('stroke', '#333');\n      circle.setAttribute('stroke-width', '2');\n      svg.appendChild(circle);\n\n      // Draw agent label\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', x);\n      text.setAttribute('y', y + 5);\n      text.setAttribute('text-anchor', 'middle');\n      text.setAttribute('font-size', '12');\n      text.setAttribute('fill', '#fff');\n      text.textContent = agent.id.split('-')[0];\n      svg.appendChild(text);\n    });\n  }\n\n  updateConsensusInterface() {\n    const consensusStatus = document.getElementById('daa-consensus-status');\n    if (!consensusStatus) return;\n\n    consensusStatus.innerHTML = Array.from(this.consensus.values())\n      .map(\n        (consensus) =>\n          `<div class=\"consensus-item\">\n                <div class=\"consensus-proposal\">${consensus.proposal}</div>\n                <div class=\"consensus-status\">${consensus.status}</div>\n                <div class=\"consensus-progress\">\n                    <div class=\"progress-bar\" style=\"width: ${consensus.status === 'completed' ? '100%' : '50%'}\"></div>\n                </div>\n            </div>`,\n      )\n      .join('');\n  }\n\n  updateFaultDashboard() {\n    const faultStatus = document.getElementById('daa-fault-status');\n    if (!faultStatus) return;\n\n    faultStatus.innerHTML = `\n            <div class=\"fault-item\">\n                <span class=\"fault-label\">Total Faults</span>\n                <span class=\"fault-value\">${this.metrics.faultCount}</span>\n            </div>\n            <div class=\"fault-item\">\n                <span class=\"fault-label\">Recovery Rate</span>\n                <span class=\"fault-value\">95%</span>\n            </div>\n            <div class=\"fault-item\">\n                <span class=\"fault-label\">MTTR</span>\n                <span class=\"fault-value\">2.3min</span>\n            </div>\n        `;\n  }\n\n  updateOptimizationDashboard() {\n    const optimizationStatus = document.getElementById('daa-optimization-status');\n    if (!optimizationStatus) return;\n\n    optimizationStatus.innerHTML = `\n            <div class=\"optimization-item\">\n                <span class=\"opt-label\">Performance Gain</span>\n                <span class=\"opt-value\">+15%</span>\n            </div>\n            <div class=\"optimization-item\">\n                <span class=\"opt-label\">Resource Efficiency</span>\n                <span class=\"opt-value\">+12%</span>\n            </div>\n            <div class=\"optimization-item\">\n                <span class=\"opt-label\">Latency Reduction</span>\n                <span class=\"opt-value\">-8%</span>\n            </div>\n        `;\n  }\n\n  setupEventListeners() {\n    // Tab switching\n    document.addEventListener('click', (e) => {\n      if (e.target.classList.contains('daa-tab')) {\n        this.switchTab(e.target.dataset.tab);\n      }\n    });\n\n    // Agent creation\n    document.addEventListener('click', (e) => {\n      if (e.target.id === 'daa-create-agent') {\n        this.handleCreateAgent();\n      }\n    });\n\n    // Resource allocation\n    document.addEventListener('click', (e) => {\n      if (e.target.id === 'daa-allocate-resource') {\n        this.handleAllocateResource();\n      }\n    });\n\n    // Consensus voting\n    document.addEventListener('click', (e) => {\n      if (e.target.id === 'daa-start-consensus') {\n        this.handleStartConsensus();\n      }\n    });\n  }\n\n  switchTab(tabName) {\n    // Hide all tabs\n    document.querySelectorAll('.daa-tab-content').forEach((tab) => {\n      tab.classList.remove('active');\n    });\n\n    document.querySelectorAll('.daa-tab').forEach((tab) => {\n      tab.classList.remove('active');\n    });\n\n    // Show selected tab\n    document.getElementById(`daa-${tabName}-tab`).classList.add('active');\n    document.querySelector(`.daa-tab[data-tab=\"${tabName}\"]`).classList.add('active');\n\n    this.currentTab = tabName;\n  }\n\n  handleCreateAgent() {\n    const type = document.getElementById('daa-agent-type').value;\n    const capabilities = document\n      .getElementById('daa-agent-capabilities')\n      .value.split(',')\n      .map((s) => s.trim());\n\n    const result = this.daa_agent_create({\n      type: type,\n      capabilities: capabilities,\n      resources: { cpu: 1, memory: 512 },\n    });\n\n    if (result.success) {\n      console.log('Agent created:', result.agentId);\n    }\n  }\n\n  handleAllocateResource() {\n    const type = document.getElementById('daa-resource-type').value;\n    const capacity = parseInt(document.getElementById('daa-resource-capacity').value) || 100;\n    const priority = document.getElementById('daa-resource-priority').value;\n\n    const result = this.daa_resource_alloc({\n      type: type,\n      capacity: capacity,\n      priority: priority,\n      amount: capacity * 0.5, // Allocate 50% initially\n    });\n\n    if (result.success) {\n      console.log('Resource allocated:', result.resourceId);\n    }\n  }\n\n  handleStartConsensus() {\n    const proposal = document.getElementById('daa-consensus-proposal').value;\n    const algorithm = document.getElementById('daa-consensus-algorithm').value;\n\n    if (!proposal.trim()) {\n      alert('Please enter a proposal');\n      return;\n    }\n\n    const agents = Array.from(this.agents.keys());\n    const result = this.daa_consensus(proposal, agents, {\n      algorithm: algorithm,\n      timeout: 30000,\n    });\n\n    if (result.success) {\n      console.log('Consensus started:', result.consensusId);\n    }\n  }\n\n  initializeMonitoring() {\n    // Start monitoring intervals\n    setInterval(() => {\n      this.updateMetrics();\n      this.updateResourceGraphs();\n      this.updateLifecycleVisualization();\n    }, 5000);\n\n    // Initialize with some sample data\n    this.createSampleData();\n  }\n\n  createSampleData() {\n    // Create sample agents\n    this.daa_agent_create({\n      type: 'researcher',\n      capabilities: ['data_analysis', 'research', 'documentation'],\n      resources: { cpu: 2, memory: 1024 },\n    });\n\n    this.daa_agent_create({\n      type: 'coder',\n      capabilities: ['javascript', 'python', 'testing'],\n      resources: { cpu: 4, memory: 2048 },\n    });\n\n    // Create sample resources\n    this.daa_resource_alloc({\n      type: 'cpu',\n      capacity: 100,\n      priority: 'high',\n      amount: 30,\n    });\n\n    this.daa_resource_alloc({\n      type: 'memory',\n      capacity: 8192,\n      priority: 'medium',\n      amount: 2048,\n    });\n  }\n}\n\n// Initialize DAA Tools\nlet daaTools;\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    daaTools = new DAATools();\n  });\n} else {\n  daaTools = new DAATools();\n}\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = DAATools;\n}\n"],"names":["DAATools","agents","Map","resources","communications","consensus","isInitialized","currentTab","metrics","totalAgents","activeAgents","resourceUtilization","communicationLatency","consensusTime","faultCount","init","createDAAPanel","setupEventListeners","initializeMonitoring","console","log","daa_agent_create","config","agentId","generateAgentId","agent","id","type","capabilities","status","created","Date","now","lastActivity","tasks","metadata","set","initializeAgent","updateAgentsList","updateMetrics","success","daa_capability_match","requirements","matches","score","calculateCapabilityScore","push","availableCapabilities","filter","cap","some","req","matchCapability","sort","a","b","updateCapabilityMatches","totalCandidates","length","daa_resource_alloc","allocation","resourceId","generateResourceId","resource","capacity","allocated","assignments","priority","allocationResult","allocateResource","updateResourceGraphs","utilization","calculateResourceUtilization","daa_lifecycle_manage","action","params","get","error","result","startAgent","pauseAgent","resumeAgent","stopAgent","restartAgent","destroyAgent","updateLifecycleVisualization","daa_communication","fromAgent","toAgent","message","options","commId","generateCommId","communication","from","to","timestamp","latency","processCommunication","updateCommunicationFlow","daa_consensus","proposal","consensusId","generateConsensusId","participants","votes","algorithm","threshold","timeout","started","completed","startConsensusProcess","updateConsensusInterface","expectedCompletion","daa_fault_tolerance","faultType","affectedAgents","recoveryOptions","faultId","generateFaultId","fault","affected","detected","severity","recoveryPlan","recovered","createRecoveryPlan","recoveryResult","executeRecovery","updateFaultDashboard","estimatedRecoveryTime","estimatedTime","daa_optimization","target","optimizationId","generateOptimizationId","optimization","baseline","capturePerformanceBaseline","improvements","performOptimization","updateOptimizationDashboard","performanceGain","panel","document","createElement","className","innerHTML","createAgentsTab","createResourcesTab","createCommunicationTab","createMonitoringTab","consoleContainer","querySelector","body","appendChild","Math","random","toString","substr","agentCapabilities","requirement","capability","toLowerCase","includes","totalCapacity","totalAllocated","_","round","delete","requested","amount","available","remaining","expectedTime","setTimeout","completeConsensus","steps","agentCount","size","resourceCount","improvement","totalGain","reduce","sum","imp","agentsList","getElementById","agentElement","join","elements","value","Object","entries","element","textContent","canvas","ctx","getContext","clearRect","width","height","Array","values","barWidth","max","forEach","index","barHeight","fillStyle","fillRect","font","fillText","visualization","statusCounts","map","count","svg","centerX","centerY","radius","angle","PI","x","cos","y","sin","circle","createElementNS","setAttribute","text","split","consensusStatus","faultStatus","optimizationStatus","addEventListener","e","classList","contains","switchTab","dataset","tab","handleCreateAgent","handleAllocateResource","handleStartConsensus","tabName","querySelectorAll","remove","add","s","trim","cpu","memory","parseInt","alert","keys","setInterval","createSampleData","daaTools","readyState","module","exports"],"mappings":"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"}