{"version":3,"sources":["../../../../../src/ui/console/js/terminal-emulator.js"],"sourcesContent":["/**\n * Terminal Emulator for Claude Code Console\n * Provides terminal-like behavior and output formatting\n */\n\nexport class TerminalEmulator {\n  constructor(outputElement, inputElement) {\n    this.outputElement = outputElement;\n    this.inputElement = inputElement;\n    this.history = [];\n    this.historyIndex = -1;\n    this.maxHistorySize = 1000;\n    this.maxOutputLines = 1000;\n    this.currentPrompt = 'claude-flow>';\n    this.isLocked = false;\n\n    // Command suggestions\n    this.commands = [\n      'help',\n      'clear',\n      'status',\n      'connect',\n      'disconnect',\n      'claude-flow',\n      'swarm',\n      'init',\n      'config',\n      'memory',\n      'tools',\n      'agents',\n      'benchmark',\n      'sparc',\n    ];\n\n    // ANSI color codes mapping\n    this.ansiColors = {\n      30: '#000000', // Black\n      31: '#ff5555', // Red\n      32: '#50fa7b', // Green\n      33: '#f1fa8c', // Yellow\n      34: '#bd93f9', // Blue\n      35: '#ff79c6', // Magenta\n      36: '#8be9fd', // Cyan\n      37: '#f8f8f2', // White\n      90: '#6272a4', // Bright Black (Gray)\n      91: '#ff6e6e', // Bright Red\n      92: '#69ff94', // Bright Green\n      93: '#ffffa5', // Bright Yellow\n      94: '#d6acff', // Bright Blue\n      95: '#ff92df', // Bright Magenta\n      96: '#a4ffff', // Bright Cyan\n      97: '#ffffff', // Bright White\n    };\n\n    this.setupInputHandlers();\n    this.setupScrollBehavior();\n  }\n\n  /**\n   * Write output to terminal\n   */\n  write(content, type = 'output', timestamp = true) {\n    const entry = this.createOutputEntry(content, type, timestamp);\n    this.outputElement.appendChild(entry);\n    this.limitOutputLines();\n    this.scrollToBottom();\n    return entry;\n  }\n\n  /**\n   * Write line to terminal\n   */\n  writeLine(content, type = 'output', timestamp = true) {\n    return this.write(content + '\\n', type, timestamp);\n  }\n\n  /**\n   * Write command to terminal\n   */\n  writeCommand(command) {\n    return this.write(`${this.currentPrompt} ${command}`, 'command', true);\n  }\n\n  /**\n   * Write error message\n   */\n  writeError(message) {\n    return this.writeLine(`Error: ${message}`, 'error');\n  }\n\n  /**\n   * Write success message\n   */\n  writeSuccess(message) {\n    return this.writeLine(message, 'success');\n  }\n\n  /**\n   * Write warning message\n   */\n  writeWarning(message) {\n    return this.writeLine(`Warning: ${message}`, 'warning');\n  }\n\n  /**\n   * Write info message\n   */\n  writeInfo(message) {\n    return this.writeLine(message, 'info');\n  }\n\n  /**\n   * Write raw HTML content\n   */\n  writeHTML(html, type = 'output') {\n    const entry = document.createElement('div');\n    entry.className = 'output-entry';\n    entry.innerHTML = html;\n\n    if (type) {\n      entry.classList.add(`output-${type}`);\n    }\n\n    this.outputElement.appendChild(entry);\n    this.limitOutputLines();\n    this.scrollToBottom();\n    return entry;\n  }\n\n  /**\n   * Clear terminal output\n   */\n  clear() {\n    this.outputElement.innerHTML = '';\n    this.showWelcomeMessage();\n  }\n\n  /**\n   * Show welcome message\n   */\n  showWelcomeMessage() {\n    // Check if welcome message already exists (from static HTML)\n    const existingWelcome = this.outputElement.querySelector('.welcome-message');\n    if (existingWelcome) {\n      // Welcome message already exists, don't add another one\n      return;\n    }\n\n    const welcome = document.createElement('div');\n    welcome.className = 'welcome-message';\n    welcome.innerHTML = `\n      <div class=\"ascii-art\">╔═══════════════════════════════════════════════════════════╗\n║                                                           ║\n║     🌊 Claude Flow v2.0.0                                ║\n║                                                           ║\n║     Welcome to the web-based swarm orchestration         ║\n║     Type 'help' for available commands                   ║\n║     Use Ctrl+L to clear console                          ║\n║                                                           ║\n╚═══════════════════════════════════════════════════════════╝</div>\n    `;\n    this.outputElement.appendChild(welcome);\n  }\n\n  /**\n   * Set prompt text\n   */\n  setPrompt(prompt) {\n    this.currentPrompt = prompt;\n    const promptElement = document.getElementById('promptText');\n    if (promptElement) {\n      promptElement.textContent = prompt;\n    }\n  }\n\n  /**\n   * Lock/unlock input\n   */\n  setLocked(locked) {\n    this.isLocked = locked;\n    this.inputElement.disabled = locked;\n\n    if (locked) {\n      this.inputElement.placeholder = 'Processing...';\n    } else {\n      this.inputElement.placeholder = 'Enter command...';\n      this.inputElement.focus();\n    }\n  }\n\n  /**\n   * Focus input\n   */\n  focus() {\n    if (!this.isLocked) {\n      this.inputElement.focus();\n    }\n  }\n\n  /**\n   * Get current input value\n   */\n  getInput() {\n    return this.inputElement.value;\n  }\n\n  /**\n   * Set input value\n   */\n  setInput(value) {\n    this.inputElement.value = value;\n  }\n\n  /**\n   * Clear input\n   */\n  clearInput() {\n    this.inputElement.value = '';\n  }\n\n  /**\n   * Add command to history\n   */\n  addToHistory(command) {\n    if (command.trim() && this.history[this.history.length - 1] !== command) {\n      this.history.push(command);\n\n      if (this.history.length > this.maxHistorySize) {\n        this.history.shift();\n      }\n    }\n\n    this.historyIndex = -1;\n  }\n\n  /**\n   * Navigate command history\n   */\n  navigateHistory(direction) {\n    if (this.history.length === 0) return;\n\n    if (direction === 'up') {\n      if (this.historyIndex === -1) {\n        this.historyIndex = this.history.length - 1;\n      } else if (this.historyIndex > 0) {\n        this.historyIndex--;\n      }\n    } else if (direction === 'down') {\n      if (this.historyIndex < this.history.length - 1) {\n        this.historyIndex++;\n      } else {\n        this.historyIndex = -1;\n      }\n    }\n\n    if (this.historyIndex === -1) {\n      this.setInput('');\n    } else {\n      this.setInput(this.history[this.historyIndex]);\n    }\n  }\n\n  /**\n   * Create output entry element\n   */\n  createOutputEntry(content, type, timestamp) {\n    const entry = document.createElement('div');\n    entry.className = 'output-entry';\n\n    const line = document.createElement('div');\n    line.className = 'output-line';\n\n    // Add timestamp if enabled\n    if (timestamp && this.shouldShowTimestamp()) {\n      const timeElement = document.createElement('span');\n      timeElement.className = 'output-timestamp';\n      timeElement.textContent = this.formatTimestamp(new Date());\n      line.appendChild(timeElement);\n    }\n\n    // Add content\n    const contentElement = document.createElement('span');\n    contentElement.className = `output-content ${type}`;\n\n    // Process ANSI codes if present\n    if (typeof content === 'string' && content.includes('\\x1b[')) {\n      contentElement.innerHTML = this.processAnsiCodes(content);\n    } else {\n      contentElement.textContent = content;\n    }\n\n    line.appendChild(contentElement);\n    entry.appendChild(line);\n\n    return entry;\n  }\n\n  /**\n   * Process ANSI escape codes\n   */\n  processAnsiCodes(text) {\n    // Simple ANSI processing - convert color codes to HTML\n    return (\n      text\n        .replace(/\\x1b\\[(\\d+)m/g, (match, code) => {\n          if (code === '0' || code === '00') {\n            return '</span>'; // Reset\n          }\n\n          const color = this.ansiColors[code];\n          if (color) {\n            return `<span style=\"color: ${color}\">`;\n          }\n\n          return '';\n        })\n        .replace(/\\x1b\\[[\\d;]*m/g, '') + // Remove other ANSI codes\n      '</span>'\n    ); // Ensure we close any open spans\n  }\n\n  /**\n   * Format timestamp\n   */\n  formatTimestamp(date) {\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n  }\n\n  /**\n   * Check if timestamps should be shown\n   */\n  shouldShowTimestamp() {\n    const showTimestamps = localStorage.getItem('console_show_timestamps');\n    return showTimestamps !== 'false';\n  }\n\n  /**\n   * Limit output lines\n   */\n  limitOutputLines() {\n    const entries = this.outputElement.querySelectorAll('.output-entry');\n\n    if (entries.length > this.maxOutputLines) {\n      const excessCount = entries.length - this.maxOutputLines;\n      for (let i = 0; i < excessCount; i++) {\n        if (entries[i] && !entries[i].classList.contains('welcome-message')) {\n          entries[i].remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Scroll to bottom\n   */\n  scrollToBottom(smooth = false) {\n    if (this.shouldAutoScroll()) {\n      if (smooth) {\n        this.outputElement.scrollTo({\n          top: this.outputElement.scrollHeight,\n          behavior: 'smooth',\n        });\n      } else {\n        this.outputElement.scrollTop = this.outputElement.scrollHeight;\n      }\n    }\n  }\n\n  /**\n   * Check if auto-scroll is enabled\n   */\n  shouldAutoScroll() {\n    const autoScroll = localStorage.getItem('console_auto_scroll');\n    return autoScroll !== 'false';\n  }\n\n  /**\n   * Setup input event handlers\n   */\n  setupInputHandlers() {\n    this.inputElement.addEventListener('keydown', (event) => {\n      if (this.isLocked) {\n        event.preventDefault();\n        return;\n      }\n\n      switch (event.key) {\n        case 'Enter':\n          event.preventDefault();\n          this.handleEnter();\n          break;\n\n        case 'ArrowUp':\n          event.preventDefault();\n          this.navigateHistory('up');\n          break;\n\n        case 'ArrowDown':\n          event.preventDefault();\n          this.navigateHistory('down');\n          break;\n\n        case 'Tab':\n          event.preventDefault();\n          this.handleTab();\n          break;\n\n        case 'l':\n          if (event.ctrlKey) {\n            event.preventDefault();\n            this.clear();\n          }\n          break;\n\n        case 'c':\n          if (event.ctrlKey) {\n            event.preventDefault();\n            this.handleInterrupt();\n          }\n          break;\n      }\n    });\n\n    this.inputElement.addEventListener('input', () => {\n      if (!this.isLocked) {\n        this.handleInput();\n      }\n    });\n  }\n\n  /**\n   * Handle Enter key\n   */\n  handleEnter() {\n    const command = this.getInput().trim();\n\n    if (command) {\n      this.addToHistory(command);\n      this.writeCommand(command);\n      this.clearInput();\n\n      // Emit command event\n      this.emit('command', command);\n    }\n  }\n\n  /**\n   * Handle Tab key (autocomplete)\n   */\n  handleTab() {\n    const input = this.getInput();\n    const matches = this.commands.filter((cmd) => cmd.startsWith(input));\n\n    if (matches.length === 1) {\n      this.setInput(matches[0] + ' ');\n    } else if (matches.length > 1) {\n      this.writeLine(`Available commands: ${matches.join(', ')}`, 'info');\n    }\n  }\n\n  /**\n   * Handle input changes\n   */\n  handleInput() {\n    // Could be used for live suggestions in the future\n    this.emit('input_change', this.getInput());\n  }\n\n  /**\n   * Handle Ctrl+C interrupt\n   */\n  handleInterrupt() {\n    this.writeLine('^C', 'warning');\n    this.clearInput();\n    this.emit('interrupt');\n  }\n\n  /**\n   * Setup scroll behavior\n   */\n  setupScrollBehavior() {\n    let isUserScrolling = false;\n    let scrollTimeout;\n    let lastScrollTop = 0;\n\n    this.outputElement.addEventListener('scroll', () => {\n      const currentScrollTop = this.outputElement.scrollTop;\n      const maxScrollTop = this.outputElement.scrollHeight - this.outputElement.clientHeight;\n\n      // Check if user scrolled up (away from bottom)\n      if (currentScrollTop < lastScrollTop && currentScrollTop < maxScrollTop - 10) {\n        isUserScrolling = true;\n\n        // Show scroll indicator if not already visible\n        this.showScrollIndicator();\n\n        clearTimeout(scrollTimeout);\n        // Don't auto-resume scrolling for 3 seconds after user scrolls up\n        scrollTimeout = setTimeout(() => {\n          // Only resume auto-scroll if user is back near the bottom\n          const newScrollTop = this.outputElement.scrollTop;\n          const newMaxScrollTop = this.outputElement.scrollHeight - this.outputElement.clientHeight;\n\n          if (newScrollTop >= newMaxScrollTop - 50) {\n            isUserScrolling = false;\n            this.hideScrollIndicator();\n          }\n        }, 3000);\n      }\n      // If user scrolled to bottom, resume auto-scrolling immediately\n      else if (currentScrollTop >= maxScrollTop - 10) {\n        isUserScrolling = false;\n        this.hideScrollIndicator();\n        clearTimeout(scrollTimeout);\n      }\n\n      lastScrollTop = currentScrollTop;\n    });\n\n    // Override shouldAutoScroll to check user scrolling\n    const originalShouldAutoScroll = this.shouldAutoScroll;\n    this.shouldAutoScroll = () => {\n      return originalShouldAutoScroll.call(this) && !isUserScrolling;\n    };\n\n    // Store reference for manual scroll control\n    this.isUserScrolling = () => isUserScrolling;\n    this.resumeAutoScroll = () => {\n      isUserScrolling = false;\n      this.hideScrollIndicator();\n      this.scrollToBottom(true); // Smooth scroll to bottom\n    };\n  }\n\n  /**\n   * Show scroll indicator\n   */\n  showScrollIndicator() {\n    let indicator = document.getElementById('scrollIndicator');\n\n    if (!indicator) {\n      indicator = document.createElement('div');\n      indicator.id = 'scrollIndicator';\n      indicator.className = 'scroll-indicator';\n      indicator.innerHTML = `\n        <span class=\"scroll-text\">Auto-scroll paused</span>\n        <button class=\"scroll-resume-btn\" onclick=\"window.claudeConsole.terminal.resumeAutoScroll()\">\n          ↓ Resume\n        </button>\n      `;\n\n      // Position it relative to the console container\n      const consoleContainer = this.outputElement.closest('.console-container');\n      if (consoleContainer) {\n        consoleContainer.appendChild(indicator);\n      } else {\n        document.body.appendChild(indicator);\n      }\n    }\n\n    indicator.style.display = 'flex';\n  }\n\n  /**\n   * Hide scroll indicator\n   */\n  hideScrollIndicator() {\n    const indicator = document.getElementById('scrollIndicator');\n    if (indicator) {\n      indicator.style.display = 'none';\n    }\n  }\n\n  /**\n   * Stream text output with typing effect\n   */\n  async streamText(text, delay = 10) {\n    const entry = this.createOutputEntry('', 'output', true);\n    this.outputElement.appendChild(entry);\n\n    const contentElement = entry.querySelector('.output-content');\n\n    for (let i = 0; i < text.length; i++) {\n      contentElement.textContent += text[i];\n      this.scrollToBottom();\n\n      if (delay > 0) {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      }\n    }\n\n    return entry;\n  }\n\n  /**\n   * Add event listener\n   */\n  on(event, callback) {\n    if (!this.eventListeners) {\n      this.eventListeners = new Map();\n    }\n\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n\n    this.eventListeners.get(event).push(callback);\n  }\n\n  /**\n   * Emit event\n   */\n  emit(event, data) {\n    if (!this.eventListeners || !this.eventListeners.has(event)) {\n      return;\n    }\n\n    this.eventListeners.get(event).forEach((callback) => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('Error in terminal event listener:', error);\n      }\n    });\n  }\n\n  /**\n   * Set maximum output lines\n   */\n  setMaxLines(maxLines) {\n    this.maxOutputLines = Math.max(100, Math.min(10000, maxLines));\n    this.limitOutputLines();\n  }\n\n  /**\n   * Get terminal statistics\n   */\n  getStats() {\n    const entries = this.outputElement.querySelectorAll('.output-entry');\n\n    return {\n      totalLines: entries.length,\n      historySize: this.history.length,\n      isLocked: this.isLocked,\n      currentPrompt: this.currentPrompt,\n    };\n  }\n\n  /**\n   * Export terminal history\n   */\n  exportHistory() {\n    const entries = Array.from(this.outputElement.querySelectorAll('.output-entry'));\n\n    return entries.map((entry) => {\n      const timestamp = entry.querySelector('.output-timestamp')?.textContent || '';\n      const content = entry.querySelector('.output-content')?.textContent || '';\n      const type =\n        entry\n          .querySelector('.output-content')\n          ?.className.split(' ')\n          .find((c) => c.startsWith('output-')) || '';\n\n      return { timestamp, content, type };\n    });\n  }\n\n  /**\n   * Import terminal history\n   */\n  importHistory(history) {\n    this.clear();\n\n    history.forEach(({ timestamp, content, type }) => {\n      this.write(content, type.replace('output-', ''), false);\n    });\n  }\n}\n"],"names":["TerminalEmulator","outputElement","inputElement","history","historyIndex","maxHistorySize","maxOutputLines","currentPrompt","isLocked","commands","ansiColors","setupInputHandlers","setupScrollBehavior","write","content","type","timestamp","entry","createOutputEntry","appendChild","limitOutputLines","scrollToBottom","writeLine","writeCommand","command","writeError","message","writeSuccess","writeWarning","writeInfo","writeHTML","html","document","createElement","className","innerHTML","classList","add","clear","showWelcomeMessage","existingWelcome","querySelector","welcome","setPrompt","prompt","promptElement","getElementById","textContent","setLocked","locked","disabled","placeholder","focus","getInput","value","setInput","clearInput","addToHistory","trim","length","push","shift","navigateHistory","direction","line","shouldShowTimestamp","timeElement","formatTimestamp","Date","contentElement","includes","processAnsiCodes","text","replace","match","code","color","date","toLocaleTimeString","hour12","hour","minute","second","showTimestamps","localStorage","getItem","entries","querySelectorAll","excessCount","i","contains","remove","smooth","shouldAutoScroll","scrollTo","top","scrollHeight","behavior","scrollTop","autoScroll","addEventListener","event","preventDefault","key","handleEnter","handleTab","ctrlKey","handleInterrupt","handleInput","emit","input","matches","filter","cmd","startsWith","join","isUserScrolling","scrollTimeout","lastScrollTop","currentScrollTop","maxScrollTop","clientHeight","showScrollIndicator","clearTimeout","setTimeout","newScrollTop","newMaxScrollTop","hideScrollIndicator","originalShouldAutoScroll","call","resumeAutoScroll","indicator","id","consoleContainer","closest","body","style","display","streamText","delay","Promise","resolve","on","callback","eventListeners","Map","has","set","get","data","forEach","error","console","setMaxLines","maxLines","Math","max","min","getStats","totalLines","historySize","exportHistory","Array","from","map","split","find","c","importHistory"],"mappings":"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"}