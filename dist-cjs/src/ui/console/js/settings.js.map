{"version":3,"sources":["../../../../../src/ui/console/js/settings.js"],"sourcesContent":["/**\n * Settings Manager for Claude Code Console\n * Handles configuration and preferences\n */\n\nexport class SettingsManager {\n  constructor() {\n    this.settings = this.loadSettings();\n    this.settingsPanel = null;\n    this.isVisible = false;\n\n    // Default settings\n    this.defaults = {\n      // Connection settings\n      serverUrl: 'ws://localhost:3000/ws',\n      authToken: '',\n      autoConnect: true,\n\n      // Appearance settings\n      theme: 'dark',\n      fontSize: 14,\n      lineHeight: 1.4,\n      fontFamily: 'JetBrains Mono',\n\n      // Behavior settings\n      autoScroll: true,\n      showTimestamps: true,\n      enableSounds: false,\n      maxLines: 1000,\n\n      // Claude Flow settings\n      defaultMode: 'coder',\n      swarmStrategy: 'development',\n      coordinationMode: 'centralized',\n\n      // Advanced settings\n      reconnectAttempts: 5,\n      heartbeatInterval: 30000,\n      commandTimeout: 30000,\n    };\n\n    // Merge defaults with loaded settings\n    this.settings = { ...this.defaults, ...this.settings };\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize settings panel\n   */\n  init() {\n    this.settingsPanel = document.getElementById('settingsPanel');\n    this.setupSettingsPanel();\n    this.applySettings();\n  }\n\n  /**\n   * Setup settings panel event listeners\n   */\n  setupSettingsPanel() {\n    // Toggle button\n    const settingsToggle = document.getElementById('settingsToggle');\n    if (settingsToggle) {\n      settingsToggle.addEventListener('click', () => this.toggle());\n    }\n\n    // Close button\n    const closeButton = document.getElementById('closeSettings');\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.hide());\n    }\n\n    // Settings form elements\n    this.setupFormElements();\n\n    // Action buttons\n    this.setupActionButtons();\n\n    // Click outside to close\n    document.addEventListener('click', (event) => {\n      if (\n        this.isVisible &&\n        !this.settingsPanel.contains(event.target) &&\n        !document.getElementById('settingsToggle').contains(event.target)\n      ) {\n        this.hide();\n      }\n    });\n\n    // ESC key to close\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'Escape' && this.isVisible) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Setup form element listeners\n   */\n  setupFormElements() {\n    // Connection settings\n    this.bindSetting('serverUrl', 'input');\n    this.bindSetting('authToken', 'input');\n\n    // Appearance settings\n    this.bindSetting('fontSize', 'change', (value) => {\n      this.applyFontSize(parseInt(value));\n    });\n\n    this.bindSetting('theme', 'change', (value) => {\n      this.applyTheme(value);\n    });\n\n    this.bindSetting('lineHeight', 'change', (value) => {\n      this.applyLineHeight(parseFloat(value));\n    });\n\n    // Behavior settings\n    this.bindSetting('autoScroll', 'change', (value) => {\n      localStorage.setItem('console_auto_scroll', value);\n    });\n\n    this.bindSetting('showTimestamps', 'change', (value) => {\n      localStorage.setItem('console_show_timestamps', value);\n    });\n\n    this.bindSetting('enableSounds', 'change');\n\n    this.bindSetting('maxLines', 'input', (value) => {\n      const maxLines = parseInt(value);\n      if (maxLines >= 100 && maxLines <= 10000) {\n        this.emit('max_lines_changed', maxLines);\n      }\n    });\n\n    // Claude Flow settings\n    this.bindSetting('defaultMode', 'change');\n    this.bindSetting('swarmStrategy', 'change');\n    this.bindSetting('coordinationMode', 'change');\n  }\n\n  /**\n   * Setup action buttons\n   */\n  setupActionButtons() {\n    const connectButton = document.getElementById('connectButton');\n    const disconnectButton = document.getElementById('disconnectButton');\n\n    if (connectButton) {\n      connectButton.addEventListener('click', () => {\n        this.emit('connect_requested', {\n          url: this.get('serverUrl'),\n          token: this.get('authToken'),\n        });\n      });\n    }\n\n    if (disconnectButton) {\n      disconnectButton.addEventListener('click', () => {\n        this.emit('disconnect_requested');\n      });\n    }\n\n    // Add reset button\n    const resetButton = document.createElement('button');\n    resetButton.className = 'reset-settings';\n    resetButton.textContent = 'Reset to Defaults';\n    resetButton.addEventListener('click', () => {\n      if (confirm('Reset all settings to defaults? This cannot be undone.')) {\n        this.resetToDefaults();\n      }\n    });\n\n    const settingsContent = document.querySelector('.settings-content');\n    if (settingsContent) {\n      settingsContent.appendChild(resetButton);\n    }\n  }\n\n  /**\n   * Bind setting to form element\n   */\n  bindSetting(settingName, eventType, callback) {\n    const element = document.getElementById(settingName);\n    if (!element) return;\n\n    // Set initial value\n    const value = this.get(settingName);\n    if (element.type === 'checkbox') {\n      element.checked = value;\n    } else {\n      element.value = value;\n    }\n\n    // Listen for changes\n    element.addEventListener(eventType, (event) => {\n      let newValue;\n\n      if (element.type === 'checkbox') {\n        newValue = element.checked;\n      } else if (element.type === 'number') {\n        newValue = parseFloat(element.value);\n      } else {\n        newValue = element.value;\n      }\n\n      this.set(settingName, newValue);\n\n      if (callback) {\n        callback(newValue);\n      }\n    });\n  }\n\n  /**\n   * Show settings panel\n   */\n  show() {\n    if (this.settingsPanel) {\n      this.settingsPanel.classList.add('visible');\n      this.isVisible = true;\n\n      // Focus first input\n      const firstInput = this.settingsPanel.querySelector('input, select');\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n  }\n\n  /**\n   * Hide settings panel\n   */\n  hide() {\n    if (this.settingsPanel) {\n      this.settingsPanel.classList.remove('visible');\n      this.isVisible = false;\n    }\n  }\n\n  /**\n   * Toggle settings panel\n   */\n  toggle() {\n    if (this.isVisible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Get setting value\n   */\n  get(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Set setting value\n   */\n  set(key, value) {\n    this.settings[key] = value;\n    this.saveSettings();\n    this.emit('setting_changed', { key, value });\n  }\n\n  /**\n   * Get all settings\n   */\n  getAll() {\n    return { ...this.settings };\n  }\n\n  /**\n   * Set multiple settings\n   */\n  setAll(newSettings) {\n    this.settings = { ...this.settings, ...newSettings };\n    this.saveSettings();\n    this.updateFormElements();\n    this.applySettings();\n  }\n\n  /**\n   * Reset to default settings\n   */\n  resetToDefaults() {\n    this.settings = { ...this.defaults };\n    this.saveSettings();\n    this.updateFormElements();\n    this.applySettings();\n    this.emit('settings_reset');\n  }\n\n  /**\n   * Load settings from localStorage\n   */\n  loadSettings() {\n    try {\n      const stored = localStorage.getItem('claude_console_settings');\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Save settings to localStorage\n   */\n  saveSettings() {\n    try {\n      localStorage.setItem('claude_console_settings', JSON.stringify(this.settings));\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n    }\n  }\n\n  /**\n   * Apply all settings to the UI\n   */\n  applySettings() {\n    this.applyTheme(this.get('theme'));\n    this.applyFontSize(this.get('fontSize'));\n    this.applyLineHeight(this.get('lineHeight'));\n\n    // Set individual localStorage items for terminal\n    localStorage.setItem('console_auto_scroll', this.get('autoScroll'));\n    localStorage.setItem('console_show_timestamps', this.get('showTimestamps'));\n  }\n\n  /**\n   * Apply theme\n   */\n  applyTheme(theme) {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('console_theme', theme);\n  }\n\n  /**\n   * Apply font size\n   */\n  applyFontSize(fontSize) {\n    document.documentElement.style.setProperty('--font-size-base', `${fontSize}px`);\n  }\n\n  /**\n   * Apply line height\n   */\n  applyLineHeight(lineHeight) {\n    document.documentElement.style.setProperty('--line-height', lineHeight);\n  }\n\n  /**\n   * Update form elements with current settings\n   */\n  updateFormElements() {\n    Object.keys(this.settings).forEach((key) => {\n      const element = document.getElementById(key);\n      if (element) {\n        if (element.type === 'checkbox') {\n          element.checked = this.get(key);\n        } else {\n          element.value = this.get(key);\n        }\n      }\n    });\n  }\n\n  /**\n   * Export settings\n   */\n  exportSettings() {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      settings: this.getAll(),\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json',\n    });\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `claude-console-settings-${Date.now()}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Import settings\n   */\n  async importSettings(file) {\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n\n      if (data.settings) {\n        this.setAll(data.settings);\n        return true;\n      } else {\n        throw new Error('Invalid settings file format');\n      }\n    } catch (error) {\n      console.error('Failed to import settings:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Validate setting value\n   */\n  validateSetting(key, value) {\n    const validators = {\n      fontSize: (v) => v >= 10 && v <= 24,\n      lineHeight: (v) => v >= 1.0 && v <= 2.0,\n      maxLines: (v) => v >= 100 && v <= 10000,\n      theme: (v) => ['dark', 'light', 'classic', 'matrix'].includes(v),\n      defaultMode: (v) =>\n        [\n          'coder',\n          'architect',\n          'analyst',\n          'researcher',\n          'reviewer',\n          'tester',\n          'debugger',\n          'documenter',\n          'optimizer',\n          'designer',\n        ].includes(v),\n      swarmStrategy: (v) =>\n        ['development', 'research', 'analysis', 'testing', 'optimization', 'maintenance'].includes(\n          v,\n        ),\n      coordinationMode: (v) =>\n        ['centralized', 'hierarchical', 'distributed', 'mesh', 'hybrid'].includes(v),\n    };\n\n    const validator = validators[key];\n    return validator ? validator(value) : true;\n  }\n\n  /**\n   * Update connection status in settings\n   */\n  updateConnectionStatus(status) {\n    const connectButton = document.getElementById('connectButton');\n    const disconnectButton = document.getElementById('disconnectButton');\n\n    if (connectButton && disconnectButton) {\n      if (status.connected) {\n        connectButton.disabled = true;\n        disconnectButton.disabled = false;\n      } else {\n        connectButton.disabled = false;\n        disconnectButton.disabled = true;\n      }\n    }\n\n    // Update connection info if it exists\n    this.updateConnectionInfo(status);\n  }\n\n  /**\n   * Update connection info display\n   */\n  updateConnectionInfo(status) {\n    let infoElement = document.getElementById('connectionInfo');\n\n    if (!infoElement) {\n      infoElement = document.createElement('div');\n      infoElement.id = 'connectionInfo';\n      infoElement.className = 'connection-info';\n\n      const connectionSection = document.querySelector('.setting-group');\n      if (connectionSection) {\n        connectionSection.appendChild(infoElement);\n      }\n    }\n\n    const statusClass = status.connected\n      ? 'connected'\n      : status.connecting\n        ? 'connecting'\n        : 'disconnected';\n\n    infoElement.className = `connection-info ${statusClass}`;\n\n    const title = status.connected\n      ? 'Connected'\n      : status.connecting\n        ? 'Connecting...'\n        : 'Disconnected';\n\n    const details = status.connected\n      ? `Connected to ${status.url}\\nPending requests: ${status.pendingRequests}\\nQueued messages: ${status.queuedMessages}`\n      : status.connecting\n        ? `Attempting to connect to ${status.url}`\n        : status.reconnectAttempts > 0\n          ? `Disconnected. Reconnect attempts: ${status.reconnectAttempts}`\n          : 'Not connected';\n\n    infoElement.innerHTML = `\n      <div class=\"connection-info-title\">${title}</div>\n      <div class=\"connection-info-details\">${details}</div>\n    `;\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    // Listen for theme changes from system\n    if (window.matchMedia) {\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      mediaQuery.addEventListener('change', (e) => {\n        if (this.get('theme') === 'auto') {\n          this.applyTheme(e.matches ? 'dark' : 'light');\n        }\n      });\n    }\n\n    // Listen for font size changes from browser zoom\n    window.addEventListener('resize', () => {\n      this.applyFontSize(this.get('fontSize'));\n    });\n  }\n\n  /**\n   * Event emitter functionality\n   */\n  on(event, callback) {\n    if (!this.eventListeners) {\n      this.eventListeners = new Map();\n    }\n\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n\n    this.eventListeners.get(event).push(callback);\n  }\n\n  /**\n   * Emit event\n   */\n  emit(event, data) {\n    if (!this.eventListeners || !this.eventListeners.has(event)) {\n      return;\n    }\n\n    this.eventListeners.get(event).forEach((callback) => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('Error in settings event listener:', error);\n      }\n    });\n  }\n\n  /**\n   * Get Claude Flow configuration\n   */\n  getClaudeFlowConfig() {\n    return {\n      defaultMode: this.get('defaultMode'),\n      swarmStrategy: this.get('swarmStrategy'),\n      coordinationMode: this.get('coordinationMode'),\n    };\n  }\n\n  /**\n   * Get connection configuration\n   */\n  getConnectionConfig() {\n    return {\n      url: this.get('serverUrl'),\n      token: this.get('authToken'),\n      autoConnect: this.get('autoConnect'),\n      reconnectAttempts: this.get('reconnectAttempts'),\n      heartbeatInterval: this.get('heartbeatInterval'),\n      commandTimeout: this.get('commandTimeout'),\n    };\n  }\n}\n"],"names":["SettingsManager","settings","loadSettings","settingsPanel","isVisible","defaults","serverUrl","authToken","autoConnect","theme","fontSize","lineHeight","fontFamily","autoScroll","showTimestamps","enableSounds","maxLines","defaultMode","swarmStrategy","coordinationMode","reconnectAttempts","heartbeatInterval","commandTimeout","setupEventListeners","init","document","getElementById","setupSettingsPanel","applySettings","settingsToggle","addEventListener","toggle","closeButton","hide","setupFormElements","setupActionButtons","event","contains","target","key","bindSetting","value","applyFontSize","parseInt","applyTheme","applyLineHeight","parseFloat","localStorage","setItem","emit","connectButton","disconnectButton","url","get","token","resetButton","createElement","className","textContent","confirm","resetToDefaults","settingsContent","querySelector","appendChild","settingName","eventType","callback","element","type","checked","newValue","set","show","classList","add","firstInput","focus","remove","saveSettings","getAll","setAll","newSettings","updateFormElements","stored","getItem","JSON","parse","error","console","stringify","documentElement","setAttribute","style","setProperty","Object","keys","forEach","exportSettings","exportData","timestamp","Date","toISOString","version","blob","Blob","URL","createObjectURL","a","href","download","now","body","click","removeChild","revokeObjectURL","importSettings","file","text","data","Error","validateSetting","validators","v","includes","validator","updateConnectionStatus","status","connected","disabled","updateConnectionInfo","infoElement","id","connectionSection","statusClass","connecting","title","details","pendingRequests","queuedMessages","innerHTML","window","matchMedia","mediaQuery","e","matches","on","eventListeners","Map","has","push","getClaudeFlowConfig","getConnectionConfig"],"mappings":"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"}