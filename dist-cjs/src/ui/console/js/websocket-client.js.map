{"version":3,"sources":["../../../../../src/ui/console/js/websocket-client.js"],"sourcesContent":["/**\n * WebSocket Client for Claude Code Console\n * Handles real-time communication with the backend MCP server\n */\n\nexport class WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.url = '';\n    this.authToken = '';\n    this.isConnected = false;\n    this.isConnecting = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.messageQueue = [];\n    this.requestHandlers = new Map();\n    this.eventListeners = new Map();\n    this.messageId = 1;\n\n    // Heartbeat configuration\n    this.heartbeatInterval = 30000; // 30 seconds\n    this.heartbeatTimer = null;\n    this.lastPongReceived = Date.now();\n    this.connectionTimeout = 10000; // 10 seconds\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Connect to WebSocket server\n   */\n  async connect(url, authToken = '') {\n    if (this.isConnecting || this.isConnected) {\n      console.warn('Already connected or connecting');\n      return;\n    }\n\n    this.url = url;\n    this.authToken = authToken;\n    this.isConnecting = true;\n\n    try {\n      await this.establishConnection();\n    } catch (error) {\n      this.isConnecting = false;\n      throw error;\n    }\n  }\n\n  /**\n   * Establish WebSocket connection\n   */\n  async establishConnection() {\n    return new Promise((resolve, reject) => {\n      try {\n        // Create WebSocket connection\n        this.ws = new WebSocket(this.url);\n\n        // Set up connection timeout\n        const connectionTimer = setTimeout(() => {\n          if (this.ws && this.ws.readyState !== WebSocket.OPEN) {\n            this.ws.close();\n            this.isConnecting = false;\n            reject(new Error('Connection timeout'));\n          }\n        }, this.connectionTimeout);\n\n        this.ws.onopen = () => {\n          clearTimeout(connectionTimer);\n          this.isConnected = true;\n          this.isConnecting = false;\n          this.reconnectAttempts = 0;\n          this.lastPongReceived = Date.now();\n\n          this.emit('connected');\n          this.startHeartbeat();\n          this.processMessageQueue();\n\n          console.log('WebSocket connected to:', this.url);\n          resolve();\n        };\n\n        this.ws.onclose = (event) => {\n          clearTimeout(connectionTimer);\n          this.handleDisconnection(event);\n        };\n\n        this.ws.onerror = (error) => {\n          clearTimeout(connectionTimer);\n          console.error('WebSocket error:', error);\n          this.isConnecting = false;\n          this.emit('error', error);\n\n          if (!this.isConnected) {\n            reject(error);\n          }\n        };\n\n        this.ws.onmessage = (event) => {\n          this.handleMessage(event);\n        };\n      } catch (error) {\n        this.isConnecting = false;\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Disconnect from WebSocket server\n   */\n  disconnect() {\n    if (this.ws) {\n      this.stopHeartbeat();\n      this.ws.close(1000, 'User initiated disconnect');\n      this.ws = null;\n    }\n\n    this.isConnected = false;\n    this.isConnecting = false;\n    this.reconnectAttempts = 0;\n    this.messageQueue = [];\n    this.requestHandlers.clear();\n\n    this.emit('disconnected');\n  }\n\n  /**\n   * Send a request and wait for response\n   */\n  async sendRequest(method, params = {}) {\n    const id = this.generateMessageId();\n    const request = {\n      jsonrpc: '2.0',\n      id,\n      method,\n      params,\n    };\n\n    return new Promise((resolve, reject) => {\n      // Store request handler\n      this.requestHandlers.set(id, { resolve, reject });\n\n      // Send request\n      this.sendMessage(request);\n\n      // Set timeout for request\n      setTimeout(() => {\n        if (this.requestHandlers.has(id)) {\n          this.requestHandlers.delete(id);\n          reject(new Error(`Request timeout for method: ${method}`));\n        }\n      }, 30000); // 30 second timeout\n    });\n  }\n\n  /**\n   * Send a notification (no response expected)\n   */\n  sendNotification(method, params = {}) {\n    const notification = {\n      jsonrpc: '2.0',\n      method,\n      params,\n    };\n\n    this.sendMessage(notification);\n  }\n\n  /**\n   * Send raw message\n   */\n  sendMessage(message) {\n    if (!this.isConnected) {\n      // Queue message for later\n      this.messageQueue.push(message);\n      this.emit('message_queued', message);\n      return;\n    }\n\n    try {\n      const messageStr = JSON.stringify(message);\n      this.ws.send(messageStr);\n      this.emit('message_sent', message);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      this.emit('send_error', error);\n    }\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  handleMessage(event) {\n    try {\n      const message = JSON.parse(event.data);\n\n      // Handle pong response\n      if (message.method === 'pong') {\n        this.lastPongReceived = Date.now();\n        return;\n      }\n\n      // Handle responses to requests\n      if (message.id !== undefined && this.requestHandlers.has(message.id)) {\n        const handler = this.requestHandlers.get(message.id);\n        this.requestHandlers.delete(message.id);\n\n        if (message.error) {\n          handler.reject(new Error(message.error.message || 'Request failed'));\n        } else {\n          handler.resolve(message.result);\n        }\n        return;\n      }\n\n      // Handle notifications and other messages\n      if (message.method) {\n        this.emit('notification', message);\n        this.emit(`notification_${message.method}`, message.params);\n      }\n\n      this.emit('message_received', message);\n    } catch (error) {\n      console.error('Failed to parse WebSocket message:', error);\n      this.emit('parse_error', error);\n    }\n  }\n\n  /**\n   * Handle disconnection\n   */\n  handleDisconnection(event) {\n    const wasConnected = this.isConnected;\n    this.isConnected = false;\n    this.isConnecting = false;\n    this.stopHeartbeat();\n\n    console.log('WebSocket disconnected:', event.code, event.reason);\n\n    if (wasConnected) {\n      this.emit('disconnected', { code: event.code, reason: event.reason });\n\n      // Attempt reconnection if not a clean close\n      if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.attemptReconnection();\n      }\n    }\n  }\n\n  /**\n   * Attempt to reconnect\n   */\n  async attemptReconnection() {\n    this.reconnectAttempts++;\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n\n    console.log(\n      `Attempting reconnection ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${delay}ms`,\n    );\n    this.emit('reconnecting', { attempt: this.reconnectAttempts, delay });\n\n    setTimeout(async () => {\n      try {\n        await this.establishConnection();\n      } catch (error) {\n        console.error('Reconnection failed:', error);\n\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n          this.emit('reconnection_failed');\n        } else {\n          this.attemptReconnection();\n        }\n      }\n    }, delay);\n  }\n\n  /**\n   * Start heartbeat mechanism\n   */\n  startHeartbeat() {\n    this.stopHeartbeat();\n\n    this.heartbeatTimer = setInterval(() => {\n      if (this.isConnected) {\n        // Check if we received a recent pong\n        const timeSinceLastPong = Date.now() - this.lastPongReceived;\n\n        if (timeSinceLastPong > this.heartbeatInterval * 2) {\n          console.warn('Heartbeat timeout - connection may be dead');\n          this.ws.close(1006, 'Heartbeat timeout');\n          return;\n        }\n\n        // Send ping\n        this.sendNotification('ping', { timestamp: Date.now() });\n      }\n    }, this.heartbeatInterval);\n  }\n\n  /**\n   * Stop heartbeat mechanism\n   */\n  stopHeartbeat() {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  /**\n   * Process queued messages\n   */\n  processMessageQueue() {\n    while (this.messageQueue.length > 0 && this.isConnected) {\n      const message = this.messageQueue.shift();\n      this.sendMessage(message);\n    }\n  }\n\n  /**\n   * Generate unique message ID\n   */\n  generateMessageId() {\n    return this.messageId++;\n  }\n\n  /**\n   * Set up internal event listeners\n   */\n  setupEventListeners() {\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        // Page is hidden - reduce heartbeat frequency\n        this.heartbeatInterval = 60000; // 1 minute\n      } else {\n        // Page is visible - restore normal heartbeat\n        this.heartbeatInterval = 30000; // 30 seconds\n        if (this.isConnected) {\n          this.startHeartbeat();\n        }\n      }\n    });\n\n    // Handle page unload\n    window.addEventListener('beforeunload', () => {\n      if (this.isConnected) {\n        this.disconnect();\n      }\n    });\n  }\n\n  /**\n   * Add event listener\n   */\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emit event\n   */\n  emit(event, data = null) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach((callback) => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in event listener:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Get connection status\n   */\n  getStatus() {\n    return {\n      connected: this.isConnected,\n      connecting: this.isConnecting,\n      url: this.url,\n      reconnectAttempts: this.reconnectAttempts,\n      queuedMessages: this.messageQueue.length,\n      pendingRequests: this.requestHandlers.size,\n    };\n  }\n\n  /**\n   * Initialize Claude Code session\n   */\n  async initializeSession(clientInfo = {}) {\n    const params = {\n      protocolVersion: { major: 2024, minor: 11, patch: 5 },\n      clientInfo: {\n        name: 'Claude Flow v2',\n        version: '2.0.0',\n        ...clientInfo,\n      },\n      capabilities: {\n        logging: { level: 'info' },\n        tools: { listChanged: true },\n        resources: { listChanged: false, subscribe: false },\n        prompts: { listChanged: false },\n      },\n    };\n\n    try {\n      const result = await this.sendRequest('initialize', params);\n      this.emit('session_initialized', result);\n      return result;\n    } catch (error) {\n      this.emit('session_error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute Claude Flow command\n   */\n  async executeCommand(command, args = {}) {\n    try {\n      const result = await this.sendRequest('tools/call', {\n        name: 'claude-flow/execute',\n        arguments: { command, args },\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Command execution failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available tools\n   */\n  async getAvailableTools() {\n    try {\n      const result = await this.sendRequest('tools/list');\n      // The server returns { tools: [...] }, so we need to extract the tools array\n      return result && result.tools ? result.tools : [];\n    } catch (error) {\n      console.error('Failed to get tools:', error);\n      return []; // Return empty array on error instead of throwing\n    }\n  }\n\n  /**\n   * Get server health status\n   */\n  async getHealthStatus() {\n    try {\n      return await this.sendRequest('tools/call', {\n        name: 'system/health',\n      });\n    } catch (error) {\n      console.error('Failed to get health status:', error);\n      throw error;\n    }\n  }\n}\n"],"names":["WebSocketClient","ws","url","authToken","isConnected","isConnecting","reconnectAttempts","maxReconnectAttempts","reconnectDelay","messageQueue","requestHandlers","Map","eventListeners","messageId","heartbeatInterval","heartbeatTimer","lastPongReceived","Date","now","connectionTimeout","setupEventListeners","connect","console","warn","establishConnection","error","Promise","resolve","reject","WebSocket","connectionTimer","setTimeout","readyState","OPEN","close","Error","onopen","clearTimeout","emit","startHeartbeat","processMessageQueue","log","onclose","event","handleDisconnection","onerror","onmessage","handleMessage","disconnect","stopHeartbeat","clear","sendRequest","method","params","id","generateMessageId","request","jsonrpc","set","sendMessage","has","delete","sendNotification","notification","message","push","messageStr","JSON","stringify","send","parse","data","undefined","handler","get","result","wasConnected","code","reason","attemptReconnection","delay","Math","pow","attempt","setInterval","timeSinceLastPong","timestamp","clearInterval","length","shift","document","addEventListener","hidden","window","on","callback","off","listeners","index","indexOf","splice","forEach","getStatus","connected","connecting","queuedMessages","pendingRequests","size","initializeSession","clientInfo","protocolVersion","major","minor","patch","name","version","capabilities","logging","level","tools","listChanged","resources","subscribe","prompts","executeCommand","command","args","arguments","getAvailableTools","getHealthStatus"],"mappings":"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"}