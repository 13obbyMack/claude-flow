{"version":3,"sources":["../../../../../src/ui/console/js/command-handler.js"],"sourcesContent":["/**\n * Command Handler for Claude Code Console\n * Processes and executes console commands\n */\n\nexport class CommandHandler {\n  constructor(terminal, wsClient) {\n    this.terminal = terminal;\n    this.wsClient = wsClient;\n    this.isProcessing = false;\n\n    // Built-in commands\n    this.builtinCommands = {\n      help: this.showHelp.bind(this),\n      clear: this.clearConsole.bind(this),\n      status: this.showStatus.bind(this),\n      connect: this.connectToServer.bind(this),\n      disconnect: this.disconnectFromServer.bind(this),\n      tools: this.listTools.bind(this),\n      health: this.checkHealth.bind(this),\n      history: this.showHistory.bind(this),\n      export: this.exportSession.bind(this),\n      theme: this.changeTheme.bind(this),\n      version: this.showVersion.bind(this),\n    };\n\n    // Claude Flow commands\n    this.claudeFlowCommands = {\n      'claude-flow': this.executeClaudeFlow.bind(this),\n      swarm: this.executeSwarm.bind(this),\n      init: this.initializeProject.bind(this),\n      config: this.manageConfig.bind(this),\n      memory: this.manageMemory.bind(this),\n      agents: this.manageAgents.bind(this),\n      benchmark: this.runBenchmark.bind(this),\n      sparc: this.executeSparc.bind(this),\n    };\n\n    // Direct SPARC mode commands\n    this.sparcModeCommands = {\n      coder: this.executeSparcMode.bind(this, 'coder'),\n      architect: this.executeSparcMode.bind(this, 'architect'),\n      analyst: this.executeSparcMode.bind(this, 'analyst'),\n      researcher: this.executeSparcMode.bind(this, 'researcher'),\n      reviewer: this.executeSparcMode.bind(this, 'reviewer'),\n      tester: this.executeSparcMode.bind(this, 'tester'),\n      debugger: this.executeSparcMode.bind(this, 'debugger'),\n      documenter: this.executeSparcMode.bind(this, 'documenter'),\n      optimizer: this.executeSparcMode.bind(this, 'optimizer'),\n      designer: this.executeSparcMode.bind(this, 'designer'),\n    };\n\n    this.allCommands = {\n      ...this.builtinCommands,\n      ...this.claudeFlowCommands,\n      ...this.sparcModeCommands,\n    };\n  }\n\n  /**\n   * Process a command\n   */\n  async processCommand(command) {\n    if (this.isProcessing) {\n      this.terminal.writeWarning('Another command is still processing. Please wait...');\n      return;\n    }\n\n    this.isProcessing = true;\n    this.terminal.setLocked(true);\n\n    try {\n      const { cmd, args } = this.parseCommand(command);\n\n      if (this.allCommands[cmd]) {\n        await this.allCommands[cmd](args);\n      } else {\n        await this.executeRemoteCommand(cmd, args);\n      }\n    } catch (error) {\n      this.terminal.writeError(error.message);\n      console.error('Command execution error:', error);\n    } finally {\n      this.isProcessing = false;\n      this.terminal.setLocked(false);\n    }\n  }\n\n  /**\n   * Parse command string into command and arguments\n   */\n  parseCommand(commandString) {\n    const parts = commandString.trim().split(/\\s+/);\n    const cmd = parts[0].toLowerCase();\n    const args = parts.slice(1);\n\n    return { cmd, args };\n  }\n\n  /**\n   * Show help information\n   */\n  async showHelp(args) {\n    if (args.length > 0) {\n      const command = args[0].toLowerCase();\n      if (this.allCommands[command]) {\n        this.showCommandHelp(command);\n      } else {\n        this.terminal.writeError(`Unknown command: ${command}`);\n      }\n      return;\n    }\n\n    this.terminal.writeInfo('Claude Flow Console Commands:');\n    this.terminal.writeLine('');\n\n    this.terminal.writeInfo('Built-in Commands:');\n    Object.keys(this.builtinCommands).forEach((cmd) => {\n      this.terminal.writeLine(`  ${cmd.padEnd(12)} - ${this.getCommandDescription(cmd)}`);\n    });\n\n    this.terminal.writeLine('');\n    this.terminal.writeInfo('Claude Flow Commands:');\n    Object.keys(this.claudeFlowCommands).forEach((cmd) => {\n      this.terminal.writeLine(`  ${cmd.padEnd(12)} - ${this.getCommandDescription(cmd)}`);\n    });\n\n    this.terminal.writeLine('');\n    this.terminal.writeInfo('Tool Commands (from tools list):');\n    this.terminal.writeLine('  system/health        - Get system health status');\n    this.terminal.writeLine(\n      '  memory/manage        - Manage memory (list, store <key> <value>, retrieve <key>)',\n    );\n    this.terminal.writeLine(\n      '  agents/manage        - Manage agents (list, create <type>, status <id>)',\n    );\n    this.terminal.writeLine(\n      '  swarm/orchestrate    - Swarm operations (status, create, start, stop)',\n    );\n    this.terminal.writeLine(\n      '  sparc/execute        - Execute SPARC modes (coder, architect, etc.)',\n    );\n    this.terminal.writeLine(\n      '  benchmark/run        - Run benchmarks (default, memory, cpu, network)',\n    );\n    this.terminal.writeLine('  claude-flow/execute  - Execute Claude Flow commands');\n\n    this.terminal.writeLine('');\n    this.terminal.writeInfo(\n      'Use \"help <command>\" for detailed information about a specific command.',\n    );\n    this.terminal.writeInfo(\n      'Use Ctrl+L to clear console, Ctrl+C to interrupt, Tab for autocomplete.',\n    );\n  }\n\n  /**\n   * Get command description\n   */\n  getCommandDescription(command) {\n    const descriptions = {\n      help: 'Show help information',\n      clear: 'Clear console output',\n      status: 'Show connection and system status',\n      connect: 'Connect to Claude Code server',\n      disconnect: 'Disconnect from server',\n      tools: 'List available tools',\n      health: 'Check server health',\n      history: 'Show command history',\n      export: 'Export session data',\n      theme: 'Change console theme',\n      version: 'Show version information',\n      'claude-flow': 'Execute Claude Flow commands',\n      swarm: 'Manage and execute swarms',\n      init: 'Initialize new project',\n      config: 'Manage configuration',\n      memory: 'Manage memory and data',\n      agents: 'Manage agents',\n      benchmark: 'Run benchmarks',\n      sparc: 'Execute SPARC mode commands',\n    };\n\n    return descriptions[command] || 'No description available';\n  }\n\n  /**\n   * Show detailed command help\n   */\n  showCommandHelp(command) {\n    const helpText = {\n      help: `\nUsage: help [command]\nShow help information for all commands or a specific command.\n\nExamples:\n  help              - Show all commands\n  help claude-flow  - Show help for claude-flow command`,\n\n      clear: `\nUsage: clear\nClear the console output. You can also use Ctrl+L.`,\n\n      connect: `\nUsage: connect [url] [token]\nConnect to Claude Code server.\n\nArguments:\n  url     - WebSocket URL (default: ws://localhost:3000/ws)\n  token   - Authentication token (optional)\n\nExamples:\n  connect\n  connect ws://localhost:3000/ws\n  connect ws://localhost:3000/ws my-auth-token`,\n\n      'claude-flow': `\nUsage: claude-flow <subcommand> [options]\nExecute Claude Flow commands.\n\nSubcommands:\n  start [mode]     - Start Claude Flow in specified mode\n  stop             - Stop Claude Flow\n  status           - Show Claude Flow status\n  modes            - List available SPARC modes\n  \nExamples:\n  claude-flow start coder\n  claude-flow status\n  claude-flow modes`,\n\n      swarm: `\nUsage: swarm <action> [options]\nManage and execute swarms.\n\nActions:\n  create <name>    - Create new swarm\n  start <name>     - Start existing swarm\n  stop <name>      - Stop running swarm\n  list             - List all swarms\n  status <name>    - Show swarm status\n  \nExamples:\n  swarm create my-swarm\n  swarm start my-swarm\n  swarm list`,\n    };\n\n    if (helpText[command]) {\n      this.terminal.writeInfo(helpText[command].trim());\n    } else {\n      this.terminal.writeInfo(`No detailed help available for: ${command}`);\n    }\n  }\n\n  /**\n   * Clear console\n   */\n  async clearConsole() {\n    this.terminal.clear();\n    this.terminal.writeSuccess('Console cleared');\n  }\n\n  /**\n   * Show status\n   */\n  async showStatus() {\n    const wsStatus = this.wsClient.getStatus();\n    const terminalStats = this.terminal.getStats();\n\n    this.terminal.writeInfo('System Status:');\n    this.terminal.writeLine('');\n\n    this.terminal.writeInfo('Connection:');\n    this.terminal.writeLine(`  Status: ${wsStatus.connected ? 'Connected' : 'Disconnected'}`);\n    this.terminal.writeLine(`  URL: ${wsStatus.url || 'Not set'}`);\n    this.terminal.writeLine(`  Reconnect attempts: ${wsStatus.reconnectAttempts}`);\n    this.terminal.writeLine(`  Queued messages: ${wsStatus.queuedMessages}`);\n    this.terminal.writeLine(`  Pending requests: ${wsStatus.pendingRequests}`);\n\n    this.terminal.writeLine('');\n    this.terminal.writeInfo('Terminal:');\n    this.terminal.writeLine(`  Total lines: ${terminalStats.totalLines}`);\n    this.terminal.writeLine(`  History size: ${terminalStats.historySize}`);\n    this.terminal.writeLine(`  Input locked: ${terminalStats.isLocked}`);\n    this.terminal.writeLine(`  Current prompt: ${terminalStats.currentPrompt}`);\n\n    if (wsStatus.connected) {\n      try {\n        const healthStatus = await this.wsClient.getHealthStatus();\n        this.terminal.writeLine('');\n        this.terminal.writeInfo('Server Health:');\n        this.terminal.writeLine(`  Status: ${healthStatus.healthy ? 'Healthy' : 'Unhealthy'}`);\n\n        if (healthStatus.metrics) {\n          Object.entries(healthStatus.metrics).forEach(([key, value]) => {\n            this.terminal.writeLine(`  ${key}: ${value}`);\n          });\n        }\n      } catch (error) {\n        this.terminal.writeWarning('Failed to get server health status');\n      }\n    }\n  }\n\n  /**\n   * Connect to server\n   */\n  async connectToServer(args) {\n    const url = args[0] || 'ws://localhost:3000/ws';\n    const token = args[1] || '';\n\n    this.terminal.writeInfo(`Connecting to ${url}...`);\n\n    try {\n      await this.wsClient.connect(url, token);\n\n      // Initialize session\n      await this.wsClient.initializeSession();\n\n      this.terminal.writeSuccess('Connected successfully');\n      this.terminal.setPrompt('claude-flow>');\n    } catch (error) {\n      this.terminal.writeError(`Connection failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Disconnect from server\n   */\n  async disconnectFromServer() {\n    this.wsClient.disconnect();\n    this.terminal.writeSuccess('Disconnected from server');\n    this.terminal.setPrompt('offline>');\n  }\n\n  /**\n   * List available tools\n   */\n  async listTools() {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    try {\n      const tools = await this.wsClient.getAvailableTools();\n\n      this.terminal.writeInfo('Available Tools:');\n      this.terminal.writeLine('');\n\n      if (tools && tools.length > 0) {\n        tools.forEach((tool) => {\n          this.terminal.writeLine(\n            `  ${tool.name.padEnd(20)} - ${tool.description || 'No description'}`,\n          );\n        });\n      } else {\n        this.terminal.writeWarning('No tools available');\n      }\n    } catch (error) {\n      this.terminal.writeError(`Failed to list tools: ${error.message}`);\n    }\n  }\n\n  /**\n   * Check server health\n   */\n  async checkHealth() {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    try {\n      const health = await this.wsClient.getHealthStatus();\n\n      if (health.healthy) {\n        this.terminal.writeSuccess('Server is healthy');\n      } else {\n        this.terminal.writeError(`Server is unhealthy: ${health.error || 'Unknown error'}`);\n      }\n\n      if (health.metrics) {\n        this.terminal.writeLine('');\n        this.terminal.writeInfo('Metrics:');\n        Object.entries(health.metrics).forEach(([key, value]) => {\n          this.terminal.writeLine(`  ${key}: ${value}`);\n        });\n      }\n    } catch (error) {\n      this.terminal.writeError(`Health check failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Show command history\n   */\n  async showHistory() {\n    const history = this.terminal.history;\n\n    if (history.length === 0) {\n      this.terminal.writeInfo('No command history');\n      return;\n    }\n\n    this.terminal.writeInfo('Command History:');\n    history.forEach((cmd, index) => {\n      this.terminal.writeLine(`  ${(index + 1).toString().padStart(3)}: ${cmd}`);\n    });\n  }\n\n  /**\n   * Export session data\n   */\n  async exportSession(args) {\n    const format = args[0] || 'json';\n\n    const sessionData = {\n      timestamp: new Date().toISOString(),\n      terminal: this.terminal.exportHistory(),\n      history: this.terminal.history,\n      status: this.wsClient.getStatus(),\n    };\n\n    if (format === 'json') {\n      const blob = new Blob([JSON.stringify(sessionData, null, 2)], { type: 'application/json' });\n      this.downloadFile(blob, `console-session-${Date.now()}.json`);\n      this.terminal.writeSuccess('Session exported as JSON');\n    } else {\n      this.terminal.writeError(`Unsupported export format: ${format}`);\n    }\n  }\n\n  /**\n   * Change theme\n   */\n  async changeTheme(args) {\n    const theme = args[0];\n    const validThemes = ['dark', 'light', 'classic', 'matrix'];\n\n    if (!theme) {\n      this.terminal.writeInfo(`Available themes: ${validThemes.join(', ')}`);\n      return;\n    }\n\n    if (!validThemes.includes(theme)) {\n      this.terminal.writeError(`Invalid theme: ${theme}`);\n      return;\n    }\n\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('console_theme', theme);\n    this.terminal.writeSuccess(`Theme changed to: ${theme}`);\n  }\n\n  /**\n   * Show version information\n   */\n  async showVersion() {\n    this.terminal.writeInfo('🌊 Claude Flow v2.0.0');\n    this.terminal.writeLine('Advanced swarm orchestration platform');\n    this.terminal.writeLine('Built with modern web technologies');\n  }\n\n  /**\n   * Execute Claude Flow command\n   */\n  async executeClaudeFlow(args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    if (args.length === 0) {\n      this.terminal.writeError('Usage: claude-flow <subcommand> [options]');\n      return;\n    }\n\n    const subcommand = args[0];\n    const subArgs = args.slice(1);\n\n    try {\n      const result = await this.wsClient.executeCommand('claude-flow', {\n        subcommand,\n        args: subArgs,\n      });\n\n      this.terminal.writeSuccess(`Claude Flow ${subcommand} executed successfully`);\n      if (result && result.output) {\n        this.terminal.writeLine(result.output);\n      }\n    } catch (error) {\n      this.terminal.writeError(`Claude Flow command failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Execute swarm command\n   */\n  async executeSwarm(args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    try {\n      const action = args[0] || 'status';\n      this.terminal.writeInfo(`Executing swarm ${action}...`);\n\n      const result = await this.wsClient.sendRequest('tools/call', {\n        name: 'swarm/status',\n        arguments: { action, args: args.slice(1) },\n      });\n\n      if (result && result.content && result.content[0]) {\n        this.terminal.writeSuccess(result.content[0].text);\n      } else {\n        this.terminal.writeSuccess('Swarm command executed successfully');\n      }\n    } catch (error) {\n      this.terminal.writeError(`Swarm command failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Initialize project\n   */\n  async initializeProject(args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    this.terminal.writeWarning('Project initialization not yet implemented in web console');\n  }\n\n  /**\n   * Manage configuration\n   */\n  async manageConfig(args) {\n    this.terminal.writeInfo('Use the Settings panel (⚙️ button) to manage configuration');\n  }\n\n  /**\n   * Manage memory\n   */\n  async manageMemory(args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    try {\n      const operation = args[0] || 'list';\n      const key = args[1];\n      const value = args.slice(2).join(' ');\n\n      this.terminal.writeInfo(`Executing memory ${operation}...`);\n\n      const result = await this.wsClient.sendRequest('tools/call', {\n        name: 'memory/manage',\n        arguments: { operation, key, value },\n      });\n\n      if (result && result.content && result.content[0]) {\n        this.terminal.writeSuccess(result.content[0].text);\n      } else {\n        this.terminal.writeSuccess('Memory operation completed successfully');\n      }\n    } catch (error) {\n      this.terminal.writeError(`Memory command failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Manage agents\n   */\n  async manageAgents(args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    try {\n      const action = args[0] || 'list';\n      const agentType = args[1];\n      const agentId = args[1];\n\n      this.terminal.writeInfo(`Executing agents ${action}...`);\n\n      const result = await this.wsClient.sendRequest('tools/call', {\n        name: 'agents/manage',\n        arguments: { action, agentType, agentId },\n      });\n\n      if (result && result.content && result.content[0]) {\n        this.terminal.writeSuccess(result.content[0].text);\n      } else {\n        this.terminal.writeSuccess('Agent operation completed successfully');\n      }\n    } catch (error) {\n      this.terminal.writeError(`Agent command failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Run benchmark\n   */\n  async runBenchmark(args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    try {\n      const suite = args[0] || 'default';\n      const iterations = parseInt(args[1]) || 10;\n\n      this.terminal.writeInfo(`Running benchmark suite: ${suite}...`);\n\n      const result = await this.wsClient.sendRequest('tools/call', {\n        name: 'benchmark/run',\n        arguments: { suite, iterations },\n      });\n\n      if (result && result.content && result.content[0]) {\n        this.terminal.writeSuccess(result.content[0].text);\n      } else {\n        this.terminal.writeSuccess('Benchmark completed successfully');\n      }\n    } catch (error) {\n      this.terminal.writeError(`Benchmark failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Execute SPARC mode\n   */\n  async executeSparc(args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    if (args.length === 0) {\n      this.terminal.writeInfo('Available SPARC modes:');\n      const modes = [\n        'coder',\n        'architect',\n        'analyst',\n        'researcher',\n        'reviewer',\n        'tester',\n        'debugger',\n        'documenter',\n        'optimizer',\n        'designer',\n      ];\n      modes.forEach((mode) => {\n        this.terminal.writeLine(`  ${mode}`);\n      });\n      return;\n    }\n\n    try {\n      const mode = args[0];\n      const task = args.slice(1).join(' ') || 'General task execution';\n      const options = {};\n\n      this.terminal.writeInfo(`Executing SPARC mode: ${mode}...`);\n\n      const result = await this.wsClient.sendRequest('tools/call', {\n        name: 'sparc/execute',\n        arguments: { mode, task, options },\n      });\n\n      if (result && result.content && result.content[0]) {\n        this.terminal.writeSuccess(result.content[0].text);\n      } else {\n        this.terminal.writeSuccess(`SPARC ${mode} mode executed successfully`);\n      }\n    } catch (error) {\n      this.terminal.writeError(`SPARC execution failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Execute specific SPARC mode\n   */\n  async executeSparcMode(mode, args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server');\n      return;\n    }\n\n    try {\n      const task = args.join(' ') || `Execute ${mode} mode tasks`;\n      const options = {};\n\n      this.terminal.writeInfo(`Executing SPARC ${mode} mode...`);\n\n      const result = await this.wsClient.sendRequest('tools/call', {\n        name: 'sparc/execute',\n        arguments: { mode, task, options },\n      });\n\n      if (result && result.content && result.content[0]) {\n        this.terminal.writeSuccess(result.content[0].text);\n      } else {\n        this.terminal.writeSuccess(`SPARC ${mode} mode executed successfully`);\n      }\n    } catch (error) {\n      this.terminal.writeError(`SPARC ${mode} execution failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Execute remote command via WebSocket\n   */\n  async executeRemoteCommand(command, args) {\n    if (!this.wsClient.isConnected) {\n      this.terminal.writeError('Not connected to server. Use \"connect\" command first.');\n      return;\n    }\n\n    try {\n      // Check if this is a tool name (contains slash)\n      if (command.includes('/')) {\n        return await this.executeToolDirect(command, args);\n      }\n\n      this.terminal.writeInfo(`Executing remote command: ${command}`);\n\n      const result = await this.wsClient.executeCommand(command, { args });\n\n      if (result && result.output) {\n        this.terminal.writeLine(result.output);\n      } else {\n        this.terminal.writeSuccess('Command executed successfully');\n      }\n    } catch (error) {\n      this.terminal.writeError(`Remote command failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Execute tool directly by name\n   */\n  async executeToolDirect(toolName, args) {\n    try {\n      this.terminal.writeInfo(`Executing tool: ${toolName}...`);\n\n      // Prepare arguments based on tool\n      let toolArgs = {};\n\n      switch (toolName) {\n        case 'system/health':\n          toolArgs = { detailed: args.includes('--detailed') };\n          break;\n\n        case 'memory/manage':\n          toolArgs = {\n            operation: args[0] || 'list',\n            key: args[1],\n            value: args.slice(2).join(' '),\n          };\n          break;\n\n        case 'agents/manage':\n          toolArgs = {\n            action: args[0] || 'list',\n            agentType: args[1],\n            agentId: args[1],\n          };\n          break;\n\n        case 'swarm/orchestrate':\n          toolArgs = {\n            action: args[0] || 'status',\n            args: args.slice(1),\n          };\n          break;\n\n        case 'sparc/execute':\n          toolArgs = {\n            mode: args[0] || 'coder',\n            task: args.slice(1).join(' ') || 'General task execution',\n            options: {},\n          };\n          break;\n\n        case 'benchmark/run':\n          toolArgs = {\n            suite: args[0] || 'default',\n            iterations: parseInt(args[1]) || 10,\n          };\n          break;\n\n        case 'claude-flow/execute':\n          toolArgs = {\n            command: args[0] || 'status',\n            args: args.slice(1),\n          };\n          break;\n\n        default:\n          toolArgs = { args };\n      }\n\n      const result = await this.wsClient.sendRequest('tools/call', {\n        name: toolName,\n        arguments: toolArgs,\n      });\n\n      if (result && result.content && result.content[0]) {\n        this.terminal.writeSuccess(result.content[0].text);\n      } else {\n        this.terminal.writeSuccess(`Tool ${toolName} executed successfully`);\n      }\n    } catch (error) {\n      this.terminal.writeError(`Tool execution failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Download file helper\n   */\n  downloadFile(blob, filename) {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Get command suggestions\n   */\n  getCommandSuggestions(input) {\n    const allCommands = Object.keys(this.allCommands);\n    return allCommands.filter((cmd) => cmd.startsWith(input.toLowerCase()));\n  }\n\n  /**\n   * Check if command exists\n   */\n  hasCommand(command) {\n    return this.allCommands.hasOwnProperty(command.toLowerCase());\n  }\n}\n"],"names":["CommandHandler","terminal","wsClient","isProcessing","builtinCommands","help","showHelp","bind","clear","clearConsole","status","showStatus","connect","connectToServer","disconnect","disconnectFromServer","tools","listTools","health","checkHealth","history","showHistory","export","exportSession","theme","changeTheme","version","showVersion","claudeFlowCommands","executeClaudeFlow","swarm","executeSwarm","init","initializeProject","config","manageConfig","memory","manageMemory","agents","manageAgents","benchmark","runBenchmark","sparc","executeSparc","sparcModeCommands","coder","executeSparcMode","architect","analyst","researcher","reviewer","tester","debugger","documenter","optimizer","designer","allCommands","processCommand","command","writeWarning","setLocked","cmd","args","parseCommand","executeRemoteCommand","error","writeError","message","console","commandString","parts","trim","split","toLowerCase","slice","length","showCommandHelp","writeInfo","writeLine","Object","keys","forEach","padEnd","getCommandDescription","descriptions","helpText","writeSuccess","wsStatus","getStatus","terminalStats","getStats","connected","url","reconnectAttempts","queuedMessages","pendingRequests","totalLines","historySize","isLocked","currentPrompt","healthStatus","getHealthStatus","healthy","metrics","entries","key","value","token","initializeSession","setPrompt","isConnected","getAvailableTools","tool","name","description","index","toString","padStart","format","sessionData","timestamp","Date","toISOString","exportHistory","blob","Blob","JSON","stringify","type","downloadFile","now","validThemes","join","includes","document","documentElement","setAttribute","localStorage","setItem","subcommand","subArgs","result","executeCommand","output","action","sendRequest","arguments","content","text","operation","agentType","agentId","suite","iterations","parseInt","modes","mode","task","options","executeToolDirect","toolName","toolArgs","detailed","filename","URL","createObjectURL","a","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","getCommandSuggestions","input","filter","startsWith","hasCommand","hasOwnProperty"],"mappings":"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"}