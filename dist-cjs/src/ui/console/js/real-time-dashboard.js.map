{"version":3,"sources":["../../../../../src/ui/console/js/real-time-dashboard.js"],"sourcesContent":["/**\n * RealTimeDashboard - Enhanced real-time monitoring dashboard for Claude Flow swarms\n * Integrates multiple visualization components with live data updates\n */\n\nimport { SwarmVisualizer } from './swarm-visualizer.js';\n\nexport class RealTimeDashboard {\n  constructor(container, componentLibrary) {\n    this.container = container;\n    this.components = componentLibrary;\n    this.swarmVisualizer = null;\n    this.isActive = false;\n    this.updateInterval = null;\n    this.websocket = null;\n    this.metrics = {\n      history: [],\n      current: null\n    };\n    \n    this.init();\n  }\n\n  /**\n   * Initialize dashboard\n   */\n  init() {\n    this.createDashboardLayout();\n    this.setupWebSocket();\n    this.startMetricsCollection();\n    console.log('📊 Real-time Dashboard initialized');\n  }\n\n  /**\n   * Create dashboard layout\n   */\n  createDashboardLayout() {\n    // Main dashboard container\n    const dashboard = document.createElement('div');\n    dashboard.className = 'claude-realtime-dashboard';\n    dashboard.style.cssText = `\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      grid-template-rows: auto 1fr auto;\n      gap: 16px;\n      height: 100vh;\n      padding: 16px;\n      background: #0a0a0a;\n      color: white;\n    `;\n\n    // Header with title and controls\n    const header = this.createDashboardHeader();\n    dashboard.appendChild(header);\n\n    // Main content area\n    const content = document.createElement('div');\n    content.style.cssText = `\n      grid-column: 1 / -1;\n      display: grid;\n      grid-template-columns: 2fr 1fr;\n      gap: 16px;\n      overflow: hidden;\n    `;\n\n    // Left panel - Swarm Visualizer\n    const leftPanel = document.createElement('div');\n    leftPanel.className = 'dashboard-left-panel';\n    this.swarmVisualizer = new SwarmVisualizer(leftPanel, this.components);\n\n    // Right panel - Metrics and controls\n    const rightPanel = this.createRightPanel();\n\n    content.appendChild(leftPanel);\n    content.appendChild(rightPanel);\n    dashboard.appendChild(content);\n\n    // Footer with status information\n    const footer = this.createDashboardFooter();\n    dashboard.appendChild(footer);\n\n    this.container.appendChild(dashboard);\n    \n    this.elements = {\n      dashboard,\n      header,\n      content,\n      leftPanel,\n      rightPanel,\n      footer\n    };\n  }\n\n  /**\n   * Create dashboard header\n   */\n  createDashboardHeader() {\n    const header = document.createElement('div');\n    header.style.cssText = `\n      grid-column: 1 / -1;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 16px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 8px;\n    `;\n\n    // Title and status\n    const titleSection = document.createElement('div');\n    titleSection.innerHTML = `\n      <h1 style=\"margin: 0; color: #00d4ff; font-size: 24px;\">\n        🌊 Claude Flow Real-Time Dashboard\n      </h1>\n      <p style=\"margin: 4px 0 0 0; color: #888; font-size: 14px;\">\n        Live swarm monitoring and performance analytics\n      </p>\n    `;\n\n    // Control buttons\n    const controls = document.createElement('div');\n    controls.style.display = 'flex';\n    controls.style.gap = '12px';\n\n    const startBtn = this.components.createActionButton({\n      type: 'primary',\n      text: 'Start All',\n      icon: '▶️',\n      onclick: () => this.startAllMonitoring()\n    });\n\n    const stopBtn = this.components.createActionButton({\n      type: 'secondary',\n      text: 'Stop All',\n      icon: '⏹️',\n      onclick: () => this.stopAllMonitoring()\n    });\n\n    const exportBtn = this.components.createActionButton({\n      type: 'secondary',\n      text: 'Export Data',\n      icon: '💾',\n      onclick: () => this.exportDashboardData()\n    });\n\n    controls.appendChild(startBtn.element);\n    controls.appendChild(stopBtn.element);\n    controls.appendChild(exportBtn.element);\n\n    header.appendChild(titleSection);\n    header.appendChild(controls);\n\n    this.headerElements = {\n      startBtn,\n      stopBtn,\n      exportBtn\n    };\n\n    return header;\n  }\n\n  /**\n   * Create right panel with metrics and controls\n   */\n  createRightPanel() {\n    const panel = document.createElement('div');\n    panel.style.cssText = `\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n      overflow-y: auto;\n    `;\n\n    // Performance metrics chart\n    const metricsChart = this.createMetricsChart();\n    panel.appendChild(metricsChart);\n\n    // System health indicators\n    const healthPanel = this.createHealthPanel();\n    panel.appendChild(healthPanel);\n\n    // Memory usage chart\n    const memoryChart = this.createMemoryChart();\n    panel.appendChild(memoryChart);\n\n    // Task queue status\n    const queueStatus = this.createQueueStatus();\n    panel.appendChild(queueStatus);\n\n    // Recent activities log\n    const activityLog = this.createActivityLog();\n    panel.appendChild(activityLog);\n\n    return panel;\n  }\n\n  /**\n   * Create performance metrics chart\n   */\n  createMetricsChart() {\n    const metricsChart = this.components.createMetricsChart({\n      title: 'Performance Metrics',\n      width: 350,\n      height: 200,\n      type: 'line'\n    });\n\n    // Sample data\n    this.updateMetricsChart(metricsChart);\n    \n    this.metricsChart = metricsChart;\n    return metricsChart.element;\n  }\n\n  /**\n   * Create system health panel\n   */\n  createHealthPanel() {\n    const panel = this.components.createInfoPanel({\n      title: '🏥 System Health'\n    });\n\n    const healthMetrics = [\n      { name: 'CPU Usage', value: '45%', status: 'good' },\n      { name: 'Memory Usage', value: '2.1GB', status: 'good' },\n      { name: 'Network I/O', value: '120 Mbps', status: 'good' },\n      { name: 'Disk Usage', value: '67%', status: 'warning' },\n      { name: 'Response Time', value: '234ms', status: 'good' }\n    ];\n\n    const healthHTML = healthMetrics.map(metric => `\n      <div style=\"display: flex; justify-content: space-between; align-items: center; margin: 8px 0;\">\n        <span>${metric.name}:</span>\n        <span class=\"health-metric health-${metric.status}\" style=\"\n          padding: 4px 8px;\n          border-radius: 4px;\n          font-weight: bold;\n          ${metric.status === 'good' ? 'background: #22c55e; color: white;' : \n            metric.status === 'warning' ? 'background: #f59e0b; color: white;' : \n            'background: #ef4444; color: white;'}\n        \">${metric.value}</span>\n      </div>\n    `).join('');\n\n    panel.setContent(healthHTML);\n    this.healthPanel = panel;\n    return panel.element;\n  }\n\n  /**\n   * Create memory usage chart\n   */\n  createMemoryChart() {\n    const memoryChart = this.components.createMetricsChart({\n      title: 'Memory Usage Over Time',\n      width: 350,\n      height: 150,\n      type: 'line'\n    });\n\n    this.updateMemoryChart(memoryChart);\n    this.memoryChart = memoryChart;\n    return memoryChart.element;\n  }\n\n  /**\n   * Create task queue status\n   */\n  createQueueStatus() {\n    const panel = this.components.createInfoPanel({\n      title: '📋 Task Queue Status'\n    });\n\n    const queueData = {\n      pending: Math.floor(Math.random() * 20),\n      processing: Math.floor(Math.random() * 8),\n      completed: Math.floor(Math.random() * 150) + 50,\n      failed: Math.floor(Math.random() * 5)\n    };\n\n    const queueHTML = `\n      <div class=\"queue-stats\" style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 12px;\">\n        <div class=\"queue-stat\">\n          <div style=\"font-size: 24px; font-weight: bold; color: #f59e0b;\">${queueData.pending}</div>\n          <div style=\"color: #888; font-size: 12px;\">Pending</div>\n        </div>\n        <div class=\"queue-stat\">\n          <div style=\"font-size: 24px; font-weight: bold; color: #00d4ff;\">${queueData.processing}</div>\n          <div style=\"color: #888; font-size: 12px;\">Processing</div>\n        </div>\n        <div class=\"queue-stat\">\n          <div style=\"font-size: 24px; font-weight: bold; color: #22c55e;\">${queueData.completed}</div>\n          <div style=\"color: #888; font-size: 12px;\">Completed</div>\n        </div>\n        <div class=\"queue-stat\">\n          <div style=\"font-size: 24px; font-weight: bold; color: #ef4444;\">${queueData.failed}</div>\n          <div style=\"color: #888; font-size: 12px;\">Failed</div>\n        </div>\n      </div>\n    `;\n\n    panel.setContent(queueHTML);\n    this.queuePanel = panel;\n    return panel.element;\n  }\n\n  /**\n   * Create activity log\n   */\n  createActivityLog() {\n    const panel = this.components.createInfoPanel({\n      title: '📝 Recent Activity'\n    });\n\n    const activities = [\n      { time: '14:23:15', type: 'info', message: 'Agent coder_01 completed task #127' },\n      { time: '14:22:58', type: 'success', message: 'Swarm topology optimized (+12% efficiency)' },\n      { time: '14:22:45', type: 'warning', message: 'Agent analyzer_03 high memory usage (89%)' },\n      { time: '14:22:30', type: 'info', message: 'New task assigned to researcher_02' },\n      { time: '14:22:12', type: 'error', message: 'Connection timeout to agent reviewer_01' }\n    ];\n\n    const activityHTML = activities.map(activity => `\n      <div class=\"activity-item\" style=\"\n        display: flex; \n        gap: 8px; \n        margin: 8px 0; \n        padding: 8px; \n        background: #2a2a2a; \n        border-radius: 4px;\n        border-left: 3px solid ${\n          activity.type === 'success' ? '#22c55e' :\n          activity.type === 'warning' ? '#f59e0b' :\n          activity.type === 'error' ? '#ef4444' : '#00d4ff'\n        };\n      \">\n        <span style=\"color: #888; font-size: 12px; min-width: 60px;\">${activity.time}</span>\n        <span style=\"font-size: 14px;\">${activity.message}</span>\n      </div>\n    `).join('');\n\n    panel.setContent(`<div style=\"max-height: 200px; overflow-y: auto;\">${activityHTML}</div>`);\n    this.activityPanel = panel;\n    return panel.element;\n  }\n\n  /**\n   * Create dashboard footer\n   */\n  createDashboardFooter() {\n    const footer = document.createElement('div');\n    footer.style.cssText = `\n      grid-column: 1 / -1;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 12px 16px;\n      background: #1a1a1a;\n      border: 1px solid #444;\n      border-radius: 8px;\n      font-size: 12px;\n      color: #888;\n    `;\n\n    const leftStatus = document.createElement('div');\n    leftStatus.innerHTML = `\n      Status: <span id=\"dashboard-status\" style=\"color: #22c55e;\">●</span> Active |\n      Uptime: <span id=\"dashboard-uptime\">00:00:00</span> |\n      Last Update: <span id=\"dashboard-last-update\">Never</span>\n    `;\n\n    const rightStatus = document.createElement('div');\n    rightStatus.innerHTML = `\n      Total Messages: <span id=\"dashboard-messages\">0</span> |\n      Data Points: <span id=\"dashboard-data-points\">0</span> |\n      Version: Claude Flow v2.0.0\n    `;\n\n    footer.appendChild(leftStatus);\n    footer.appendChild(rightStatus);\n\n    this.footerElements = {\n      status: leftStatus.querySelector('#dashboard-status'),\n      uptime: leftStatus.querySelector('#dashboard-uptime'),\n      lastUpdate: leftStatus.querySelector('#dashboard-last-update'),\n      messages: rightStatus.querySelector('#dashboard-messages'),\n      dataPoints: rightStatus.querySelector('#dashboard-data-points')\n    };\n\n    return footer;\n  }\n\n  /**\n   * Setup WebSocket connection for real-time updates\n   */\n  setupWebSocket() {\n    try {\n      const wsUrl = 'ws://localhost:3000/dashboard';\n      this.websocket = new WebSocket(wsUrl);\n\n      this.websocket.onopen = () => {\n        console.log('📡 Dashboard WebSocket connected');\n        this.updateConnectionStatus(true);\n      };\n\n      this.websocket.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleWebSocketMessage(data);\n        } catch (error) {\n          console.warn('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      this.websocket.onclose = () => {\n        console.log('📡 Dashboard WebSocket disconnected');\n        this.updateConnectionStatus(false);\n        // Attempt reconnection after 5 seconds\n        setTimeout(() => this.setupWebSocket(), 5000);\n      };\n\n      this.websocket.onerror = (error) => {\n        console.error('📡 Dashboard WebSocket error:', error);\n      };\n\n    } catch (error) {\n      console.warn('WebSocket not available, using polling fallback');\n      this.startPollingFallback();\n    }\n  }\n\n  /**\n   * Handle WebSocket messages\n   */\n  handleWebSocketMessage(data) {\n    switch (data.type) {\n      case 'swarm_update':\n        // Forward to swarm visualizer\n        if (this.swarmVisualizer) {\n          this.swarmVisualizer.swarmData = data.payload;\n          this.swarmVisualizer.processSwarmData();\n          this.swarmVisualizer.updateStats();\n        }\n        break;\n\n      case 'metrics_update':\n        this.updateMetricsFromData(data.payload);\n        break;\n\n      case 'health_update':\n        this.updateHealthStatus(data.payload);\n        break;\n\n      case 'activity_log':\n        this.addActivityLog(data.payload);\n        break;\n\n      default:\n        console.log('Unknown WebSocket message type:', data.type);\n    }\n\n    this.updateLastUpdateTime();\n  }\n\n  /**\n   * Start polling fallback for when WebSocket isn't available\n   */\n  startPollingFallback() {\n    this.updateInterval = setInterval(() => {\n      this.fetchDashboardData();\n    }, 2000);\n  }\n\n  /**\n   * Fetch dashboard data via HTTP\n   */\n  async fetchDashboardData() {\n    try {\n      const response = await fetch('/api/claude-flow/dashboard/data');\n      if (response.ok) {\n        const data = await response.json();\n        this.handleDashboardData(data);\n      }\n    } catch (error) {\n      console.warn('Failed to fetch dashboard data:', error);\n      // Generate mock data for demo\n      this.handleDashboardData(this.generateMockDashboardData());\n    }\n  }\n\n  /**\n   * Generate mock dashboard data\n   */\n  generateMockDashboardData() {\n    return {\n      swarm: {\n        agents: 6,\n        active: 4,\n        busy: 2,\n        idle: 2,\n        errors: 0\n      },\n      metrics: {\n        cpuUsage: Math.random() * 30 + 20,\n        memoryUsage: Math.random() * 40 + 40,\n        throughput: Math.random() * 50 + 25,\n        latency: Math.random() * 200 + 100\n      },\n      health: {\n        overall: 'good',\n        services: ['swarm', 'memory', 'neural'].map(service => ({\n          name: service,\n          status: Math.random() > 0.8 ? 'warning' : 'good'\n        }))\n      }\n    };\n  }\n\n  /**\n   * Update metrics charts with new data\n   */\n  updateMetricsFromData(data) {\n    // Add to history\n    this.metrics.history.push({\n      timestamp: Date.now(),\n      ...data\n    });\n\n    // Keep only last 50 data points\n    if (this.metrics.history.length > 50) {\n      this.metrics.history.shift();\n    }\n\n    this.metrics.current = data;\n    this.updateMetricsChart(this.metricsChart);\n    this.updateMemoryChart(this.memoryChart);\n  }\n\n  /**\n   * Update metrics chart\n   */\n  updateMetricsChart(chart) {\n    if (!chart || !this.metrics.history.length) return;\n\n    const data = this.metrics.history.map((point, index) => ({\n      x: index,\n      value: point.throughput || Math.random() * 100\n    }));\n\n    chart.updateData(data);\n  }\n\n  /**\n   * Update memory chart\n   */\n  updateMemoryChart(chart) {\n    if (!chart || !this.metrics.history.length) return;\n\n    const data = this.metrics.history.map((point, index) => ({\n      x: index,\n      value: point.memoryUsage || Math.random() * 100\n    }));\n\n    chart.updateData(data);\n  }\n\n  /**\n   * Start all monitoring systems\n   */\n  startAllMonitoring() {\n    this.isActive = true;\n    \n    // Start swarm visualizer\n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.startMonitoring();\n    }\n\n    // Start metrics collection\n    this.startMetricsCollection();\n\n    // Update UI state\n    this.headerElements.startBtn.setDisabled(true);\n    this.headerElements.stopBtn.setDisabled(false);\n    this.updateConnectionStatus(true);\n\n    console.log('🚀 All dashboard monitoring started');\n  }\n\n  /**\n   * Stop all monitoring systems\n   */\n  stopAllMonitoring() {\n    this.isActive = false;\n\n    // Stop swarm visualizer\n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.stopMonitoring();\n    }\n\n    // Stop metrics collection\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n\n    // Update UI state\n    this.headerElements.startBtn.setDisabled(false);\n    this.headerElements.stopBtn.setDisabled(true);\n    this.updateConnectionStatus(false);\n\n    console.log('⏹️ All dashboard monitoring stopped');\n  }\n\n  /**\n   * Start metrics collection\n   */\n  startMetricsCollection() {\n    if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN) {\n      this.startPollingFallback();\n    }\n  }\n\n  /**\n   * Update connection status\n   */\n  updateConnectionStatus(connected) {\n    if (this.footerElements.status) {\n      this.footerElements.status.style.color = connected ? '#22c55e' : '#ef4444';\n      this.footerElements.status.textContent = connected ? '●' : '●';\n    }\n  }\n\n  /**\n   * Update last update time\n   */\n  updateLastUpdateTime() {\n    if (this.footerElements.lastUpdate) {\n      this.footerElements.lastUpdate.textContent = new Date().toLocaleTimeString();\n    }\n  }\n\n  /**\n   * Export dashboard data\n   */\n  exportDashboardData() {\n    const exportData = {\n      timestamp: Date.now(),\n      metrics: this.metrics,\n      swarmData: this.swarmVisualizer?.swarmData,\n      version: 'Claude Flow v2.0.0'\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `claude-flow-dashboard-${Date.now()}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    console.log('💾 Dashboard data exported');\n  }\n\n  /**\n   * Store progress to swarm memory\n   */\n  async storeProgressToMemory() {\n    const progressData = {\n      dashboardActive: this.isActive,\n      metricsCount: this.metrics.history.length,\n      swarmVisualizerActive: this.swarmVisualizer?.isActive || false,\n      lastUpdate: Date.now(),\n      components: {\n        swarmVisualizer: 'active',\n        metricsChart: 'active',\n        healthPanel: 'active',\n        activityLog: 'active'\n      }\n    };\n\n    try {\n      // This would normally call the memory API\n      console.log('📊 Storing dashboard progress to memory:', progressData);\n    } catch (error) {\n      console.warn('Failed to store progress to memory:', error);\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy() {\n    this.stopAllMonitoring();\n    \n    if (this.websocket) {\n      this.websocket.close();\n    }\n\n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.destroy();\n    }\n\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}\n\nexport default RealTimeDashboard;"],"names":["SwarmVisualizer","RealTimeDashboard","container","componentLibrary","components","swarmVisualizer","isActive","updateInterval","websocket","metrics","history","current","init","createDashboardLayout","setupWebSocket","startMetricsCollection","console","log","dashboard","document","createElement","className","style","cssText","header","createDashboardHeader","appendChild","content","leftPanel","rightPanel","createRightPanel","footer","createDashboardFooter","elements","titleSection","innerHTML","controls","display","gap","startBtn","createActionButton","type","text","icon","onclick","startAllMonitoring","stopBtn","stopAllMonitoring","exportBtn","exportDashboardData","element","headerElements","panel","metricsChart","createMetricsChart","healthPanel","createHealthPanel","memoryChart","createMemoryChart","queueStatus","createQueueStatus","activityLog","createActivityLog","title","width","height","updateMetricsChart","createInfoPanel","healthMetrics","name","value","status","healthHTML","map","metric","join","setContent","updateMemoryChart","queueData","pending","Math","floor","random","processing","completed","failed","queueHTML","queuePanel","activities","time","message","activityHTML","activity","activityPanel","leftStatus","rightStatus","footerElements","querySelector","uptime","lastUpdate","messages","dataPoints","wsUrl","WebSocket","onopen","updateConnectionStatus","onmessage","event","data","JSON","parse","handleWebSocketMessage","error","warn","onclose","setTimeout","onerror","startPollingFallback","swarmData","payload","processSwarmData","updateStats","updateMetricsFromData","updateHealthStatus","addActivityLog","updateLastUpdateTime","setInterval","fetchDashboardData","response","fetch","ok","json","handleDashboardData","generateMockDashboardData","swarm","agents","active","busy","idle","errors","cpuUsage","memoryUsage","throughput","latency","health","overall","services","service","push","timestamp","Date","now","length","shift","chart","point","index","x","updateData","startMonitoring","setDisabled","stopMonitoring","clearInterval","readyState","OPEN","connected","color","textContent","toLocaleTimeString","exportData","version","blob","Blob","stringify","url","URL","createObjectURL","a","href","download","body","click","removeChild","revokeObjectURL","storeProgressToMemory","progressData","dashboardActive","metricsCount","swarmVisualizerActive","destroy","close"],"mappings":"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"}