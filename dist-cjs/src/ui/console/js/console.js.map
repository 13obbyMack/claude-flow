{"version":3,"sources":["../../../../../src/ui/console/js/console.js"],"sourcesContent":["/**\n * Main Console Application\n * Coordinates all components of the Claude Code Console\n */\n\nimport { WebSocketClient } from './websocket-client.js';\nimport { TerminalEmulator } from './terminal-emulator.js';\nimport { CommandHandler } from './command-handler.js';\nimport { SettingsManager } from './settings.js';\n\nclass ClaudeCodeConsole {\n  constructor() {\n    // Initialize components\n    this.wsClient = new WebSocketClient();\n    this.terminal = null;\n    this.commandHandler = null;\n    this.settings = new SettingsManager();\n\n    // State management\n    this.isInitialized = false;\n    this.startTime = Date.now();\n    this.messageCount = 0;\n    this.activeAgents = 0;\n\n    // DOM elements\n    this.elements = {};\n\n    // Status update intervals\n    this.statusInterval = null;\n    this.uptimeInterval = null;\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize the console application\n   */\n  async init() {\n    if (this.isInitialized) return;\n\n    try {\n      // Show loading overlay\n      this.showLoading('Initializing Claude Code Console...');\n\n      // Get DOM elements\n      this.getDOMElements();\n\n      // Initialize terminal emulator\n      this.terminal = new TerminalEmulator(this.elements.consoleOutput, this.elements.consoleInput);\n\n      // Initialize command handler\n      this.commandHandler = new CommandHandler(this.terminal, this.wsClient);\n\n      // Initialize settings\n      this.settings.init();\n\n      // Setup component interactions\n      this.setupComponentInteractions();\n\n      // Setup UI event handlers\n      this.setupUIEventHandlers();\n\n      // Apply initial settings\n      this.applyInitialSettings();\n\n      // Start status updates\n      this.startStatusUpdates();\n\n      // Hide loading overlay\n      this.hideLoading();\n\n      // Show welcome message\n      this.showWelcomeMessage();\n\n      // Auto-connect if enabled\n      if (this.settings.get('autoConnect')) {\n        await this.autoConnect();\n      }\n\n      this.isInitialized = true;\n      console.log('Claude Code Console initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize console:', error);\n      this.showError('Failed to initialize console: ' + error.message);\n    }\n  }\n\n  /**\n   * Get DOM elements\n   */\n  getDOMElements() {\n    this.elements = {\n      consoleOutput: document.getElementById('consoleOutput'),\n      consoleInput: document.getElementById('consoleInput'),\n      settingsPanel: document.getElementById('settingsPanel'),\n      loadingOverlay: document.getElementById('loadingOverlay'),\n      connectionStatus: document.getElementById('connectionStatus'),\n      statusIndicator: document.getElementById('statusIndicator'),\n      statusText: document.getElementById('statusText'),\n      currentMode: document.getElementById('currentMode'),\n      activeAgents: document.getElementById('activeAgents'),\n      uptime: document.getElementById('uptime'),\n      memoryUsage: document.getElementById('memoryUsage'),\n      messageCount: document.getElementById('messageCount'),\n      timestamp: document.getElementById('timestamp'),\n      clearConsole: document.getElementById('clearConsole'),\n      fullscreenToggle: document.getElementById('fullscreenToggle'),\n    };\n\n    // Validate required elements\n    const required = ['consoleOutput', 'consoleInput', 'loadingOverlay'];\n    for (const elementId of required) {\n      if (!this.elements[elementId]) {\n        throw new Error(`Required element not found: ${elementId}`);\n      }\n    }\n  }\n\n  /**\n   * Setup component interactions\n   */\n  setupComponentInteractions() {\n    // Terminal -> Command Handler\n    this.terminal.on('command', (command) => {\n      this.commandHandler.processCommand(command);\n    });\n\n    this.terminal.on('interrupt', () => {\n      this.handleInterrupt();\n    });\n\n    // WebSocket -> Terminal\n    this.wsClient.on('connected', () => {\n      this.updateConnectionStatus(true, false);\n      this.terminal.writeSuccess('Connected to Claude Code server');\n      this.terminal.setPrompt('claude-flow>');\n    });\n\n    this.wsClient.on('disconnected', (info) => {\n      this.updateConnectionStatus(false, false);\n      this.terminal.writeWarning('Disconnected from server');\n      this.terminal.setPrompt('offline>');\n\n      if (info && info.code !== 1000) {\n        this.terminal.writeError(`Connection lost: ${info.reason || 'Unknown reason'}`);\n      }\n    });\n\n    this.wsClient.on('reconnecting', (info) => {\n      this.updateConnectionStatus(false, true);\n      this.terminal.writeInfo(\n        `Reconnecting... (${info.attempt}/${this.wsClient.maxReconnectAttempts})`,\n      );\n    });\n\n    this.wsClient.on('error', (error) => {\n      this.terminal.writeError(`WebSocket error: ${error.message || 'Unknown error'}`);\n    });\n\n    this.wsClient.on('message_received', (message) => {\n      this.messageCount++;\n      this.handleIncomingMessage(message);\n    });\n\n    this.wsClient.on('notification', (notification) => {\n      this.handleNotification(notification);\n    });\n\n    // Settings -> Application\n    this.settings.on('connect_requested', async (config) => {\n      await this.connect(config.url, config.token);\n    });\n\n    this.settings.on('disconnect_requested', () => {\n      this.disconnect();\n    });\n\n    this.settings.on('max_lines_changed', (maxLines) => {\n      this.terminal.setMaxLines(maxLines);\n    });\n\n    this.settings.on('setting_changed', ({ key, value }) => {\n      this.handleSettingChange(key, value);\n    });\n  }\n\n  /**\n   * Setup UI event handlers\n   */\n  setupUIEventHandlers() {\n    // Clear console button\n    if (this.elements.clearConsole) {\n      this.elements.clearConsole.addEventListener('click', () => {\n        this.terminal.clear();\n      });\n    }\n\n    // Fullscreen toggle\n    if (this.elements.fullscreenToggle) {\n      this.elements.fullscreenToggle.addEventListener('click', () => {\n        this.toggleFullscreen();\n      });\n    }\n\n    // Focus input when clicking on output area\n    if (this.elements.consoleOutput) {\n      this.elements.consoleOutput.addEventListener('click', () => {\n        this.terminal.focus();\n      });\n    }\n\n    // Handle window focus\n    window.addEventListener('focus', () => {\n      this.terminal.focus();\n    });\n\n    // Handle visibility change\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) {\n        this.updateTimestamp();\n      }\n    });\n\n    // Handle page unload\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n  }\n\n  /**\n   * Apply initial settings\n   */\n  applyInitialSettings() {\n    const maxLines = this.settings.get('maxLines');\n    if (maxLines) {\n      this.terminal.setMaxLines(maxLines);\n    }\n\n    // Update connection status in settings\n    this.settings.updateConnectionStatus(this.wsClient.getStatus());\n  }\n\n  /**\n   * Show welcome message\n   */\n  showWelcomeMessage() {\n    this.terminal.showWelcomeMessage();\n    this.terminal.writeInfo('Console ready. Type \"help\" for available commands.');\n\n    const config = this.settings.getConnectionConfig();\n    if (config.url && !config.autoConnect) {\n      this.terminal.writeInfo(`Use \"connect\" to connect to ${config.url}`);\n    }\n  }\n\n  /**\n   * Auto-connect to server\n   */\n  async autoConnect() {\n    const config = this.settings.getConnectionConfig();\n\n    if (config.url) {\n      this.terminal.writeInfo(`Auto-connecting to ${config.url}...`);\n      await this.connect(config.url, config.token);\n    }\n  }\n\n  /**\n   * Connect to server\n   */\n  async connect(url, token = '') {\n    try {\n      this.updateConnectionStatus(false, true);\n      await this.wsClient.connect(url, token);\n      await this.wsClient.initializeSession();\n\n      // Update settings with successful connection\n      this.settings.set('serverUrl', url);\n      if (token) {\n        this.settings.set('authToken', token);\n      }\n    } catch (error) {\n      this.updateConnectionStatus(false, false);\n      this.terminal.writeError(`Connection failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Disconnect from server\n   */\n  disconnect() {\n    this.wsClient.disconnect();\n    this.updateConnectionStatus(false, false);\n  }\n\n  /**\n   * Update connection status in UI\n   */\n  updateConnectionStatus(connected, connecting) {\n    const status = this.wsClient.getStatus();\n\n    // Update status indicator\n    if (this.elements.statusIndicator) {\n      this.elements.statusIndicator.className =\n        'status-indicator ' + (connected ? 'connected' : connecting ? 'connecting' : '');\n    }\n\n    // Update status text\n    if (this.elements.statusText) {\n      this.elements.statusText.textContent = connected\n        ? 'Connected'\n        : connecting\n          ? 'Connecting...'\n          : 'Disconnected';\n    }\n\n    // Update settings panel\n    this.settings.updateConnectionStatus(status);\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  handleIncomingMessage(message) {\n    // Handle streaming output\n    if (message.method === 'output/stream') {\n      this.handleStreamingOutput(message.params);\n    }\n\n    // Handle Claude Flow notifications\n    if (message.method && message.method.startsWith('claude-flow/')) {\n      this.handleClaudeFlowNotification(message);\n    }\n  }\n\n  /**\n   * Handle notifications\n   */\n  handleNotification(notification) {\n    const { method, params } = notification;\n\n    switch (method) {\n      case 'agent/status':\n        this.handleAgentStatus(params);\n        break;\n\n      case 'swarm/update':\n        this.handleSwarmUpdate(params);\n        break;\n\n      case 'memory/update':\n        this.handleMemoryUpdate(params);\n        break;\n\n      case 'log/message':\n        this.handleLogMessage(params);\n        break;\n\n      case 'connection/established':\n        this.handleConnectionEstablished(params);\n        break;\n\n      default:\n        console.log('Unhandled notification:', method, params);\n    }\n  }\n\n  /**\n   * Handle streaming output\n   */\n  handleStreamingOutput(params) {\n    if (params && params.content) {\n      const type = params.type || 'output';\n\n      if (params.streaming) {\n        // Use streaming text effect for long outputs\n        this.terminal.streamText(params.content, 10);\n      } else {\n        this.terminal.write(params.content, type);\n      }\n    }\n  }\n\n  /**\n   * Handle Claude Flow notifications\n   */\n  handleClaudeFlowNotification(message) {\n    const { method, params } = message;\n\n    switch (method) {\n      case 'claude-flow/started':\n        this.terminal.writeSuccess(`Claude Flow started in ${params.mode} mode`);\n        break;\n\n      case 'claude-flow/stopped':\n        this.terminal.writeInfo('Claude Flow stopped');\n        break;\n\n      case 'claude-flow/error':\n        this.terminal.writeError(`Claude Flow error: ${params.message}`);\n        break;\n\n      default:\n        this.terminal.writeInfo(`Claude Flow: ${method} - ${JSON.stringify(params)}`);\n    }\n  }\n\n  /**\n   * Handle agent status updates\n   */\n  handleAgentStatus(params) {\n    if (params.active !== undefined) {\n      this.activeAgents = params.active;\n    }\n\n    if (params.message) {\n      this.terminal.writeInfo(`Agent: ${params.message}`);\n    }\n  }\n\n  /**\n   * Handle swarm updates\n   */\n  handleSwarmUpdate(params) {\n    if (params.message) {\n      this.terminal.writeInfo(`Swarm: ${params.message}`);\n    }\n  }\n\n  /**\n   * Handle memory updates\n   */\n  handleMemoryUpdate(params) {\n    if (params.message) {\n      this.terminal.writeInfo(`Memory: ${params.message}`);\n    }\n  }\n\n  /**\n   * Handle log messages\n   */\n  handleLogMessage(params) {\n    if (params.level && params.message) {\n      const type =\n        params.level === 'error' ? 'error' : params.level === 'warn' ? 'warning' : 'info';\n      this.terminal.write(`[${params.level.toUpperCase()}] ${params.message}`, type);\n    }\n  }\n\n  /**\n   * Handle connection established notification\n   */\n  handleConnectionEstablished(params) {\n    // Log connection details without cluttering the terminal\n    console.log('Connection established:', params);\n    // Optionally show a brief success message\n    // this.terminal.writeSuccess(`Connected to ${params.server} v${params.version}`);\n  }\n\n  /**\n   * Handle interrupt (Ctrl+C)\n   */\n  handleInterrupt() {\n    // Could be used to cancel running commands\n    this.terminal.writeWarning('Interrupt signal sent');\n  }\n\n  /**\n   * Handle setting changes\n   */\n  handleSettingChange(key, value) {\n    switch (key) {\n      case 'theme':\n        document.documentElement.setAttribute('data-theme', value);\n        break;\n\n      case 'fontSize':\n        document.documentElement.style.setProperty('--font-size-base', `${value}px`);\n        break;\n\n      case 'lineHeight':\n        document.documentElement.style.setProperty('--line-height', value);\n        break;\n    }\n  }\n\n  /**\n   * Start status updates\n   */\n  startStatusUpdates() {\n    // Update status every 5 seconds\n    this.statusInterval = setInterval(() => {\n      this.updateStatus();\n    }, 5000);\n\n    // Update timestamp every second\n    this.uptimeInterval = setInterval(() => {\n      this.updateUptime();\n      this.updateTimestamp();\n    }, 1000);\n\n    // Initial update\n    this.updateStatus();\n    this.updateUptime();\n    this.updateTimestamp();\n  }\n\n  /**\n   * Update status bar\n   */\n  updateStatus() {\n    // Update active agents\n    if (this.elements.activeAgents) {\n      this.elements.activeAgents.textContent = `Agents: ${this.activeAgents}`;\n    }\n\n    // Update message count\n    if (this.elements.messageCount) {\n      this.elements.messageCount.textContent = `Messages: ${this.messageCount}`;\n    }\n\n    // Update memory usage (if available)\n    if (this.elements.memoryUsage && performance.memory) {\n      const used = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);\n      this.elements.memoryUsage.textContent = `Memory: ${used}MB`;\n    }\n  }\n\n  /**\n   * Update uptime\n   */\n  updateUptime() {\n    if (this.elements.uptime) {\n      const uptime = Date.now() - this.startTime;\n      const hours = Math.floor(uptime / (1000 * 60 * 60));\n      const minutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((uptime % (1000 * 60)) / 1000);\n\n      this.elements.uptime.textContent = `Uptime: ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n  }\n\n  /**\n   * Update timestamp\n   */\n  updateTimestamp() {\n    if (this.elements.timestamp) {\n      this.elements.timestamp.textContent = new Date().toLocaleTimeString();\n    }\n  }\n\n  /**\n   * Toggle fullscreen mode\n   */\n  toggleFullscreen() {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen().catch((err) => {\n        console.error('Error attempting to enable fullscreen:', err);\n      });\n    } else {\n      document.exitFullscreen();\n    }\n  }\n\n  /**\n   * Show loading overlay\n   */\n  showLoading(message = 'Loading...') {\n    if (this.elements.loadingOverlay) {\n      const loadingText = this.elements.loadingOverlay.querySelector('.loading-text');\n      if (loadingText) {\n        loadingText.textContent = message;\n      }\n      this.elements.loadingOverlay.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Hide loading overlay\n   */\n  hideLoading() {\n    if (this.elements.loadingOverlay) {\n      this.elements.loadingOverlay.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Show error message\n   */\n  showError(message) {\n    this.hideLoading();\n\n    if (this.terminal) {\n      this.terminal.writeError(message);\n    } else {\n      // Fallback if terminal isn't initialized\n      console.error(message);\n      alert(message);\n    }\n  }\n\n  /**\n   * Setup global event listeners\n   */\n  setupEventListeners() {\n    // Handle unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      console.error('Unhandled promise rejection:', event.reason);\n      if (this.terminal) {\n        this.terminal.writeError(`Unhandled error: ${event.reason.message || event.reason}`);\n      }\n    });\n\n    // Handle errors\n    window.addEventListener('error', (event) => {\n      console.error('Global error:', event.error);\n      if (this.terminal) {\n        this.terminal.writeError(`Application error: ${event.error.message || event.error}`);\n      }\n    });\n  }\n\n  /**\n   * Cleanup on shutdown\n   */\n  cleanup() {\n    // Clear intervals\n    if (this.statusInterval) {\n      clearInterval(this.statusInterval);\n    }\n\n    if (this.uptimeInterval) {\n      clearInterval(this.uptimeInterval);\n    }\n\n    // Disconnect WebSocket\n    if (this.wsClient) {\n      this.wsClient.disconnect();\n    }\n  }\n\n  /**\n   * Get console statistics\n   */\n  getStats() {\n    return {\n      initialized: this.isInitialized,\n      uptime: Date.now() - this.startTime,\n      messageCount: this.messageCount,\n      activeAgents: this.activeAgents,\n      connection: this.wsClient.getStatus(),\n      terminal: this.terminal ? this.terminal.getStats() : null,\n    };\n  }\n}\n\n// Initialize the console when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const console = new ClaudeCodeConsole();\n\n  // Make console globally available for debugging\n  window.claudeConsole = console;\n\n  // Initialize the application\n  await console.init();\n});\n\n// Export for module usage\nexport { ClaudeCodeConsole };\n"],"names":["WebSocketClient","TerminalEmulator","CommandHandler","SettingsManager","ClaudeCodeConsole","wsClient","terminal","commandHandler","settings","isInitialized","startTime","Date","now","messageCount","activeAgents","elements","statusInterval","uptimeInterval","setupEventListeners","init","showLoading","getDOMElements","consoleOutput","consoleInput","setupComponentInteractions","setupUIEventHandlers","applyInitialSettings","startStatusUpdates","hideLoading","showWelcomeMessage","get","autoConnect","console","log","error","showError","message","document","getElementById","settingsPanel","loadingOverlay","connectionStatus","statusIndicator","statusText","currentMode","uptime","memoryUsage","timestamp","clearConsole","fullscreenToggle","required","elementId","Error","on","command","processCommand","handleInterrupt","updateConnectionStatus","writeSuccess","setPrompt","info","writeWarning","code","writeError","reason","writeInfo","attempt","maxReconnectAttempts","handleIncomingMessage","notification","handleNotification","config","connect","url","token","disconnect","maxLines","setMaxLines","key","value","handleSettingChange","addEventListener","clear","toggleFullscreen","focus","window","hidden","updateTimestamp","cleanup","getStatus","getConnectionConfig","initializeSession","set","connected","connecting","status","className","textContent","method","handleStreamingOutput","params","startsWith","handleClaudeFlowNotification","handleAgentStatus","handleSwarmUpdate","handleMemoryUpdate","handleLogMessage","handleConnectionEstablished","content","type","streaming","streamText","write","mode","JSON","stringify","active","undefined","level","toUpperCase","documentElement","setAttribute","style","setProperty","setInterval","updateStatus","updateUptime","performance","memory","used","Math","round","usedJSHeapSize","hours","floor","minutes","seconds","toString","padStart","toLocaleTimeString","fullscreenElement","requestFullscreen","catch","err","exitFullscreen","loadingText","querySelector","classList","remove","add","alert","event","clearInterval","getStats","initialized","connection","claudeConsole"],"mappings":"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"}