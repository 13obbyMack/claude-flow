{"version":3,"sources":["../../../../../src/ui/console/js/swarm-integration.js"],"sourcesContent":["/**\n * SwarmIntegration - Integrates swarm visualizer with existing console\n * Adds swarm monitoring commands and UI elements to the Claude Flow console\n */\n\nimport { SwarmVisualizer } from './swarm-visualizer.js';\nimport { RealTimeDashboard } from './real-time-dashboard.js';\nimport ComponentLibrary from '../web-ui/components/ComponentLibrary.js';\n\nexport class SwarmIntegration {\n  constructor(consoleInstance) {\n    this.console = consoleInstance;\n    this.components = new ComponentLibrary();\n    this.swarmVisualizer = null;\n    this.dashboard = null;\n    this.isSwarmMode = false;\n    \n    this.init();\n  }\n\n  /**\n   * Initialize swarm integration\n   */\n  init() {\n    this.components.initialize();\n    this.addSwarmCommands();\n    this.addSwarmUI();\n    this.setupSwarmEventHandlers();\n    console.log('🔗 Swarm Integration initialized');\n  }\n\n  /**\n   * Add swarm-specific commands to the console\n   */\n  addSwarmCommands() {\n    const swarmCommands = {\n      'swarm': {\n        description: 'Enter swarm visualization mode',\n        handler: () => this.enterSwarmMode(),\n        usage: 'swarm'\n      },\n      'swarm-status': {\n        description: 'Show current swarm status',\n        handler: () => this.showSwarmStatus(),\n        usage: 'swarm-status'\n      },\n      'swarm-monitor': {\n        description: 'Start real-time swarm monitoring',\n        handler: (args) => this.startSwarmMonitoring(args),\n        usage: 'swarm-monitor [topology]'\n      },\n      'swarm-stop': {\n        description: 'Stop swarm monitoring',\n        handler: () => this.stopSwarmMonitoring(),\n        usage: 'swarm-stop'\n      },\n      'dashboard': {\n        description: 'Open real-time dashboard',\n        handler: () => this.openDashboard(),\n        usage: 'dashboard'\n      },\n      'agents': {\n        description: 'List active agents',\n        handler: () => this.listAgents(),\n        usage: 'agents'\n      },\n      'topology': {\n        description: 'Change swarm topology',\n        handler: (args) => this.changeTopology(args),\n        usage: 'topology [mesh|hierarchical|ring|star]'\n      }\n    };\n\n    // Register commands with the console's command handler\n    if (this.console.commandHandler) {\n      Object.entries(swarmCommands).forEach(([command, config]) => {\n        this.console.commandHandler.registerCommand(command, config);\n      });\n    }\n  }\n\n  /**\n   * Add swarm UI elements to the console\n   */\n  addSwarmUI() {\n    // Add swarm mode toggle to header\n    const headerRight = document.querySelector('.header-right');\n    if (headerRight) {\n      const swarmToggle = this.components.createActionButton({\n        type: 'secondary',\n        text: 'Swarm Mode',\n        icon: '🌊',\n        onclick: () => this.toggleSwarmMode()\n      });\n      \n      headerRight.insertBefore(swarmToggle.element, headerRight.firstChild);\n      this.swarmToggleButton = swarmToggle;\n    }\n\n    // Add swarm status to status bar\n    const statusLeft = document.querySelector('.status-left');\n    if (statusLeft) {\n      const swarmStatus = document.createElement('span');\n      swarmStatus.className = 'status-item';\n      swarmStatus.id = 'swarm-status';\n      swarmStatus.textContent = 'Swarm: Inactive';\n      statusLeft.appendChild(swarmStatus);\n      this.swarmStatusElement = swarmStatus;\n    }\n  }\n\n  /**\n   * Setup event handlers for swarm integration\n   */\n  setupSwarmEventHandlers() {\n    // Listen for swarm-related WebSocket messages\n    if (this.console.wsClient) {\n      this.console.wsClient.on('swarm_update', (data) => {\n        this.handleSwarmUpdate(data);\n      });\n\n      this.console.wsClient.on('agent_status', (data) => {\n        this.handleAgentStatus(data);\n      });\n    }\n\n    // Listen for console commands\n    if (this.console.terminal) {\n      this.console.terminal.on('command', (command) => {\n        if (command.startsWith('swarm')) {\n          this.handleSwarmCommand(command);\n        }\n      });\n    }\n  }\n\n  /**\n   * Enter swarm visualization mode\n   */\n  enterSwarmMode() {\n    if (this.isSwarmMode) {\n      this.console.terminal.writeWarning('Already in swarm mode');\n      return;\n    }\n\n    this.isSwarmMode = true;\n    \n    // Create swarm container\n    const swarmContainer = document.createElement('div');\n    swarmContainer.id = 'swarm-visualization-container';\n    swarmContainer.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100vw;\n      height: 100vh;\n      background: rgba(0, 0, 0, 0.95);\n      z-index: 10000;\n      display: flex;\n      flex-direction: column;\n    `;\n\n    // Create close button\n    const closeButton = this.components.createActionButton({\n      type: 'secondary',\n      text: 'Exit Swarm Mode',\n      icon: '❌',\n      onclick: () => this.exitSwarmMode()\n    });\n\n    closeButton.element.style.cssText = `\n      position: absolute;\n      top: 20px;\n      right: 20px;\n      z-index: 10001;\n    `;\n\n    swarmContainer.appendChild(closeButton.element);\n\n    // Create swarm visualizer\n    const visualizerContainer = document.createElement('div');\n    visualizerContainer.style.cssText = `\n      flex: 1;\n      padding: 80px 20px 20px 20px;\n      overflow: auto;\n    `;\n\n    this.swarmVisualizer = new SwarmVisualizer(visualizerContainer, this.components);\n    swarmContainer.appendChild(visualizerContainer);\n\n    document.body.appendChild(swarmContainer);\n    this.swarmContainer = swarmContainer;\n\n    // Update UI\n    this.updateSwarmStatus('Active');\n    this.swarmToggleButton.setText('Exit Swarm');\n    \n    this.console.terminal.writeSuccess('Entered swarm visualization mode');\n    this.console.terminal.writeInfo('Use \"swarm-monitor\" to start real-time monitoring');\n  }\n\n  /**\n   * Exit swarm visualization mode\n   */\n  exitSwarmMode() {\n    if (!this.isSwarmMode) return;\n\n    this.isSwarmMode = false;\n\n    // Clean up swarm visualizer\n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.destroy();\n      this.swarmVisualizer = null;\n    }\n\n    // Remove swarm container\n    if (this.swarmContainer) {\n      this.swarmContainer.remove();\n      this.swarmContainer = null;\n    }\n\n    // Update UI\n    this.updateSwarmStatus('Inactive');\n    this.swarmToggleButton.setText('Swarm Mode');\n\n    this.console.terminal.writeInfo('Exited swarm visualization mode');\n  }\n\n  /**\n   * Toggle swarm mode\n   */\n  toggleSwarmMode() {\n    if (this.isSwarmMode) {\n      this.exitSwarmMode();\n    } else {\n      this.enterSwarmMode();\n    }\n  }\n\n  /**\n   * Show swarm status\n   */\n  showSwarmStatus() {\n    this.console.terminal.writeInfo('📊 Swarm Status:');\n    \n    // Mock status data - would normally fetch from API\n    const status = {\n      active: this.isSwarmMode,\n      agents: Math.floor(Math.random() * 8) + 2,\n      topology: 'mesh',\n      uptime: '2h 34m',\n      tasksCompleted: Math.floor(Math.random() * 100) + 50,\n      averageResponseTime: Math.floor(Math.random() * 500) + 200\n    };\n\n    this.console.terminal.write(`  Mode: ${status.active ? 'Active' : 'Inactive'}`, 'info');\n    this.console.terminal.write(`  Agents: ${status.agents}`, 'info');\n    this.console.terminal.write(`  Topology: ${status.topology}`, 'info');\n    this.console.terminal.write(`  Uptime: ${status.uptime}`, 'info');\n    this.console.terminal.write(`  Tasks Completed: ${status.tasksCompleted}`, 'info');\n    this.console.terminal.write(`  Avg Response Time: ${status.averageResponseTime}ms`, 'info');\n  }\n\n  /**\n   * Start swarm monitoring\n   */\n  startSwarmMonitoring(args) {\n    if (!this.swarmVisualizer) {\n      this.console.terminal.writeError('Not in swarm mode. Use \"swarm\" command first.');\n      return;\n    }\n\n    const topology = args && args[0] ? args[0] : 'mesh';\n    \n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.topology = topology;\n      this.swarmVisualizer.startMonitoring();\n    }\n\n    this.console.terminal.writeSuccess(`Started swarm monitoring with ${topology} topology`);\n  }\n\n  /**\n   * Stop swarm monitoring\n   */\n  stopSwarmMonitoring() {\n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.stopMonitoring();\n      this.console.terminal.writeInfo('Stopped swarm monitoring');\n    } else {\n      this.console.terminal.writeWarning('Swarm monitoring not active');\n    }\n  }\n\n  /**\n   * Open dashboard\n   */\n  openDashboard() {\n    if (this.dashboard) {\n      this.console.terminal.writeWarning('Dashboard already open');\n      return;\n    }\n\n    // Create dashboard container\n    const dashboardContainer = document.createElement('div');\n    dashboardContainer.id = 'dashboard-container';\n    dashboardContainer.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100vw;\n      height: 100vh;\n      background: rgba(0, 0, 0, 0.98);\n      z-index: 20000;\n    `;\n\n    // Create close button\n    const closeButton = this.components.createActionButton({\n      type: 'secondary',\n      text: 'Close Dashboard',\n      icon: '❌',\n      onclick: () => this.closeDashboard()\n    });\n\n    closeButton.element.style.cssText = `\n      position: absolute;\n      top: 20px;\n      right: 20px;\n      z-index: 20001;\n    `;\n\n    dashboardContainer.appendChild(closeButton.element);\n\n    // Create dashboard\n    this.dashboard = new RealTimeDashboard(dashboardContainer, this.components);\n    document.body.appendChild(dashboardContainer);\n    this.dashboardContainer = dashboardContainer;\n\n    this.console.terminal.writeSuccess('Opened real-time dashboard');\n  }\n\n  /**\n   * Close dashboard\n   */\n  closeDashboard() {\n    if (this.dashboard) {\n      this.dashboard.destroy();\n      this.dashboard = null;\n    }\n\n    if (this.dashboardContainer) {\n      this.dashboardContainer.remove();\n      this.dashboardContainer = null;\n    }\n\n    this.console.terminal.writeInfo('Closed dashboard');\n  }\n\n  /**\n   * List agents\n   */\n  listAgents() {\n    this.console.terminal.writeInfo('🤖 Active Agents:');\n    \n    // Mock agent data\n    const agents = [\n      { id: 'coder_01', type: 'coder', status: 'active', task: 'Implementing API endpoints' },\n      { id: 'researcher_02', type: 'researcher', status: 'busy', task: 'Analyzing data patterns' },\n      { id: 'reviewer_03', type: 'reviewer', status: 'idle', task: null },\n      { id: 'tester_04', type: 'tester', status: 'active', task: 'Running test suite' }\n    ];\n\n    agents.forEach(agent => {\n      const statusColor = agent.status === 'active' ? 'success' : \n                         agent.status === 'busy' ? 'warning' : 'info';\n      const taskText = agent.task ? ` | Task: ${agent.task}` : ' | No active task';\n      \n      this.console.terminal.write(\n        `  ${agent.id} (${agent.type}) - ${agent.status}${taskText}`, \n        statusColor\n      );\n    });\n  }\n\n  /**\n   * Change topology\n   */\n  changeTopology(args) {\n    if (!args || args.length === 0) {\n      this.console.terminal.writeError('Usage: topology [mesh|hierarchical|ring|star]');\n      return;\n    }\n\n    const topology = args[0];\n    const validTopologies = ['mesh', 'hierarchical', 'ring', 'star'];\n    \n    if (!validTopologies.includes(topology)) {\n      this.console.terminal.writeError(`Invalid topology. Valid options: ${validTopologies.join(', ')}`);\n      return;\n    }\n\n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.topology = topology;\n      this.swarmVisualizer.redrawTopology();\n      this.console.terminal.writeSuccess(`Changed topology to ${topology}`);\n    } else {\n      this.console.terminal.writeWarning('Swarm visualizer not active');\n    }\n  }\n\n  /**\n   * Handle swarm update messages\n   */\n  handleSwarmUpdate(data) {\n    if (this.swarmVisualizer) {\n      this.swarmVisualizer.swarmData = data;\n      this.swarmVisualizer.processSwarmData();\n      this.swarmVisualizer.updateStats();\n    }\n\n    if (this.dashboard) {\n      this.dashboard.handleWebSocketMessage({\n        type: 'swarm_update',\n        payload: data\n      });\n    }\n  }\n\n  /**\n   * Handle agent status messages\n   */\n  handleAgentStatus(data) {\n    if (data.active !== undefined) {\n      this.updateSwarmStatus(`${data.active} agents active`);\n    }\n  }\n\n  /**\n   * Update swarm status in UI\n   */\n  updateSwarmStatus(status) {\n    if (this.swarmStatusElement) {\n      this.swarmStatusElement.textContent = `Swarm: ${status}`;\n    }\n  }\n\n  /**\n   * Handle swarm command\n   */\n  handleSwarmCommand(command) {\n    // Commands are already handled by the registered handlers\n    // This could be used for additional processing if needed\n    console.log('Swarm command processed:', command);\n  }\n\n  /**\n   * Get integration status\n   */\n  getStatus() {\n    return {\n      swarmMode: this.isSwarmMode,\n      visualizerActive: this.swarmVisualizer?.isActive || false,\n      dashboardOpen: !!this.dashboard,\n      componentsLoaded: this.components.isInitialized\n    };\n  }\n\n  /**\n   * Cleanup integration\n   */\n  destroy() {\n    this.exitSwarmMode();\n    this.closeDashboard();\n    \n    if (this.swarmToggleButton) {\n      this.swarmToggleButton.element.remove();\n    }\n    \n    if (this.swarmStatusElement) {\n      this.swarmStatusElement.remove();\n    }\n  }\n}\n\nexport default SwarmIntegration;"],"names":["SwarmVisualizer","RealTimeDashboard","ComponentLibrary","SwarmIntegration","consoleInstance","console","components","swarmVisualizer","dashboard","isSwarmMode","init","initialize","addSwarmCommands","addSwarmUI","setupSwarmEventHandlers","log","swarmCommands","description","handler","enterSwarmMode","usage","showSwarmStatus","args","startSwarmMonitoring","stopSwarmMonitoring","openDashboard","listAgents","changeTopology","commandHandler","Object","entries","forEach","command","config","registerCommand","headerRight","document","querySelector","swarmToggle","createActionButton","type","text","icon","onclick","toggleSwarmMode","insertBefore","element","firstChild","swarmToggleButton","statusLeft","swarmStatus","createElement","className","id","textContent","appendChild","swarmStatusElement","wsClient","on","data","handleSwarmUpdate","handleAgentStatus","terminal","startsWith","handleSwarmCommand","writeWarning","swarmContainer","style","cssText","closeButton","exitSwarmMode","visualizerContainer","body","updateSwarmStatus","setText","writeSuccess","writeInfo","destroy","remove","status","active","agents","Math","floor","random","topology","uptime","tasksCompleted","averageResponseTime","write","writeError","startMonitoring","stopMonitoring","dashboardContainer","closeDashboard","task","agent","statusColor","taskText","length","validTopologies","includes","join","redrawTopology","swarmData","processSwarmData","updateStats","handleWebSocketMessage","payload","undefined","getStatus","swarmMode","visualizerActive","isActive","dashboardOpen","componentsLoaded","isInitialized"],"mappings":"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"}