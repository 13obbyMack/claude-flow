{"version":3,"sources":["../../../../../src/ui/console/js/analysis-tools.js"],"sourcesContent":["/**\n * Analysis & Monitoring Tools for Claude Flow Web UI\n * Agent 2 - Analysis & Monitoring Tools Developer\n *\n * Features:\n * - 13 analysis and monitoring tools\n * - Real-time dashboards and visualizations\n * - WebSocket integration for live data\n * - Export functionality for reports\n * - 4 main tabs: Metrics, Reports, Analysis, Health\n */\n\nclass AnalysisTools {\n  constructor() {\n    this.ws = null;\n    this.charts = {};\n    this.currentTab = 'metrics';\n    this.isConnected = false;\n    this.metricsCache = new Map();\n    this.updateInterval = null;\n    this.init();\n  }\n\n  init() {\n    this.setupWebSocket();\n    this.setupEventListeners();\n    this.initializeCharts();\n    this.startRealTimeUpdates();\n  }\n\n  setupWebSocket() {\n    try {\n      this.ws = new WebSocket('ws://localhost:3000/analysis');\n\n      this.ws.onopen = () => {\n        this.isConnected = true;\n        console.log('Analysis WebSocket connected');\n        this.updateConnectionStatus('connected');\n      };\n\n      this.ws.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        this.handleWebSocketData(data);\n      };\n\n      this.ws.onclose = () => {\n        this.isConnected = false;\n        console.log('Analysis WebSocket disconnected');\n        this.updateConnectionStatus('disconnected');\n        setTimeout(() => this.setupWebSocket(), 5000);\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('Analysis WebSocket error:', error);\n        this.updateConnectionStatus('error');\n      };\n    } catch (error) {\n      console.error('Failed to setup WebSocket:', error);\n      this.updateConnectionStatus('error');\n    }\n  }\n\n  setupEventListeners() {\n    // Tab switching\n    document.querySelectorAll('.analysis-tab').forEach((tab) => {\n      tab.addEventListener('click', (e) => {\n        this.switchTab(e.target.dataset.tab);\n      });\n    });\n\n    // Export buttons\n    document.querySelectorAll('.export-btn').forEach((btn) => {\n      btn.addEventListener('click', (e) => {\n        const format = e.target.dataset.format;\n        const type = e.target.dataset.type;\n        this.exportData(type, format);\n      });\n    });\n\n    // Tool buttons\n    document.querySelectorAll('.tool-btn').forEach((btn) => {\n      btn.addEventListener('click', (e) => {\n        const tool = e.target.dataset.tool;\n        this.executeTool(tool);\n      });\n    });\n\n    // Refresh buttons\n    document.querySelectorAll('.refresh-btn').forEach((btn) => {\n      btn.addEventListener('click', (e) => {\n        const section = e.target.dataset.section;\n        this.refreshSection(section);\n      });\n    });\n  }\n\n  initializeCharts() {\n    // Performance metrics chart\n    this.charts.performance = new Chart(document.getElementById('performance-chart'), {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Response Time (ms)',\n            data: [],\n            borderColor: '#3b82f6',\n            backgroundColor: 'rgba(59, 130, 246, 0.1)',\n            tension: 0.4,\n          },\n          {\n            label: 'Throughput (req/s)',\n            data: [],\n            borderColor: '#10b981',\n            backgroundColor: 'rgba(16, 185, 129, 0.1)',\n            tension: 0.4,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n        },\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Time',\n            },\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Value',\n            },\n          },\n        },\n      },\n    });\n\n    // Token usage chart\n    this.charts.tokenUsage = new Chart(document.getElementById('token-usage-chart'), {\n      type: 'doughnut',\n      data: {\n        labels: ['Input Tokens', 'Output Tokens', 'Cached Tokens'],\n        datasets: [\n          {\n            data: [0, 0, 0],\n            backgroundColor: ['#3b82f6', '#10b981', '#f59e0b'],\n            borderWidth: 2,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'bottom',\n          },\n        },\n      },\n    });\n\n    // System health chart\n    this.charts.systemHealth = new Chart(document.getElementById('system-health-chart'), {\n      type: 'radar',\n      data: {\n        labels: ['CPU', 'Memory', 'Disk', 'Network', 'API', 'Database'],\n        datasets: [\n          {\n            label: 'Health Score',\n            data: [100, 100, 100, 100, 100, 100],\n            borderColor: '#10b981',\n            backgroundColor: 'rgba(16, 185, 129, 0.2)',\n            pointBackgroundColor: '#10b981',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: '#10b981',\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          r: {\n            beginAtZero: true,\n            max: 100,\n          },\n        },\n      },\n    });\n\n    // Load monitoring chart\n    this.charts.loadMonitor = new Chart(document.getElementById('load-monitor-chart'), {\n      type: 'bar',\n      data: {\n        labels: ['1m', '5m', '15m', '30m', '1h', '24h'],\n        datasets: [\n          {\n            label: 'Average Load',\n            data: [0, 0, 0, 0, 0, 0],\n            backgroundColor: 'rgba(59, 130, 246, 0.7)',\n            borderColor: '#3b82f6',\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    });\n  }\n\n  startRealTimeUpdates() {\n    this.updateInterval = setInterval(() => {\n      if (this.isConnected) {\n        this.requestMetricsUpdate();\n      }\n    }, 5000);\n  }\n\n  requestMetricsUpdate() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(\n        JSON.stringify({\n          type: 'request_metrics',\n          timestamp: Date.now(),\n        }),\n      );\n    }\n  }\n\n  handleWebSocketData(data) {\n    switch (data.type) {\n      case 'metrics_update':\n        this.updateMetrics(data.payload);\n        break;\n      case 'alert':\n        this.handleAlert(data.payload);\n        break;\n      case 'health_status':\n        this.updateHealthStatus(data.payload);\n        break;\n      default:\n        console.log('Unknown WebSocket message type:', data.type);\n    }\n  }\n\n  updateMetrics(metrics) {\n    this.metricsCache.set('latest', metrics);\n\n    // Update performance chart\n    if (this.charts.performance && metrics.performance) {\n      const chart = this.charts.performance;\n      const now = new Date().toLocaleTimeString();\n\n      chart.data.labels.push(now);\n      chart.data.datasets[0].data.push(metrics.performance.responseTime);\n      chart.data.datasets[1].data.push(metrics.performance.throughput);\n\n      // Keep only last 20 data points\n      if (chart.data.labels.length > 20) {\n        chart.data.labels.shift();\n        chart.data.datasets[0].data.shift();\n        chart.data.datasets[1].data.shift();\n      }\n\n      chart.update('none');\n    }\n\n    // Update token usage chart\n    if (this.charts.tokenUsage && metrics.tokens) {\n      const chart = this.charts.tokenUsage;\n      chart.data.datasets[0].data = [\n        metrics.tokens.input,\n        metrics.tokens.output,\n        metrics.tokens.cached,\n      ];\n      chart.update('none');\n    }\n\n    // Update system health chart\n    if (this.charts.systemHealth && metrics.health) {\n      const chart = this.charts.systemHealth;\n      chart.data.datasets[0].data = [\n        metrics.health.cpu,\n        metrics.health.memory,\n        metrics.health.disk,\n        metrics.health.network,\n        metrics.health.api,\n        metrics.health.database,\n      ];\n      chart.update('none');\n    }\n\n    // Update load monitor chart\n    if (this.charts.loadMonitor && metrics.load) {\n      const chart = this.charts.loadMonitor;\n      chart.data.datasets[0].data = [\n        metrics.load.oneMin,\n        metrics.load.fiveMin,\n        metrics.load.fifteenMin,\n        metrics.load.thirtyMin,\n        metrics.load.oneHour,\n        metrics.load.twentyFourHour,\n      ];\n      chart.update('none');\n    }\n\n    // Update metric displays\n    this.updateMetricDisplays(metrics);\n  }\n\n  updateMetricDisplays(metrics) {\n    // Performance metrics\n    const perfSection = document.getElementById('performance-metrics');\n    if (perfSection && metrics.performance) {\n      perfSection.innerHTML = `\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Response Time</div>\n                    <div class=\"metric-value\">${metrics.performance.responseTime}ms</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Throughput</div>\n                    <div class=\"metric-value\">${metrics.performance.throughput} req/s</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Error Rate</div>\n                    <div class=\"metric-value\">${metrics.performance.errorRate}%</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Uptime</div>\n                    <div class=\"metric-value\">${metrics.performance.uptime}</div>\n                </div>\n            `;\n    }\n\n    // Token usage metrics\n    const tokenSection = document.getElementById('token-metrics');\n    if (tokenSection && metrics.tokens) {\n      const total = metrics.tokens.input + metrics.tokens.output + metrics.tokens.cached;\n      tokenSection.innerHTML = `\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Total Tokens</div>\n                    <div class=\"metric-value\">${total.toLocaleString()}</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Input Tokens</div>\n                    <div class=\"metric-value\">${metrics.tokens.input.toLocaleString()}</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Output Tokens</div>\n                    <div class=\"metric-value\">${metrics.tokens.output.toLocaleString()}</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-label\">Cache Hit Rate</div>\n                    <div class=\"metric-value\">${((metrics.tokens.cached / total) * 100).toFixed(1)}%</div>\n                </div>\n            `;\n    }\n\n    // System health status\n    const healthSection = document.getElementById('health-status');\n    if (healthSection && metrics.health) {\n      const overallHealth = Math.round(\n        (metrics.health.cpu +\n          metrics.health.memory +\n          metrics.health.disk +\n          metrics.health.network +\n          metrics.health.api +\n          metrics.health.database) /\n          6,\n      );\n\n      healthSection.innerHTML = `\n                <div class=\"health-overview\">\n                    <div class=\"health-score ${this.getHealthClass(overallHealth)}\">\n                        ${overallHealth}%\n                    </div>\n                    <div class=\"health-label\">Overall Health</div>\n                </div>\n                <div class=\"health-components\">\n                    <div class=\"health-component\">\n                        <span class=\"component-name\">CPU</span>\n                        <span class=\"component-value ${this.getHealthClass(metrics.health.cpu)}\">${metrics.health.cpu}%</span>\n                    </div>\n                    <div class=\"health-component\">\n                        <span class=\"component-name\">Memory</span>\n                        <span class=\"component-value ${this.getHealthClass(metrics.health.memory)}\">${metrics.health.memory}%</span>\n                    </div>\n                    <div class=\"health-component\">\n                        <span class=\"component-name\">Disk</span>\n                        <span class=\"component-value ${this.getHealthClass(metrics.health.disk)}\">${metrics.health.disk}%</span>\n                    </div>\n                    <div class=\"health-component\">\n                        <span class=\"component-name\">Network</span>\n                        <span class=\"component-value ${this.getHealthClass(metrics.health.network)}\">${metrics.health.network}%</span>\n                    </div>\n                    <div class=\"health-component\">\n                        <span class=\"component-name\">API</span>\n                        <span class=\"component-value ${this.getHealthClass(metrics.health.api)}\">${metrics.health.api}%</span>\n                    </div>\n                    <div class=\"health-component\">\n                        <span class=\"component-name\">Database</span>\n                        <span class=\"component-value ${this.getHealthClass(metrics.health.database)}\">${metrics.health.database}%</span>\n                    </div>\n                </div>\n            `;\n    }\n  }\n\n  getHealthClass(score) {\n    if (score >= 90) return 'health-excellent';\n    if (score >= 70) return 'health-good';\n    if (score >= 50) return 'health-warning';\n    return 'health-critical';\n  }\n\n  handleAlert(alert) {\n    const alertsContainer = document.getElementById('alerts-container');\n    if (alertsContainer) {\n      const alertElement = document.createElement('div');\n      alertElement.className = `alert alert-${alert.severity}`;\n      alertElement.innerHTML = `\n                <div class=\"alert-header\">\n                    <span class=\"alert-title\">${alert.title}</span>\n                    <span class=\"alert-timestamp\">${new Date(alert.timestamp).toLocaleTimeString()}</span>\n                </div>\n                <div class=\"alert-message\">${alert.message}</div>\n                <button class=\"alert-dismiss\" onclick=\"this.parentElement.remove()\">×</button>\n            `;\n      alertsContainer.insertBefore(alertElement, alertsContainer.firstChild);\n\n      // Auto-dismiss after 10 seconds for info alerts\n      if (alert.severity === 'info') {\n        setTimeout(() => {\n          if (alertElement.parentElement) {\n            alertElement.remove();\n          }\n        }, 10000);\n      }\n    }\n  }\n\n  switchTab(tabName) {\n    this.currentTab = tabName;\n\n    // Update tab buttons\n    document.querySelectorAll('.analysis-tab').forEach((tab) => {\n      tab.classList.remove('active');\n    });\n    document.querySelector(`[data-tab=\"${tabName}\"]`).classList.add('active');\n\n    // Update content panels\n    document.querySelectorAll('.analysis-panel').forEach((panel) => {\n      panel.classList.remove('active');\n    });\n    document.getElementById(`${tabName}-panel`).classList.add('active');\n\n    // Refresh charts when switching tabs\n    setTimeout(() => {\n      Object.values(this.charts).forEach((chart) => {\n        if (chart && chart.resize) {\n          chart.resize();\n        }\n      });\n    }, 100);\n  }\n\n  // Tool execution methods\n  async executeTool(toolName) {\n    const button = document.querySelector(`[data-tool=\"${toolName}\"]`);\n    if (button) {\n      button.classList.add('loading');\n      button.disabled = true;\n    }\n\n    try {\n      switch (toolName) {\n        case 'performance_report':\n          await this.performanceReport();\n          break;\n        case 'bottleneck_analyze':\n          await this.bottleneckAnalyze();\n          break;\n        case 'token_usage':\n          await this.tokenUsage();\n          break;\n        case 'benchmark_run':\n          await this.benchmarkRun();\n          break;\n        case 'metrics_collect':\n          await this.metricsCollect();\n          break;\n        case 'trend_analysis':\n          await this.trendAnalysis();\n          break;\n        case 'cost_analysis':\n          await this.costAnalysis();\n          break;\n        case 'quality_assess':\n          await this.qualityAssess();\n          break;\n        case 'error_analysis':\n          await this.errorAnalysis();\n          break;\n        case 'usage_stats':\n          await this.usageStats();\n          break;\n        case 'health_check':\n          await this.healthCheck();\n          break;\n        case 'load_monitor':\n          await this.loadMonitor();\n          break;\n        case 'capacity_plan':\n          await this.capacityPlan();\n          break;\n        default:\n          console.warn('Unknown tool:', toolName);\n      }\n    } catch (error) {\n      console.error(`Error executing tool ${toolName}:`, error);\n      this.showError(`Failed to execute ${toolName}: ${error.message}`);\n    } finally {\n      if (button) {\n        button.classList.remove('loading');\n        button.disabled = false;\n      }\n    }\n  }\n\n  // Tool implementations\n  async performanceReport() {\n    try {\n      const report = await this.fetchAnalysisData('/api/analysis/performance-report');\n      this.displayReport('performance-report-output', report);\n      await this.notifyToolCompletion('performance_report');\n    } catch (error) {\n      this.displayError(\n        'performance-report-output',\n        'Unable to fetch performance report. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async bottleneckAnalyze() {\n    try {\n      const analysis = await this.fetchAnalysisData('/api/analysis/bottleneck-analyze');\n      this.displayAnalysis('bottleneck-analysis-output', analysis);\n      await this.notifyToolCompletion('bottleneck_analyze');\n    } catch (error) {\n      this.displayError(\n        'bottleneck-analysis-output',\n        'Unable to fetch bottleneck analysis. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async tokenUsage() {\n    try {\n      const usage = await this.fetchAnalysisData('/api/analysis/token-usage');\n      this.displayUsage('token-usage-output', usage);\n      await this.notifyToolCompletion('token_usage');\n    } catch (error) {\n      this.displayError(\n        'token-usage-output',\n        'Unable to fetch token usage data. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async benchmarkRun() {\n    try {\n      const benchmark = await this.fetchAnalysisData('/api/analysis/benchmark-run');\n      this.displayBenchmark('benchmark-output', benchmark);\n      await this.notifyToolCompletion('benchmark_run');\n    } catch (error) {\n      this.displayError(\n        'benchmark-output',\n        'Unable to run benchmark. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async metricsCollect() {\n    try {\n      const metrics = await this.fetchAnalysisData('/api/analysis/metrics-collect');\n      this.displayMetrics('metrics-output', metrics);\n      await this.notifyToolCompletion('metrics_collect');\n    } catch (error) {\n      this.displayError(\n        'metrics-output',\n        'Unable to collect metrics. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async trendAnalysis() {\n    try {\n      const trends = await this.fetchAnalysisData('/api/analysis/trend-analysis');\n      this.displayTrends('trends-output', trends);\n      await this.notifyToolCompletion('trend_analysis');\n    } catch (error) {\n      this.displayError(\n        'trends-output',\n        'Unable to fetch trend analysis. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async costAnalysis() {\n    try {\n      const costs = await this.fetchAnalysisData('/api/analysis/cost-analysis');\n      this.displayCosts('costs-output', costs);\n      await this.notifyToolCompletion('cost_analysis');\n    } catch (error) {\n      this.displayError(\n        'costs-output',\n        'Unable to fetch cost analysis. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async qualityAssess() {\n    try {\n      const quality = await this.fetchAnalysisData('/api/analysis/quality-assess');\n      this.displayQuality('quality-output', quality);\n      await this.notifyToolCompletion('quality_assess');\n    } catch (error) {\n      this.displayError(\n        'quality-output',\n        'Unable to assess quality. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async errorAnalysis() {\n    try {\n      const errors = await this.fetchAnalysisData('/api/analysis/error-analysis');\n      this.displayErrors('errors-output', errors);\n      await this.notifyToolCompletion('error_analysis');\n    } catch (error) {\n      this.displayError(\n        'errors-output',\n        'Unable to fetch error analysis. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async usageStats() {\n    try {\n      const stats = await this.fetchAnalysisData('/api/analysis/usage-stats');\n      this.displayStats('stats-output', stats);\n      await this.notifyToolCompletion('usage_stats');\n    } catch (error) {\n      this.displayError(\n        'stats-output',\n        'Unable to fetch usage statistics. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async healthCheck() {\n    try {\n      const health = await this.fetchAnalysisData('/api/analysis/health-check');\n      this.displayHealth('health-output', health);\n      await this.notifyToolCompletion('health_check');\n    } catch (error) {\n      this.displayError(\n        'health-output',\n        'Unable to perform health check. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async loadMonitor() {\n    try {\n      const load = await this.fetchAnalysisData('/api/analysis/load-monitor');\n      this.displayLoad('load-output', load);\n      await this.notifyToolCompletion('load_monitor');\n    } catch (error) {\n      this.displayError(\n        'load-output',\n        'Unable to monitor load. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async capacityPlan() {\n    try {\n      const capacity = await this.fetchAnalysisData('/api/analysis/capacity-plan');\n      this.displayCapacity('capacity-output', capacity);\n      await this.notifyToolCompletion('capacity_plan');\n    } catch (error) {\n      this.displayError(\n        'capacity-output',\n        'Unable to fetch capacity plan. Please ensure the analysis service is running.',\n      );\n    }\n  }\n\n  async fetchAnalysisData(endpoint) {\n    try {\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Fetch error:', error);\n      // Show error message instead of falling back to mock data\n      this.showError(`Failed to fetch data from ${endpoint}: ${error.message}`);\n      throw error; // Re-throw to let calling functions handle the error\n    }\n  }\n\n  getMockData(endpoint) {\n    const mockData = {\n      '/api/analysis/performance-report': {\n        summary: 'System performance is within acceptable ranges',\n        metrics: {\n          averageResponseTime: 245,\n          throughput: 1250,\n          errorRate: 0.02,\n          uptime: '99.8%',\n        },\n        recommendations: [\n          'Consider caching frequently accessed data',\n          'Optimize database queries for better performance',\n          'Monitor memory usage during peak hours',\n        ],\n      },\n      '/api/analysis/bottleneck-analyze': {\n        bottlenecks: [\n          { component: 'Database', severity: 'medium', impact: 'Response time +15%' },\n          { component: 'API Gateway', severity: 'low', impact: 'Throughput -5%' },\n        ],\n        recommendations: [\n          'Add database read replicas',\n          'Implement connection pooling',\n          'Optimize slow queries',\n        ],\n      },\n      '/api/analysis/token-usage': {\n        totalTokens: 2450000,\n        inputTokens: 1200000,\n        outputTokens: 950000,\n        cachedTokens: 300000,\n        cost: 245.5,\n        efficiency: 85.2,\n      },\n    };\n    return mockData[endpoint] || { message: 'No data available' };\n  }\n\n  displayReport(containerId, report) {\n    const container = document.getElementById(containerId);\n    if (!container) return;\n\n    container.innerHTML = `\n            <div class=\"report-summary\">\n                <h3>Performance Report</h3>\n                <p>${report.summary}</p>\n            </div>\n            <div class=\"report-metrics\">\n                <div class=\"metric-grid\">\n                    <div class=\"metric-item\">\n                        <label>Average Response Time</label>\n                        <span>${report.metrics.averageResponseTime}ms</span>\n                    </div>\n                    <div class=\"metric-item\">\n                        <label>Throughput</label>\n                        <span>${report.metrics.throughput} req/s</span>\n                    </div>\n                    <div class=\"metric-item\">\n                        <label>Error Rate</label>\n                        <span>${(report.metrics.errorRate * 100).toFixed(2)}%</span>\n                    </div>\n                    <div class=\"metric-item\">\n                        <label>Uptime</label>\n                        <span>${report.metrics.uptime}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"report-recommendations\">\n                <h4>Recommendations</h4>\n                <ul>\n                    ${report.recommendations.map((rec) => `<li>${rec}</li>`).join('')}\n                </ul>\n            </div>\n        `;\n  }\n\n  displayAnalysis(containerId, analysis) {\n    const container = document.getElementById(containerId);\n    if (!container) return;\n\n    container.innerHTML = `\n            <div class=\"analysis-results\">\n                <h3>Bottleneck Analysis</h3>\n                <div class=\"bottleneck-list\">\n                    ${analysis.bottlenecks\n                      .map(\n                        (bottleneck) => `\n                        <div class=\"bottleneck-item severity-${bottleneck.severity}\">\n                            <div class=\"bottleneck-component\">${bottleneck.component}</div>\n                            <div class=\"bottleneck-severity\">${bottleneck.severity}</div>\n                            <div class=\"bottleneck-impact\">${bottleneck.impact}</div>\n                        </div>\n                    `,\n                      )\n                      .join('')}\n                </div>\n                <div class=\"analysis-recommendations\">\n                    <h4>Recommendations</h4>\n                    <ul>\n                        ${analysis.recommendations.map((rec) => `<li>${rec}</li>`).join('')}\n                    </ul>\n                </div>\n            </div>\n        `;\n  }\n\n  displayUsage(containerId, usage) {\n    const container = document.getElementById(containerId);\n    if (!container) return;\n\n    container.innerHTML = `\n            <div class=\"usage-overview\">\n                <h3>Token Usage Analysis</h3>\n                <div class=\"usage-stats\">\n                    <div class=\"usage-stat\">\n                        <label>Total Tokens</label>\n                        <span>${usage.totalTokens.toLocaleString()}</span>\n                    </div>\n                    <div class=\"usage-stat\">\n                        <label>Input Tokens</label>\n                        <span>${usage.inputTokens.toLocaleString()}</span>\n                    </div>\n                    <div class=\"usage-stat\">\n                        <label>Output Tokens</label>\n                        <span>${usage.outputTokens.toLocaleString()}</span>\n                    </div>\n                    <div class=\"usage-stat\">\n                        <label>Cached Tokens</label>\n                        <span>${usage.cachedTokens.toLocaleString()}</span>\n                    </div>\n                    <div class=\"usage-stat\">\n                        <label>Total Cost</label>\n                        <span>$${usage.cost.toFixed(2)}</span>\n                    </div>\n                    <div class=\"usage-stat\">\n                        <label>Efficiency</label>\n                        <span>${usage.efficiency.toFixed(1)}%</span>\n                    </div>\n                </div>\n            </div>\n        `;\n  }\n\n  exportData(type, format) {\n    const data = this.metricsCache.get('latest') || {};\n    const timestamp = new Date().toISOString().split('T')[0];\n    const filename = `${type}_${timestamp}.${format}`;\n\n    if (format === 'json') {\n      this.downloadJSON(data, filename);\n    } else if (format === 'csv') {\n      this.downloadCSV(data, filename);\n    }\n  }\n\n  downloadJSON(data, filename) {\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  downloadCSV(data, filename) {\n    const csv = this.jsonToCSV(data);\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  jsonToCSV(json) {\n    const flatten = (obj, prefix = '') => {\n      const flattened = {};\n      for (const key in obj) {\n        if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n          Object.assign(flattened, flatten(obj[key], prefix + key + '.'));\n        } else {\n          // Convert arrays to JSON strings for CSV\n          flattened[prefix + key] = Array.isArray(obj[key]) ? JSON.stringify(obj[key]) : obj[key];\n        }\n      }\n      return flattened;\n    };\n\n    const flattened = flatten(json);\n    const headers = Object.keys(flattened);\n    const valueRow = headers\n      .map((header) => {\n        const value = flattened[header];\n        if (value === null || value === undefined) {\n          return '';\n        }\n        let strValue = String(value);\n        // Escape CSV values that contain commas, quotes, or newlines\n        if (strValue.includes(',') || strValue.includes('\"') || strValue.includes('\\n')) {\n          strValue = '\"' + strValue.replace(/\"/g, '\"\"') + '\"';\n        }\n        return strValue;\n      })\n      .join(',');\n\n    return [headers.join(','), valueRow].join('\\n');\n  }\n\n  refreshSection(section) {\n    switch (section) {\n      case 'metrics':\n        this.requestMetricsUpdate();\n        break;\n      case 'charts':\n        Object.values(this.charts).forEach((chart) => {\n          if (chart && chart.update) {\n            chart.update();\n          }\n        });\n        break;\n      case 'alerts':\n        document.getElementById('alerts-container').innerHTML = '';\n        break;\n      default:\n        console.warn('Unknown section:', section);\n    }\n  }\n\n  updateConnectionStatus(status) {\n    const statusElement = document.getElementById('connection-status');\n    if (statusElement) {\n      statusElement.className = `connection-status ${status}`;\n      statusElement.textContent = status.charAt(0).toUpperCase() + status.slice(1);\n    }\n  }\n\n  showError(message) {\n    const errorElement = document.createElement('div');\n    errorElement.className = 'error-message';\n    errorElement.textContent = message;\n    document.body.appendChild(errorElement);\n\n    setTimeout(() => {\n      errorElement.remove();\n    }, 5000);\n  }\n\n  displayError(containerId, message) {\n    const container = document.getElementById(containerId);\n    if (!container) return;\n\n    container.innerHTML = `\n            <div class=\"error-container\">\n                <div class=\"error-icon\">❌</div>\n                <div class=\"error-message\">\n                    <h4>Error</h4>\n                    <p>${message}</p>\n                </div>\n                <div class=\"error-actions\">\n                    <button class=\"retry-btn\" onclick=\"location.reload()\">Retry</button>\n                    <button class=\"dismiss-btn\" onclick=\"this.parentElement.parentElement.remove()\">Dismiss</button>\n                </div>\n            </div>\n        `;\n  }\n\n  async notifyToolCompletion(toolName) {\n    try {\n      // Notify swarm of tool completion\n      const response = await fetch('/api/swarm/notify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: `${toolName} completed`,\n          timestamp: Date.now(),\n          agent: 'analysis-tools',\n        }),\n      });\n\n      if (!response.ok) {\n        console.warn('Failed to notify swarm');\n      }\n    } catch (error) {\n      console.error('Error notifying swarm:', error);\n    }\n  }\n\n  destroy() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n\n    if (this.ws) {\n      this.ws.close();\n    }\n\n    Object.values(this.charts).forEach((chart) => {\n      if (chart && chart.destroy) {\n        chart.destroy();\n      }\n    });\n  }\n}\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.analysisTools = new AnalysisTools();\n});\n\n// Export for module use\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = AnalysisTools;\n}\n"],"names":["AnalysisTools","ws","charts","currentTab","isConnected","metricsCache","Map","updateInterval","init","setupWebSocket","setupEventListeners","initializeCharts","startRealTimeUpdates","WebSocket","onopen","console","log","updateConnectionStatus","onmessage","event","data","JSON","parse","handleWebSocketData","onclose","setTimeout","onerror","error","document","querySelectorAll","forEach","tab","addEventListener","e","switchTab","target","dataset","btn","format","type","exportData","tool","executeTool","section","refreshSection","performance","Chart","getElementById","labels","datasets","label","borderColor","backgroundColor","tension","options","responsive","maintainAspectRatio","plugins","legend","position","scales","x","display","title","text","y","tokenUsage","borderWidth","systemHealth","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","r","beginAtZero","max","loadMonitor","setInterval","requestMetricsUpdate","readyState","OPEN","send","stringify","timestamp","Date","now","updateMetrics","payload","handleAlert","updateHealthStatus","metrics","set","chart","toLocaleTimeString","push","responseTime","throughput","length","shift","update","tokens","input","output","cached","health","cpu","memory","disk","network","api","database","load","oneMin","fiveMin","fifteenMin","thirtyMin","oneHour","twentyFourHour","updateMetricDisplays","perfSection","innerHTML","errorRate","uptime","tokenSection","total","toLocaleString","toFixed","healthSection","overallHealth","Math","round","getHealthClass","score","alert","alertsContainer","alertElement","createElement","className","severity","message","insertBefore","firstChild","parentElement","remove","tabName","classList","querySelector","add","panel","Object","values","resize","toolName","button","disabled","performanceReport","bottleneckAnalyze","benchmarkRun","metricsCollect","trendAnalysis","costAnalysis","qualityAssess","errorAnalysis","usageStats","healthCheck","capacityPlan","warn","showError","report","fetchAnalysisData","displayReport","notifyToolCompletion","displayError","analysis","displayAnalysis","usage","displayUsage","benchmark","displayBenchmark","displayMetrics","trends","displayTrends","costs","displayCosts","quality","displayQuality","errors","displayErrors","stats","displayStats","displayHealth","displayLoad","capacity","displayCapacity","endpoint","response","fetch","ok","Error","status","json","getMockData","mockData","summary","averageResponseTime","recommendations","bottlenecks","component","impact","totalTokens","inputTokens","outputTokens","cachedTokens","cost","efficiency","containerId","container","map","rec","join","bottleneck","get","toISOString","split","filename","downloadJSON","downloadCSV","blob","Blob","url","URL","createObjectURL","a","href","download","click","revokeObjectURL","csv","jsonToCSV","flatten","obj","prefix","flattened","key","Array","isArray","assign","headers","keys","valueRow","header","value","undefined","strValue","String","includes","replace","statusElement","textContent","charAt","toUpperCase","slice","errorElement","body","appendChild","method","agent","destroy","clearInterval","close","window","analysisTools","module","exports"],"mappings":"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"}