{"version":3,"sources":["../../../../src/ui/console/test-neural-networks.js"],"sourcesContent":["/**\n * Neural Networks Dialog Test Script\n * Tests all functionality of the neural networks panel\n */\n\n// Test report object\nconst testReport = {\n  timestamp: new Date().toISOString(),\n  passed: [],\n  failed: [],\n  warnings: [],\n};\n\n// Helper function to log test results\nfunction logTest(name, passed, message = '') {\n  if (passed) {\n    testReport.passed.push(name);\n    console.log(`✅ ${name}`);\n  } else {\n    testReport.failed.push({ name, message });\n    console.error(`❌ ${name}: ${message}`);\n  }\n}\n\n// Helper function to log warnings\nfunction logWarning(message) {\n  testReport.warnings.push(message);\n  console.warn(`⚠️ ${message}`);\n}\n\n// Test 1: Check if neural networks panel exists\nfunction testPanelExists() {\n  const panel = document.getElementById('neuralNetworksPanel');\n  logTest('Neural Networks Panel Exists', !!panel, panel ? '' : 'Panel element not found');\n  return !!panel;\n}\n\n// Test 2: Check if toggle button exists\nfunction testToggleButton() {\n  const button = document.getElementById('neuralToggle');\n  logTest('Neural Toggle Button Exists', !!button, button ? '' : 'Toggle button not found');\n  return !!button;\n}\n\n// Test 3: Test panel toggle functionality\nfunction testPanelToggle() {\n  const button = document.getElementById('neuralToggle');\n  const panel = document.getElementById('neuralNetworksPanel');\n\n  if (!button || !panel) {\n    logTest('Panel Toggle Functionality', false, 'Required elements not found');\n    return false;\n  }\n\n  // Check initial state\n  const initiallyHidden = panel.classList.contains('hidden');\n\n  // Click to toggle\n  button.click();\n\n  // Check if state changed\n  const afterClickHidden = panel.classList.contains('hidden');\n  const toggled = initiallyHidden !== afterClickHidden;\n\n  logTest('Panel Toggle Functionality', toggled, toggled ? '' : 'Panel did not toggle');\n\n  // If panel is now visible, keep it open for further tests\n  if (afterClickHidden) {\n    button.click();\n  }\n\n  return toggled;\n}\n\n// Test 4: Check all tabs exist and can be switched\nfunction testTabSwitching() {\n  const tabs = ['tools', 'training', 'models', 'patterns', 'performance'];\n  let allTabsWork = true;\n\n  tabs.forEach((tabName) => {\n    const tabButton = document.querySelector(`[data-tab=\"${tabName}\"]`);\n    const tabContent = document.querySelector(`.neural-tab-content[data-tab=\"${tabName}\"]`);\n\n    if (!tabButton || !tabContent) {\n      logTest(`Tab \"${tabName}\" exists`, false, `Tab button or content not found`);\n      allTabsWork = false;\n      return;\n    }\n\n    // Click the tab\n    tabButton.click();\n\n    // Check if tab is active\n    const isActive =\n      tabButton.classList.contains('active') && tabContent.classList.contains('active');\n    logTest(\n      `Tab \"${tabName}\" switching`,\n      isActive,\n      isActive ? '' : 'Tab did not activate properly',\n    );\n\n    if (!isActive) allTabsWork = false;\n  });\n\n  return allTabsWork;\n}\n\n// Test 5: Check tool cards and their buttons\nfunction testToolCards() {\n  // Switch to tools tab first\n  const toolsTab = document.querySelector('[data-tab=\"tools\"]');\n  if (toolsTab) toolsTab.click();\n\n  const toolCards = document.querySelectorAll('.neural-tool-card');\n  logTest('Tool cards exist', toolCards.length > 0, `Found ${toolCards.length} tool cards`);\n\n  if (toolCards.length === 0) return false;\n\n  let allButtonsWork = true;\n  toolCards.forEach((card, index) => {\n    const executeBtn = card.querySelector('[data-action=\"execute\"]');\n    const configureBtn = card.querySelector('[data-action=\"configure\"]');\n\n    if (!executeBtn || !configureBtn) {\n      logWarning(`Tool card ${index} missing buttons`);\n      allButtonsWork = false;\n    }\n  });\n\n  logTest('All tool cards have buttons', allButtonsWork);\n  return allButtonsWork;\n}\n\n// Test 6: Check training controls\nfunction testTrainingControls() {\n  // Switch to training tab\n  const trainingTab = document.querySelector('[data-tab=\"training\"]');\n  if (trainingTab) trainingTab.click();\n\n  const controls = {\n    'Training Type Select': document.getElementById('trainingType'),\n    'Training Data Textarea': document.getElementById('trainingData'),\n    'Epochs Input': document.getElementById('trainingEpochs'),\n    'Learning Rate Input': document.getElementById('learningRate'),\n    'Start Training Button': document.getElementById('startTraining'),\n    'Stop Training Button': document.getElementById('stopTraining'),\n  };\n\n  let allControlsExist = true;\n  Object.entries(controls).forEach(([name, element]) => {\n    const exists = !!element;\n    logTest(`${name} exists`, exists, exists ? '' : 'Control not found');\n    if (!exists) allControlsExist = false;\n  });\n\n  return allControlsExist;\n}\n\n// Test 7: Check model management controls\nfunction testModelControls() {\n  // Switch to models tab\n  const modelsTab = document.querySelector('[data-tab=\"models\"]');\n  if (modelsTab) modelsTab.click();\n\n  const loadButton = document.getElementById('loadModel');\n  const createButton = document.getElementById('createModel');\n  const modelsGrid = document.getElementById('modelsGrid');\n\n  logTest('Load Model button exists', !!loadButton);\n  logTest('Create Model button exists', !!createButton);\n  logTest('Models Grid exists', !!modelsGrid);\n\n  return !!(loadButton && createButton && modelsGrid);\n}\n\n// Test 8: Check pattern analysis controls\nfunction testPatternControls() {\n  // Switch to patterns tab\n  const patternsTab = document.querySelector('[data-tab=\"patterns\"]');\n  if (patternsTab) patternsTab.click();\n\n  const analyzeButton = document.getElementById('analyzePatterns');\n  const recognizeButton = document.getElementById('recognizePatterns');\n  const behaviorButton = document.getElementById('analyzeBehavior');\n  const behaviorInput = document.getElementById('behaviorInput');\n\n  logTest('Analyze Patterns button exists', !!analyzeButton);\n  logTest('Recognize Patterns button exists', !!recognizeButton);\n  logTest('Analyze Behavior button exists', !!behaviorButton);\n  logTest('Behavior Input exists', !!behaviorInput);\n\n  return !!(analyzeButton && recognizeButton && behaviorButton && behaviorInput);\n}\n\n// Test 9: Check performance controls\nfunction testPerformanceControls() {\n  // Switch to performance tab\n  const performanceTab = document.querySelector('[data-tab=\"performance\"]');\n  if (performanceTab) performanceTab.click();\n\n  const optimizeButton = document.getElementById('optimizeWasm');\n  const compressButton = document.getElementById('compressModels');\n  const benchmarkButton = document.getElementById('runBenchmark');\n\n  logTest('Optimize WASM button exists', !!optimizeButton);\n  logTest('Compress Models button exists', !!compressButton);\n  logTest('Run Benchmark button exists', !!benchmarkButton);\n\n  return !!(optimizeButton && compressButton && benchmarkButton);\n}\n\n// Test 10: Check header buttons\nfunction testHeaderButtons() {\n  const refreshButton = document.getElementById('refreshNeuralData');\n  const exportButton = document.getElementById('exportNeuralData');\n  const closeButton = document.getElementById('closeNeuralPanel');\n\n  logTest('Refresh button exists', !!refreshButton);\n  logTest('Export button exists', !!exportButton);\n  logTest('Close button exists', !!closeButton);\n\n  return !!(refreshButton && exportButton && closeButton);\n}\n\n// Test 11: Check visual elements\nfunction testVisualElements() {\n  const statusIndicator = document.getElementById('neuralStatusIndicator');\n  const statusText = document.getElementById('neuralStatusText');\n  const performanceMetrics = document.getElementById('performanceMetrics');\n\n  logTest('Status indicator exists', !!statusIndicator);\n  logTest('Status text exists', !!statusText);\n\n  return !!(statusIndicator && statusText);\n}\n\n// Test 12: Check WebSocket integration\nfunction testWebSocketIntegration() {\n  const hasNeuralPanel = window.neuralPanel && window.neuralPanel.panel;\n  const hasExtended = window.neuralPanel && window.neuralPanel.extended;\n\n  logTest('Neural panel global object exists', hasNeuralPanel);\n  logTest('Neural extended functionality exists', hasExtended);\n\n  if (hasNeuralPanel) {\n    const panel = window.neuralPanel.panel;\n    logTest('Panel is initialized', panel.isInitialized);\n    logTest('WebSocket client exists', !!panel.wsClient);\n  }\n\n  return hasNeuralPanel && hasExtended;\n}\n\n// Run all tests\nasync function runAllTests() {\n  console.log('🧪 Starting Neural Networks Dialog Tests...\\n');\n\n  // Wait for page to fully load\n  if (document.readyState !== 'complete') {\n    await new Promise((resolve) => window.addEventListener('load', resolve));\n  }\n\n  // Wait a bit more for dynamic content\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Run tests\n  testPanelExists();\n  testToggleButton();\n  testPanelToggle();\n  testTabSwitching();\n  testToolCards();\n  testTrainingControls();\n  testModelControls();\n  testPatternControls();\n  testPerformanceControls();\n  testHeaderButtons();\n  testVisualElements();\n  testWebSocketIntegration();\n\n  // Generate report\n  console.log('\\n📊 Test Report Summary:');\n  console.log(`✅ Passed: ${testReport.passed.length}`);\n  console.log(`❌ Failed: ${testReport.failed.length}`);\n  console.log(`⚠️ Warnings: ${testReport.warnings.length}`);\n\n  if (testReport.failed.length > 0) {\n    console.log('\\n❌ Failed Tests:');\n    testReport.failed.forEach((failure) => {\n      console.log(`  - ${failure.name}: ${failure.message}`);\n    });\n  }\n\n  if (testReport.warnings.length > 0) {\n    console.log('\\n⚠️ Warnings:');\n    testReport.warnings.forEach((warning) => {\n      console.log(`  - ${warning}`);\n    });\n  }\n\n  // Return test report\n  return testReport;\n}\n\n// Export for use in console\nwindow.testNeuralNetworks = runAllTests;\n\n// Auto-run if script is loaded directly\nif (document.readyState === 'complete') {\n  runAllTests();\n} else {\n  window.addEventListener('load', () => {\n    setTimeout(runAllTests, 1000); // Give time for dynamic content to load\n  });\n}\n"],"names":["testReport","timestamp","Date","toISOString","passed","failed","warnings","logTest","name","message","push","console","log","error","logWarning","warn","testPanelExists","panel","document","getElementById","testToggleButton","button","testPanelToggle","initiallyHidden","classList","contains","click","afterClickHidden","toggled","testTabSwitching","tabs","allTabsWork","forEach","tabName","tabButton","querySelector","tabContent","isActive","testToolCards","toolsTab","toolCards","querySelectorAll","length","allButtonsWork","card","index","executeBtn","configureBtn","testTrainingControls","trainingTab","controls","allControlsExist","Object","entries","element","exists","testModelControls","modelsTab","loadButton","createButton","modelsGrid","testPatternControls","patternsTab","analyzeButton","recognizeButton","behaviorButton","behaviorInput","testPerformanceControls","performanceTab","optimizeButton","compressButton","benchmarkButton","testHeaderButtons","refreshButton","exportButton","closeButton","testVisualElements","statusIndicator","statusText","performanceMetrics","testWebSocketIntegration","hasNeuralPanel","window","neuralPanel","hasExtended","extended","isInitialized","wsClient","runAllTests","readyState","Promise","resolve","addEventListener","setTimeout","failure","warning","testNeuralNetworks"],"mappings":"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"}